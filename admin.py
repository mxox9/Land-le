from config import ADMIN_IDS, users, orders, ADMIN_IMAGE
from services import SERVICES, get_service_by_id
import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton

def is_admin(user_id):
    """Check if user is admin"""
    return user_id in ADMIN_IDS

def get_admin_keyboard():
    """Get admin panel inline keyboard"""
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("üì¢ B Ä·¥è·¥Ä·¥Ö·¥Ñ·¥Äs·¥õ", callback_data="admin_broadcast"),
        InlineKeyboardButton("üí∞ A·¥Ö·¥Ö B·¥Ä ü·¥Ä…¥·¥Ñ·¥á", callback_data="admin_add_balance"),
        InlineKeyboardButton("üí∏ D·¥á·¥Ö·¥ú·¥Ñ·¥õ B·¥Ä ü·¥Ä…¥·¥Ñ·¥á", callback_data="admin_deduct_balance"),
        InlineKeyboardButton("üë• B·¥Ä…¥/U…¥ ô·¥Ä…¥", callback_data="admin_ban_user"),
        InlineKeyboardButton("üì¶ S·¥á Ä·¥†…™·¥Ñ·¥á P Ä…™·¥Ñ·¥á", callback_data="admin_service_price")
    )
    return keyboard

def show_admin_panel(bot, message):
    """Show admin panel"""
    if not is_admin(message.from_user.id):
        bot.send_message(message.chat.id, "‚ùå A·¥Ñ·¥Ñ·¥áss D·¥á…¥…™·¥á·¥Ö")
        return
    
    total_users = len(users)
    total_orders = len(orders)
    total_balance = sum(user.get('balance', 0) for user in users.values())
    
    caption = f"""
üëë A·¥Ö·¥ç…™…¥ P·¥Ä…¥·¥á ü

üìä S·¥õ·¥Ä·¥õ…™s·¥õ…™·¥Ñs:
‚îú‚îÄ üë• T·¥è·¥õ·¥Ä ü Us·¥á Äs: {total_users}
‚îú‚îÄ üì¶ T·¥è·¥õ·¥Ä ü O Ä·¥Ö·¥á Äs: {total_orders}
‚îî‚îÄ üí∞ T·¥è·¥õ·¥Ä ü B·¥Ä ü·¥Ä…¥·¥Ñ·¥á: ‚Çπ{total_balance:,.2f}

S·¥á ü·¥á·¥Ñ·¥õ ·¥Ä…¥ ·¥Ä·¥Ñ·¥õ…™·¥è…¥:
    """.strip()
    
    bot.send_photo(
        message.chat.id,
        ADMIN_IMAGE,
        caption=caption,
        reply_markup=get_admin_keyboard()
    )

def handle_broadcast(bot, call):
    """Handle broadcast message"""
    bot.send_message(call.message.chat.id, "üì¢ S·¥á…¥·¥Ö ·¥õ ú·¥á  ô Ä·¥è·¥Ä·¥Ö·¥Ñ·¥Äs·¥õ ·¥ç·¥áss·¥Ä…¢·¥á:")
    bot.register_next_step_handler(call.message, process_broadcast)

def process_broadcast(bot, message):
    """Process and send broadcast message"""
    if not is_admin(message.from_user.id):
        return
    
    broadcast_text = message.text
    success_count = 0
    
    for user_id in users.keys():
        try:
            bot.send_message(user_id, f"üì¢ A…¥…¥·¥è·¥ú…¥·¥Ñ·¥á·¥ç·¥á…¥·¥õ:\n\n{broadcast_text}")
            success_count += 1
        except:
            continue
    
    bot.send_message(
        message.chat.id,
        f"‚úÖ B Ä·¥è·¥Ä·¥Ö·¥Ñ·¥Äs·¥õ s·¥á…¥·¥õ ·¥õ·¥è {success_count}/{len(users)} ·¥ús·¥á Äs"
    )

def handle_add_balance(bot, call):
    """Handle add balance request"""
    bot.send_message(call.message.chat.id, "üë§ E…¥·¥õ·¥á Ä ·¥ús·¥á Ä ID:")
    bot.register_next_step_handler(call.message, process_user_id_for_balance, "add")

def handle_deduct_balance(bot, call):
    """Handle deduct balance request"""
    bot.send_message(call.message.chat.id, "üë§ E…¥·¥õ·¥á Ä ·¥ús·¥á Ä ID:")
    bot.register_next_step_handler(call.message, process_user_id_for_balance, "deduct")

def process_user_id_for_balance(bot, message, action):
    """Process user ID for balance operation"""
    try:
        user_id = int(message.text)
        bot.send_message(message.chat.id, f"üí∞ E…¥·¥õ·¥á Ä ·¥Ä·¥ç·¥è·¥ú…¥·¥õ ·¥õ·¥è {action}:")
        bot.register_next_step_handler(message, process_balance_amount, user_id, action)
    except ValueError:
        bot.send_message(message.chat.id, "‚ùå I…¥·¥†·¥Ä ü…™·¥Ö ·¥ús·¥á Ä ID")

def process_balance_amount(bot, message, user_id, action):
    """Process balance amount"""
    try:
        amount = float(message.text)
        
        if user_id not in users:
            users[user_id] = {'balance': 0, 'deposits': 0, 'spent': 0}
        
        if action == "add":
            users[user_id]['balance'] += amount
            users[user_id]['deposits'] += amount
            bot.send_message(message.chat.id, f"‚úÖ A·¥Ö·¥Ö·¥á·¥Ö ‚Çπ{amount:,.2f} ·¥õ·¥è ·¥ús·¥á Ä {user_id}")
            bot.send_message(user_id, f"üí∞ A·¥Ö·¥ç…™…¥ ·¥Ä·¥Ö·¥Ö·¥á·¥Ö ‚Çπ{amount:,.2f} ·¥õ·¥è  è·¥è·¥ú Ä  ô·¥Ä ü·¥Ä…¥·¥Ñ·¥á")
        else:
            if users[user_id]['balance'] >= amount:
                users[user_id]['balance'] -= amount
                bot.send_message(message.chat.id, f"‚úÖ D·¥á·¥Ö·¥ú·¥Ñ·¥õ·¥á·¥Ö ‚Çπ{amount:,.2f} “ì Ä·¥è·¥ç ·¥ús·¥á Ä {user_id}")
                bot.send_message(user_id, f"üí∞ A·¥Ö·¥ç…™…¥ ·¥Ö·¥á·¥Ö·¥ú·¥Ñ·¥õ·¥á·¥Ö ‚Çπ{amount:,.2f} “ì Ä·¥è·¥ç  è·¥è·¥ú Ä  ô·¥Ä ü·¥Ä…¥·¥Ñ·¥á")
            else:
                bot.send_message(message.chat.id, "‚ùå I…¥s·¥ú“ì“ì…™·¥Ñ…™·¥á…¥·¥õ  ô·¥Ä ü·¥Ä…¥·¥Ñ·¥á")
                
    except ValueError:
        bot.send_message(message.chat.id, "‚ùå I…¥·¥†·¥Ä ü…™·¥Ö ·¥Ä·¥ç·¥è·¥ú…¥·¥õ")

def get_service_selection_keyboard():
    """Get keyboard for service selection in admin panel"""
    keyboard = InlineKeyboardMarkup()
    for category, service_list in SERVICES.items():
        for service in service_list:
            keyboard.add(InlineKeyboardButton(
                f"{service['name']} - ‚Çπ{service['price']}", 
                callback_data=f"admin_service_{service['id']}"
            ))
    keyboard.add(InlineKeyboardButton("üîô B·¥Ä·¥Ñ·¥ã", callback_data="admin_back"))
    return keyboard

def handle_service_price(bot, call):
    """Handle service price update"""
    bot.send_message(
        call.message.chat.id,
        "üì¶ S·¥á ü·¥á·¥Ñ·¥õ ·¥Ä s·¥á Ä·¥†…™·¥Ñ·¥á ·¥õ·¥è ·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥á ·¥ò Ä…™·¥Ñ·¥á:",
        reply_markup=get_service_selection_keyboard()
    )

def handle_service_selection(bot, call, service_id):
    """Handle service selection for price update"""
    service = get_service_by_id(service_id)
    if service:
        bot.send_message(
            call.message.chat.id,
            f"üè∑ S·¥á Ä·¥†…™·¥Ñ·¥á: {service['name']}\nüí∞ C·¥ú Ä Ä·¥á…¥·¥õ P Ä…™·¥Ñ·¥á: ‚Çπ{service['price']}\n\nE…¥·¥õ·¥á Ä …¥·¥á·¥° ·¥ò Ä…™·¥Ñ·¥á:"
        )
        bot.register_next_step_handler(call.message, process_new_price, service_id)
    else:
        bot.send_message(call.message.chat.id, "‚ùå S·¥á Ä·¥†…™·¥Ñ·¥á …¥·¥è·¥õ “ì·¥è·¥ú…¥·¥Ö")

def process_new_price(bot, message, service_id):
    """Process new price for service"""
    try:
        new_price = float(message.text)
        service = get_service_by_id(service_id)
        
        if service:
            service['price'] = new_price
            bot.send_message(
                message.chat.id,
                f"‚úÖ P Ä…™·¥Ñ·¥á ·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥á·¥Ö!\n{service['name']} - ‚Çπ{new_price:.2f}"
            )
        else:
            bot.send_message(message.chat.id, "‚ùå S·¥á Ä·¥†…™·¥Ñ·¥á …¥·¥è·¥õ “ì·¥è·¥ú…¥·¥Ö")
            
    except ValueError:
        bot.send_message(message.chat.id, "‚ùå I…¥·¥†·¥Ä ü…™·¥Ö ·¥ò Ä…™·¥Ñ·¥á")
