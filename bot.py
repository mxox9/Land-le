import os
import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
import pymongo
from pymongo import MongoClient
import requests
import time
from datetime import datetime
import random
import urllib.parse
import threading
from bson import ObjectId
from dotenv import load_dotenv
import qrcode
import io
import json

# Load environment variables
load_dotenv()

# Configuration from environment variables
BOT_TOKEN = os.getenv('BOT_TOKEN', '8052955693:AAGf3qd5VXfq1I7d0_lM0eE3YwKFuBXLxvw')
MONGO_URI = os.getenv('MONGO_URI', 'mongodb+srv://saifulmolla79088179_db_user:17gNrX0pC3bPqVaG@cluster0.fusvqca.mongodb.net/test?retryWrites=true&w=majority&appName=Cluster0')
ADMIN_IDS = [int(x.strip()) for x in os.getenv('ADMIN_IDS', '6052975324').split(',')]
CHANNEL_ID = os.getenv('CHANNEL_ID', '@prooflelo1')
SMM_API_URL = os.getenv('SMM_API_URL', 'https://smm-jupiter.com/api/v2')
SMM_API_KEY = os.getenv('SMM_API_KEY', 'c33fb3166621856879b2e486b99a30f0c442ac92')
PROOF_CHANNEL = "@prooflelo1"
SUPPORT_LINK = "https://t.me/your_support"
BOT_LINK = "https://t.me/your_bot"

# Payment API Keys
AUTODEP_API_KEY = "LY81vEV7"
AUTODEP_MERCHANT_KEY = "WYcmQI71591891985230"

# Initialize bot
bot = telebot.TeleBot(BOT_TOKEN)

# MongoDB connection for user data only
try:
    client = MongoClient(MONGO_URI, serverSelectionTimeoutMS=5000)
    db = client.smm_bot
    users_collection = db.users
    orders_collection = db.orders
    deposits_collection = db.deposits
    user_sessions_collection = db.user_sessions
    admin_logs_collection = db.admin_logs
    print("‚úÖ M·¥è…¥…¢·¥èDB ·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õ·¥á·¥Ö s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è!")
except Exception as e:
    print(f"‚ùå M·¥è…¥…¢·¥èDB ·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õ…™·¥è…¥ ·¥á Ä Ä·¥è Ä: {e}")
    exit(1)

# Image URLs
WELCOME_IMAGE = "https://t.me/prooflelo1/135?single"
SERVICE_IMAGE = "https://t.me/prooflelo1/138?single"
DEPOSIT_IMAGE = "https://t.me/prooflelo1/136?single"
ACCOUNT_IMAGE = "https://t.me/prooflelo1/137?single"
HISTORY_IMAGE = "https://t.me/prooflelo1/139?single"
REFER_IMAGE = "https://t.me/prooflelo1/17"
ADMIN_IMAGE = "https://t.me/prooflelo1/140?single"

# Services data (LOCAL STORAGE - same as bot2.py but with land.py font style)
SERVICES = {
    "I…¥s·¥õ·¥Ä…¢ Ä·¥Ä·¥ç": {
        "üì∏ I…¥s·¥õ·¥Ä…¢ Ä·¥Ä·¥ç L…™·¥ã·¥ás": {"id": 101, "price": 30, "min": 100, "max": 10000, "unit": 1000},
        "üëÅ I…¥s·¥õ·¥Ä…¢ Ä·¥Ä·¥ç V…™·¥á·¥°s": {"id": 13685, "price": 50, "min": 100, "max": 50000, "unit": 1000},
        "üë§ I…¥s·¥õ·¥Ä…¢ Ä·¥Ä·¥ç F·¥è ü ü·¥è·¥°·¥á Äs": {"id": 103, "price": 80, "min": 100, "max": 10000, "unit": 1000}
    },
    "F·¥Ä·¥Ñ·¥á ô·¥è·¥è·¥ã": {
        "üëç F·¥Ä·¥Ñ·¥á ô·¥è·¥è·¥ã L…™·¥ã·¥ás": {"id": 201, "price": 40, "min": 100, "max": 20000, "unit": 1000},
        "üëÅ F·¥Ä·¥Ñ·¥á ô·¥è·¥è·¥ã V…™·¥á·¥°s": {"id": 202, "price": 60, "min": 100, "max": 50000, "unit": 1000},
        "üë• F·¥Ä·¥Ñ·¥á ô·¥è·¥è·¥ã F·¥è ü ü·¥è·¥°·¥á Äs": {"id": 203, "price": 90, "min": 100, "max": 15000, "unit": 1000}
    },
    "Y·¥è·¥úT·¥ú ô·¥á": {
        "üëç Y·¥è·¥úT·¥ú ô·¥á L…™·¥ã·¥ás": {"id": 301, "price": 35, "min": 100, "max": 50000, "unit": 1000},
        "üëÅ Y·¥è·¥úT·¥ú ô·¥á V…™·¥á·¥°s": {"id": 302, "price": 45, "min": 100, "max": 100000, "unit": 1000},
        "üîî Y·¥è·¥úT·¥ú ô·¥á S·¥ú ôs·¥Ñ Ä…™ ô·¥á Äs": {"id": 303, "price": 120, "min": 100, "max": 10000, "unit": 1000}
    },
    "T·¥á ü·¥á…¢ Ä·¥Ä·¥ç": {
        "üë• T·¥á ü·¥á…¢ Ä·¥Ä·¥ç M·¥á·¥ç ô·¥á Äs": {"id": 401, "price": 25, "min": 100, "max": 50000, "unit": 1000},
        "üëç T·¥á ü·¥á…¢ Ä·¥Ä·¥ç P·¥ès·¥õ L…™·¥ã·¥ás": {"id": 402, "price": 20, "min": 100, "max": 100000, "unit": 1000},
        "üëÅ T·¥á ü·¥á…¢ Ä·¥Ä·¥ç P·¥ès·¥õ V…™·¥á·¥°s": {"id": 403, "price": 15, "min": 100, "max": 100000, "unit": 1000}
    }
}

# Font style mapping for land.py style
FONT_STYLE = {
    'A': 'A', 'B': ' ô', 'C': '·¥Ñ', 'D': '·¥Ö', 'E': 'E', 'F': '“ì', 'G': '…¢', 'H': ' ú', 
    'I': 'I', 'J': '·¥ä', 'K': '·¥ã', 'L': ' ü', 'M': 'M', 'N': '…¥', 'O': '·¥è', 'P': '·¥ò',
    'Q': 'Q', 'R': ' Ä', 'S': 's', 'T': 'T', 'U': '·¥ú', 'V': '·¥†', 'W': 'W', 'X': 'x',
    'Y': 'Y', 'Z': 'Z',
    'a': '·¥Ä', 'b': ' ô', 'c': '·¥Ñ', 'd': '·¥Ö', 'e': '·¥á', 'f': '“ì', 'g': '…¢', 'h': ' ú',
    'i': '…™', 'j': '·¥ä', 'k': '·¥ã', 'l': ' ü', 'm': '·¥ç', 'n': '…¥', 'o': '·¥è', 'p': '·¥ò',
    'q': '«´', 'r': ' Ä', 's': 's', 't': '·¥õ', 'u': '·¥ú', 'v': '·¥†', 'w': '·¥°', 'x': 'x',
    'y': ' è', 'z': '·¥¢'
}

def convert_to_styled(text):
    """C·¥è…¥·¥†·¥á Ä·¥õ ·¥õ·¥áx·¥õ ·¥õ·¥è  ü·¥Ä…¥·¥Ö.·¥ò è “ì·¥è…¥·¥õ s·¥õ è ü·¥á"""
    result = ""
    for char in text:
        if char in FONT_STYLE:
            result += FONT_STYLE[char]
        else:
            result += char
    return result

# MongoDB Helper Functions (for user balances only)
def get_user(user_id):
    """G·¥á·¥õ ·¥ús·¥á Ä “ì Ä·¥è·¥ç M·¥è…¥…¢·¥èDB"""
    return users_collection.find_one({"user_id": user_id})

def create_user(user_id, username):
    """C Ä·¥á·¥Ä·¥õ·¥á …¥·¥á·¥° ·¥ús·¥á Ä …™…¥ M·¥è…¥…¢·¥èDB"""
    if not get_user(user_id):
        users_collection.insert_one({
            "user_id": user_id,
            "username": username,
            "balance": 0.0,
            "total_deposits": 0.0,
            "total_spent": 0.0,
            "banned": False,
            "joined_date": datetime.now()
        })

def update_balance(user_id, amount):
    """U·¥ò·¥Ö·¥Ä·¥õ·¥á ·¥ús·¥á Ä  ô·¥Ä ü·¥Ä…¥·¥Ñ·¥á …™…¥ M·¥è…¥…¢·¥èDB"""
    user = get_user(user_id)
    if not user:
        create_user(user_id, f"Us·¥á Ä_{user_id}")
        user = get_user(user_id)
    
    new_balance = user.get("balance", 0) + amount
    
    if amount > 0:
        users_collection.update_one(
            {"user_id": user_id},
            {"$set": {"balance": new_balance}, "$inc": {"total_deposits": amount}}
        )
    else:
        users_collection.update_one(
            {"user_id": user_id},
            {"$set": {"balance": new_balance}, "$inc": {"total_spent": abs(amount)}}
        )
    
    return new_balance

def get_balance(user_id):
    """G·¥á·¥õ ·¥ús·¥á Ä  ô·¥Ä ü·¥Ä…¥·¥Ñ·¥á “ì Ä·¥è·¥ç M·¥è…¥…¢·¥èDB"""
    user = get_user(user_id)
    return user.get("balance", 0) if user else 0

def add_order(user_id, service_name, link, quantity, cost, api_order_id):
    """A·¥Ö·¥Ö ·¥è Ä·¥Ö·¥á Ä ·¥õ·¥è M·¥è…¥…¢·¥èDB"""
    orders_collection.insert_one({
        "user_id": user_id,
        "service_name": service_name,
        "link": link,
        "quantity": quantity,
        "cost": cost,
        "status": "P·¥á…¥·¥Ö…™…¥…¢",
        "api_order_id": api_order_id,
        "order_date": datetime.now()
    })

def get_user_orders(user_id, limit=5):
    """G·¥á·¥õ ·¥ús·¥á Ä ·¥è Ä·¥Ö·¥á Äs “ì Ä·¥è·¥ç M·¥è…¥…¢·¥èDB"""
    return list(orders_collection.find(
        {"user_id": user_id}
    ).sort("order_date", -1).limit(limit))

def add_deposit(user_id, amount, utr):
    """A·¥Ö·¥Ö ·¥Ö·¥á·¥ò·¥ès…™·¥õ ·¥õ·¥è M·¥è…¥…¢·¥èDB"""
    deposits_collection.insert_one({
        "user_id": user_id,
        "amount": amount,
        "utr": utr,
        "status": "P·¥á…¥·¥Ö…™…¥…¢",
        "deposit_date": datetime.now()
    })

def update_deposit_status(utr, status):
    """U·¥ò·¥Ö·¥Ä·¥õ·¥á ·¥Ö·¥á·¥ò·¥ès…™·¥õ s·¥õ·¥Ä·¥õ·¥ús …™…¥ M·¥è…¥…¢·¥èDB"""
    deposits_collection.update_one(
        {"utr": utr},
        {"$set": {"status": status}}
    )

# User session functions using MongoDB
def save_user_data(user_id, key, value):
    """S·¥Ä·¥†·¥á ·¥ús·¥á Ä s·¥áss…™·¥è…¥ ·¥Ö·¥Ä·¥õ·¥Ä …™…¥ M·¥è…¥…¢·¥èDB"""
    user_sessions_collection.update_one(
        {"user_id": user_id},
        {"$set": {key: value}},
        upsert=True
    )

def get_user_data(user_id, key):
    """G·¥á·¥õ ·¥ús·¥á Ä s·¥áss…™·¥è…¥ ·¥Ö·¥Ä·¥õ·¥Ä “ì Ä·¥è·¥ç M·¥è…¥…¢·¥èDB"""
    session = user_sessions_collection.find_one({"user_id": user_id})
    return session.get(key) if session else None

def delete_user_data(user_id, key):
    """D·¥á ü·¥á·¥õ·¥á s·¥ò·¥á·¥Ñ…™“ì…™·¥Ñ ·¥ús·¥á Ä s·¥áss…™·¥è…¥ ·¥Ö·¥Ä·¥õ·¥Ä"""
    user_sessions_collection.update_one(
        {"user_id": user_id},
        {"$unset": {key: ""}}
    )

def clear_all_user_data(user_id):
    """C ü·¥á·¥Ä Ä ·¥Ä ü ü ·¥ús·¥á Ä s·¥áss…™·¥è…¥ ·¥Ö·¥Ä·¥õ·¥Ä"""
    user_sessions_collection.delete_one({"user_id": user_id})

def get_all_users():
    """G·¥á·¥õ ·¥õ·¥è·¥õ·¥Ä ü ·¥ús·¥á Äs ·¥Ñ·¥è·¥ú…¥·¥õ"""
    return users_collection.count_documents({})

def get_total_orders():
    """G·¥á·¥õ ·¥õ·¥è·¥õ·¥Ä ü ·¥è Ä·¥Ö·¥á Äs ·¥Ñ·¥è·¥ú·¥ú…¥·¥õ"""
    return orders_collection.count_documents({})

def get_total_deposits():
    """G·¥á·¥õ ·¥õ·¥è·¥õ·¥Ä ü ·¥Ö·¥á·¥ò·¥ès…™·¥õs ·¥Ä·¥ç·¥è·¥ú…¥·¥õ"""
    pipeline = [
        {"$match": {"status": "C·¥è·¥ç·¥ò ü·¥á·¥õ·¥á·¥Ö"}},
        {"$group": {"_id": None, "total": {"$sum": "$amount"}}}
    ]
    result = list(deposits_collection.aggregate(pipeline))
    return result[0]["total"] if result else 0

def get_total_spent():
    """G·¥á·¥õ ·¥õ·¥è·¥õ·¥Ä ü s·¥ò·¥á…¥·¥õ ·¥Ä·¥ç·¥è·¥ú…¥·¥õ"""
    pipeline = [
        {"$group": {"_id": None, "total": {"$sum": "$cost"}}}
    ]
    result = list(orders_collection.aggregate(pipeline))
    return result[0]["total"] if result else 0

def log_admin_action(admin_id, action, details):
    """L·¥è…¢ ·¥Ä·¥Ö·¥ç…™…¥ ·¥Ä·¥Ñ·¥õ…™·¥è…¥s ·¥õ·¥è ·¥Ö·¥Ä·¥õ·¥Ä ô·¥Äs·¥á"""
    admin_logs_collection.insert_one({
        "admin_id": admin_id,
        "action": action,
        "details": details,
        "timestamp": datetime.now()
    })

# Keyboard helpers with land.py font style
def main_menu_keyboard():
    keyboard = InlineKeyboardMarkup(row_width=2)
    buttons = [
        InlineKeyboardButton("üí∞ D·¥á·¥ò·¥ès…™·¥õ", callback_data="deposit"),
        InlineKeyboardButton("üõí O Ä·¥Ö·¥á Ä", callback_data="order"),
        InlineKeyboardButton("üìã O Ä·¥Ö·¥á Äs", callback_data="orders"),
        InlineKeyboardButton("üë• R·¥á“ì·¥á Ä", callback_data="refer"),
        InlineKeyboardButton("üë§ A·¥Ñ·¥Ñ·¥è·¥ú…¥·¥õ", callback_data="account"),
        InlineKeyboardButton("üìä S·¥õ·¥Ä·¥õs", callback_data="stats"),
        InlineKeyboardButton("‚ÑπÔ∏è S·¥ú·¥ò·¥ò·¥è Ä·¥õ", callback_data="support")
    ]
    keyboard.add(*buttons)
    if 6052975324 in ADMIN_IDS:
        keyboard.add(InlineKeyboardButton("üëë A·¥Ö·¥ç…™…¥", callback_data="admin"))
    return keyboard

def categories_keyboard():
    keyboard = InlineKeyboardMarkup(row_width=2)
    buttons = []
    for category in SERVICES.keys():
        emoji = "üì∏" if category == "I…¥s·¥õ·¥Ä…¢ Ä·¥Ä·¥ç" else "üëç" if category == "F·¥Ä·¥Ñ·¥á ô·¥è·¥è·¥ã" else "üì∫" if category == "Y·¥è·¥úT·¥ú ô·¥á" else "üì±"
        buttons.append(InlineKeyboardButton(f"{emoji} {category}", callback_data=f"cat_{category}"))
    
    keyboard.add(*buttons)
    keyboard.add(InlineKeyboardButton("üîô B·¥Ä·¥Ñ·¥ã", callback_data="land"))
    return keyboard

def services_keyboard(category):
    keyboard = InlineKeyboardMarkup()
    for service_name in SERVICES[category].keys():
        keyboard.add(InlineKeyboardButton(service_name, callback_data=f"serv_{category}_{service_name}"))
    keyboard.add(InlineKeyboardButton("üîô B·¥Ä·¥Ñ·¥ã", callback_data="order"))
    return keyboard

def admin_keyboard():
    keyboard = InlineKeyboardMarkup(row_width=2)
    buttons = [
        InlineKeyboardButton("üí∞ B·¥Ä ü·¥Ä…¥·¥Ñ·¥á C·¥è…¥·¥õ Ä·¥è ü", callback_data="admin_balance"),
        InlineKeyboardButton("üë§ Us·¥á Ä C·¥è…¥·¥õ Ä·¥è ü", callback_data="admin_users"),
        InlineKeyboardButton("üì¢ B Ä·¥è·¥Ä·¥Ö·¥Ñ·¥Äs·¥õ", callback_data="admin_broadcast"),
        InlineKeyboardButton("üìä S·¥õ·¥Ä·¥õs", callback_data="admin_stats"),
        InlineKeyboardButton("üîô M·¥Ä…™…¥ M·¥á…¥·¥ú", callback_data="land")
    ]
    keyboard.add(*buttons)
    return keyboard

def back_button_only():
    """B·¥Ä·¥Ñ·¥ã  ô·¥ú·¥õ·¥õ·¥è…¥ ·¥è…¥ ü è ·¥ã·¥á è ô·¥è·¥Ä Ä·¥Ö"""
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("üîô B·¥Ä·¥Ñ·¥ã", callback_data="main_menu"))
    return markup

def deposit_confirmation_keyboard():
    """D·¥á·¥ò·¥ès…™·¥õ ·¥Ñ·¥è…¥“ì…™ Ä·¥ç·¥Ä·¥õ…™·¥è…¥ ·¥ã·¥á è ô·¥è·¥Ä Ä·¥Ö"""
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("‚úÖ I H·¥Ä·¥†·¥á P·¥Ä…™·¥Ö", callback_data="confirm_deposit"))
    markup.add(InlineKeyboardButton("‚ùå C·¥Ä…¥·¥Ñ·¥á ü", callback_data="main_menu"))
    return markup

# Start command with land.py font style
@bot.message_handler(commands=['start'])
def start_command(message):
    user_id = message.from_user.id
    username = message.from_user.username or f"Us·¥á Ä_{user_id}"
    
    create_user(user_id, username)
    
    welcome_text = convert_to_styled(f"""
W·¥á ü·¥Ñ·¥è·¥ç·¥á ·¥õ·¥è SMM B·¥è·¥õ!

B·¥ú è s·¥è·¥Ñ…™·¥Ä ü ·¥ç·¥á·¥Ö…™·¥Ä s·¥á Ä·¥†…™·¥Ñ·¥ás ·¥Ä·¥õ ·¥Ñ ú·¥á·¥Ä·¥ò·¥ás·¥õ  Ä·¥Ä·¥õ·¥ás!

I…¥s·¥õ·¥Ä…¢ Ä·¥Ä·¥ç, F·¥Ä·¥Ñ·¥á ô·¥è·¥è·¥ã, Y·¥è·¥úT·¥ú ô·¥á & T·¥á ü·¥á…¢ Ä·¥Ä·¥ç s·¥á Ä·¥†…™·¥Ñ·¥ás
H…™…¢ ú Q·¥ú·¥Ä ü…™·¥õ è & F·¥Äs·¥õ D·¥á ü…™·¥†·¥á Ä è
S·¥á·¥Ñ·¥ú Ä·¥á P·¥Ä è·¥ç·¥á…¥·¥õs & 24/7 S·¥ú·¥ò·¥ò·¥è Ä·¥õ

S·¥õ·¥Ä Ä·¥õ  ô è ·¥Ö·¥á·¥ò·¥ès…™·¥õ…™…¥…¢ “ì·¥ú…¥·¥Ös ·¥è Ä ·¥ò ü·¥Ä·¥Ñ…™…¥…¢ ·¥Ä…¥ ·¥è Ä·¥Ö·¥á Ä!
    """)
    
    bot.send_photo(
        chat_id=user_id,
        photo=WELCOME_IMAGE,
        caption=welcome_text,
        reply_markup=main_menu_keyboard(),
        parse_mode='HTML'
    )

# Callback query handler
@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
    user_id = call.from_user.id
    message_id = call.message.message_id
    
    try:
        if call.data == "land":
            try:
                bot.delete_message(user_id, message_id)
            except:
                pass
            start_command(call.message)
        
        elif call.data == "main_menu":
            show_main_menu(call)
        
        elif call.data == "deposit":
            show_deposit_menu(user_id, message_id)
        
        elif call.data == "order":
            show_categories(user_id, message_id)
        
        elif call.data == "orders":
            show_orders(user_id, message_id)
        
        elif call.data == "refer":
            show_refer(user_id, message_id)
        
        elif call.data == "account":
            show_account(user_id, message_id)
        
        elif call.data == "stats":
            show_stats(user_id, message_id)
        
        elif call.data == "support":
            show_support(user_id, message_id)
        
        elif call.data.startswith("cat_"):
            category = call.data[4:]
            show_services(user_id, message_id, category)
        
        elif call.data.startswith("serv_"):
            parts = call.data.split("_")
            if len(parts) >= 3:
                category = parts[1]
                service_name = " ".join(parts[2:])
                start_order_flow(user_id, message_id, category, service_name)
        
        elif call.data == "check_txn":
            check_transaction(call)
        
        elif call.data == "confirm_deposit":
            process_deposit_confirmation(call)
        
        elif call.data == "admin":
            if user_id in ADMIN_IDS:
                show_admin_panel(user_id, message_id)
            else:
                bot.answer_callback_query(call.id, "‚ùå A·¥Ñ·¥Ñ·¥áss D·¥á…¥…™·¥á·¥Ö!", show_alert=True)
        
        elif call.data.startswith("admin_"):
            if user_id in ADMIN_IDS:
                handle_admin_commands(call)
            else:
                bot.answer_callback_query(call.id, "‚ùå A·¥Ñ·¥Ñ·¥áss D·¥á…¥…™·¥á·¥Ö!", show_alert=True)
                
    except Exception as e:
        print(f"E Ä Ä·¥è Ä …™…¥ ·¥Ñ·¥Ä ü ü ô·¥Ä·¥Ñ·¥ã: {e}")
        bot.answer_callback_query(call.id, "‚ùå E Ä Ä·¥è Ä ·¥è·¥Ñ·¥Ñ·¥ú Ä Ä·¥á·¥Ö!", show_alert=True)

# Deposit flow with land.py font style
def show_deposit_menu(user_id, message_id):
    # Clear old data
    delete_user_data(user_id, "deposit_utr")
    delete_user_data(user_id, "deposit_amount")
    delete_user_data(user_id, "deposit_qr_msg")
    
    deposit_text = convert_to_styled("E…¥·¥õ·¥á Ä T ú·¥á A·¥ç·¥è·¥ú…¥·¥õ Y·¥è·¥ú W·¥Ä…¥·¥õ T·¥è D·¥á·¥ò·¥ès…™·¥õ")
    
    try:
        bot.edit_message_media(
            chat_id=user_id,
            message_id=message_id,
            media=telebot.types.InputMediaPhoto(
                media=DEPOSIT_IMAGE,
                caption=deposit_text
            ),
            reply_markup=None
        )
    except:
        bot.send_photo(
            chat_id=user_id,
            photo=DEPOSIT_IMAGE,
            caption=deposit_text
        )
    
    msg = bot.send_message(user_id, "üí≥ P ü·¥á·¥Äs·¥á ·¥á…¥·¥õ·¥á Ä ·¥õ ú·¥á ·¥Ä·¥ç·¥è·¥ú…¥·¥õ  è·¥è·¥ú ·¥°·¥Ä…¥·¥õ ·¥õ·¥è ·¥Ö·¥á·¥ò·¥ès…™·¥õ (…™…¥ ‚Çπ):")
    bot.register_next_step_handler(msg, process_deposit_amount)

def process_deposit_amount(message):
    user_id = message.from_user.id
    
    try:
        amount = float(message.text)

        # Generate random 12-digit numeric UTR
        utr = str(random.randint(100000000000, 999999999999))

        # Save UTR + amount
        save_user_data(user_id, "deposit_utr", utr)
        save_user_data(user_id, "deposit_amount", amount)

        # Create UPI payment link
        upi_link = f"upi://pay?pa=paytm.s1m11be@pty&pn=Paytm&am={amount}&tn=Deposit&tr={utr}"

        # Generate QR using QuickChart API
        qr_api = f"https://quickchart.io/qr?text={urllib.parse.quote(upi_link)}&size=300"

        # Send QR with Paid ‚úÖ + Back üîô buttons
        keyboard = InlineKeyboardMarkup()
        keyboard.add(
            InlineKeyboardButton("ùó£ùóÆùó∂ùó± ‚úÖ", callback_data="check_txn"),
            InlineKeyboardButton("B·¥Ä·¥Ñ·¥ã üîô", callback_data="land")
        )

        sent = bot.send_photo(
            chat_id=user_id,
            photo=qr_api,
            caption=convert_to_styled(f"""
D·¥á·¥ò·¥ès…™·¥õ R·¥á«´·¥ú·¥ás·¥õ

A·¥ç·¥è·¥ú…¥·¥õ: ‚Çπ{amount}
UTR: `{utr}`

S·¥Ñ·¥Ä…¥ ·¥õ ú·¥á QR ·¥Ñ·¥è·¥Ö·¥á ·¥õ·¥è ·¥Ñ·¥è·¥ç·¥ò ü·¥á·¥õ·¥á ·¥ò·¥Ä è·¥ç·¥á…¥·¥õ
            """),
            reply_markup=keyboard,
            parse_mode='Markdown'
        )

        # Save QR message id for later deletion
        save_user_data(user_id, "deposit_qr_msg", sent.message_id)

    except Exception as e:
        bot.send_message(
            user_id,
            "‚ùå I…¥·¥†·¥Ä ü…™·¥Ö …™…¥·¥ò·¥ú·¥õ. P ü·¥á·¥Äs·¥á ·¥á…¥·¥õ·¥á Ä ·¥Ä ·¥†·¥Ä ü…™·¥Ö …¥·¥ú·¥ç ô·¥á Ä."
        )
        show_deposit_menu(user_id, message.message_id)

def check_transaction(call):
    user_id = call.from_user.id
    
    try:
        utr = get_user_data(user_id, "deposit_utr")
        amount = get_user_data(user_id, "deposit_amount")
        qr_msg_id = get_user_data(user_id, "deposit_qr_msg")

        if utr and amount:
            # Autodep API call
            url = f"https://erox-autodep-api.onrender.com/api?key={AUTODEP_API_KEY}&merchantkey={AUTODEP_MERCHANT_KEY}&transactionid={utr}"
            
            try:
                resp = requests.get(url, timeout=10).json()
                
                if resp.get("result", {}).get("STATUS") == "TXN_SUCCESS":
                    # Update balance in MongoDB
                    points = float(amount)
                    update_balance(user_id, points)
                    add_deposit(user_id, amount, utr)
                    update_deposit_status(utr, "C·¥è·¥ç·¥ò ü·¥á·¥õ·¥á·¥Ö")

                    # Delete QR scanner if exists
                    try:
                        if qr_msg_id:
                            bot.delete_message(chat_id=user_id, message_id=qr_msg_id)
                    except Exception as e:
                        pass

                    # Get updated balance
                    balance = get_balance(user_id)

                    # Notify user
                    success_msg = bot.send_message(
                        chat_id=user_id,
                        text=convert_to_styled(f"‚úÖ T Ä·¥Ä…¥s·¥Ä·¥Ñ·¥õ…™·¥è…¥ s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü! ‚Çπ{amount} ·¥Ä·¥Ö·¥Ö·¥á·¥Ö.\nN·¥á·¥° B·¥Ä ü·¥Ä…¥·¥Ñ·¥á: ‚Çπ{balance}")
                    )

                    # Notify admin
                    try:
                        bot.send_message(
                            chat_id=ADMIN_IDS[0],
                            text=convert_to_styled(f"‚úÖ SUCCESS\n\nUs·¥á Ä {user_id} ·¥Ö·¥á·¥ò·¥ès…™·¥õ·¥á·¥Ö ‚Çπ{amount}.\nN·¥á·¥° B·¥Ä ü·¥Ä…¥·¥Ñ·¥á: ‚Çπ{balance}")
                        )
                    except:
                        pass

                    # Clear deposit data
                    delete_user_data(user_id, "deposit_utr")
                    delete_user_data(user_id, "deposit_amount")
                    delete_user_data(user_id, "deposit_qr_msg")

                    # Show main menu after 2 seconds
                    time.sleep(2)
                    start_command(success_msg)

                else:
                    bot.answer_callback_query(
                        callback_query_id=call.id,
                        text="‚ùå Y·¥è·¥ú  ú·¥Ä·¥†·¥á …¥·¥è·¥õ ·¥Ö·¥á·¥ò·¥ès…™·¥õ·¥á·¥Ö  è·¥á·¥õ. P ü·¥á·¥Äs·¥á ·¥ò·¥Ä è “ì…™ Äs·¥õ.",
                        show_alert=True
                    )

            except Exception as api_error:
                bot.answer_callback_query(callback_query_id=call.id, text="‚ùå API ·¥á Ä Ä·¥è Ä ·¥è·¥Ñ·¥Ñ·¥ú Ä Ä·¥á·¥Ö.", show_alert=True)

        else:
            bot.answer_callback_query(callback_query_id=call.id, text="‚ö†Ô∏è N·¥è ·¥ò·¥á…¥·¥Ö…™…¥…¢ ·¥Ö·¥á·¥ò·¥ès…™·¥õ “ì·¥è·¥ú…¥·¥Ö.", show_alert=True)

    except Exception as e:
        bot.answer_callback_query(callback_query_id=call.id, text="‚ùå A…¥ ·¥á Ä Ä·¥è Ä ·¥è·¥Ñ·¥Ñ·¥ú Ä Ä·¥á·¥Ö.", show_alert=True)

def process_deposit_confirmation(call):
    """P Ä·¥è·¥Ñ·¥áss ·¥Ö·¥á·¥ò·¥ès…™·¥õ ·¥Ñ·¥è…¥“ì…™ Ä·¥ç·¥Ä·¥õ…™·¥è…¥"""
    user_id = call.from_user.id
    bot.answer_callback_query(call.id, "P ü·¥á·¥Äs·¥á ·¥ús·¥á ·¥õ ú·¥á 'P·¥Ä…™·¥Ö ‚úÖ'  ô·¥ú·¥õ·¥õ·¥è…¥ ·¥õ·¥è ·¥Ñ ú·¥á·¥Ñ·¥ã  è·¥è·¥ú Ä ·¥õ Ä·¥Ä…¥s·¥Ä·¥Ñ·¥õ…™·¥è…¥.")

# Order flow with land.py font style
def show_categories(user_id, message_id):
    try:
        bot.edit_message_media(
            chat_id=user_id,
            message_id=message_id,
            media=telebot.types.InputMediaPhoto(
                media=SERVICE_IMAGE,
                caption=convert_to_styled("S·¥á ü·¥á·¥Ñ·¥õ ·¥Ä C·¥Ä·¥õ·¥á…¢·¥è Ä è\n\nC ú·¥è·¥ès·¥á ·¥Ä ·¥Ñ·¥Ä·¥õ·¥á…¢·¥è Ä è ·¥õ·¥è ·¥†…™·¥á·¥° s·¥á Ä·¥†…™·¥Ñ·¥ás:")
            ),
            reply_markup=categories_keyboard(),
            parse_mode='Markdown'
        )
    except:
        bot.send_photo(
            chat_id=user_id,
            photo=SERVICE_IMAGE,
            caption=convert_to_styled("S·¥á ü·¥á·¥Ñ·¥õ ·¥Ä C·¥Ä·¥õ·¥á…¢·¥è Ä è\n\nC ú·¥è·¥ès·¥á ·¥Ä ·¥Ñ·¥Ä·¥õ·¥á…¢·¥è Ä è ·¥õ·¥è ·¥†…™·¥á·¥° s·¥á Ä·¥†…™·¥Ñ·¥ás:"),
            reply_markup=categories_keyboard(),
            parse_mode='Markdown'
        )

def show_services(user_id, message_id, category):
    if category not in SERVICES:
        bot.answer_callback_query(message_id, "‚ùå C·¥Ä·¥õ·¥á…¢·¥è Ä è …¥·¥è·¥õ “ì·¥è·¥ú…¥·¥Ö!", show_alert=True)
        return
        
    try:
        bot.edit_message_media(
            chat_id=user_id,
            message_id=message_id,
            media=telebot.types.InputMediaPhoto(
                media=SERVICE_IMAGE,
                caption=convert_to_styled(f"{category} S·¥á Ä·¥†…™·¥Ñ·¥ás\n\nS·¥á ü·¥á·¥Ñ·¥õ ·¥Ä s·¥á Ä·¥†…™·¥Ñ·¥á ·¥õ·¥è ·¥Ñ·¥è…¥·¥õ…™…¥·¥ú·¥á:")
            ),
            reply_markup=services_keyboard(category),
            parse_mode='Markdown'
        )
    except:
        bot.send_photo(
            chat_id=user_id,
            photo=SERVICE_IMAGE,
            caption=convert_to_styled(f"{category} S·¥á Ä·¥†…™·¥Ñ·¥ás\n\nS·¥á ü·¥á·¥Ñ·¥õ ·¥Ä s·¥á Ä·¥†…™·¥Ñ·¥á ·¥õ·¥è ·¥Ñ·¥è…¥·¥õ…™…¥·¥ú·¥á:"),
            reply_markup=services_keyboard(category),
            parse_mode='Markdown'
        )

def start_order_flow(user_id, message_id, category, service_name):
    if category not in SERVICES or service_name not in SERVICES[category]:
        bot.answer_callback_query(message_id, "‚ùå S·¥á Ä·¥†…™·¥Ñ·¥á …¥·¥è·¥õ “ì·¥è·¥ú…¥·¥Ö!", show_alert=True)
        return
        
    service = SERVICES[category][service_name]
    
    service_info = convert_to_styled(f"""
{service_name}

P Ä…™·¥Ñ·¥á: ‚Çπ{service['price']}/1000
M…™…¥…™·¥ç·¥ú·¥ç: {service['min']}
M·¥Äx…™·¥ç·¥ú·¥ç: {service['max']}

P ü·¥á·¥Äs·¥á s·¥á…¥·¥Ö ·¥õ ú·¥á  ü…™…¥·¥ã “ì·¥è Ä  è·¥è·¥ú Ä ·¥è Ä·¥Ö·¥á Ä:
    """)
    
    try:
        bot.edit_message_caption(
            chat_id=user_id,
            message_id=message_id,
            caption=service_info,
            reply_markup=None,
            parse_mode='Markdown'
        )
    except:
        bot.send_message(user_id, service_info, parse_mode='Markdown')
    
    # Store service info in session using MongoDB
    save_user_data(user_id, "order_category", category)
    save_user_data(user_id, "order_service_name", service_name)
    save_user_data(user_id, "order_service_data", json.dumps(service))
    
    msg = bot.send_message(user_id, "üîó P ü·¥á·¥Äs·¥á ·¥á…¥·¥õ·¥á Ä ·¥õ ú·¥á  ü…™…¥·¥ã:")
    bot.register_next_step_handler(msg, process_order_link)

def process_order_link(message):
    user_id = message.from_user.id
    link = message.text.strip()
    
    category = get_user_data(user_id, "order_category")
    service_name = get_user_data(user_id, "order_service_name")
    service_data = get_user_data(user_id, "order_service_data")
    
    if not all([category, service_name, service_data]):
        bot.send_message(user_id, "‚ùå S·¥áss…™·¥è…¥ ·¥áx·¥ò…™ Ä·¥á·¥Ö. P ü·¥á·¥Äs·¥á s·¥õ·¥Ä Ä·¥õ ·¥è·¥†·¥á Ä.")
        return
    
    service = json.loads(service_data)
    save_user_data(user_id, "order_link", link)
    
    bot.send_message(
        user_id,
        convert_to_styled(f"""
E…¥·¥õ·¥á Ä Q·¥ú·¥Ä…¥·¥õ…™·¥õ è

S·¥á Ä·¥†…™·¥Ñ·¥á: {service_name}
L…™…¥·¥ã: {link}

M…™…¥…™·¥ç·¥ú·¥ç: {service['min']}
M·¥Äx…™·¥ç·¥ú·¥ç: {service['max']}

P ü·¥á·¥Äs·¥á ·¥á…¥·¥õ·¥á Ä «´·¥ú·¥Ä…¥·¥õ…™·¥õ è:
        """),
        parse_mode='Markdown'
    )
    
    bot.register_next_step_handler(message, process_order_quantity)

def process_order_quantity(message):
    user_id = message.from_user.id
    
    category = get_user_data(user_id, "order_category")
    service_name = get_user_data(user_id, "order_service_name")
    service_data = get_user_data(user_id, "order_service_data")
    link = get_user_data(user_id, "order_link")
    
    if not all([category, service_name, service_data, link]):
        bot.send_message(user_id, "‚ùå S·¥áss…™·¥è…¥ ·¥áx·¥ò…™ Ä·¥á·¥Ö. P ü·¥á·¥Äs·¥á s·¥õ·¥Ä Ä·¥õ ·¥è·¥†·¥á Ä.")
        return
    
    try:
        quantity = int(message.text)
        service = json.loads(service_data)
        
        # Validate quantity
        if quantity < service['min'] or quantity > service['max']:
            bot.send_message(
                user_id,
                f"‚ùå Q·¥ú·¥Ä…¥·¥õ…™·¥õ è ·¥ç·¥ús·¥õ  ô·¥á  ô·¥á·¥õ·¥°·¥á·¥á…¥ {service['min']} ·¥Ä…¥·¥Ö {service['max']}. P ü·¥á·¥Äs·¥á ·¥õ Ä è ·¥Ä…¢·¥Ä…™…¥."
            )
            return
        
        # Calculate cost
        cost = (quantity / service['unit']) * service['price']
        
        # Check balance from MongoDB
        balance = get_balance(user_id)
        if balance < cost:
            bot.send_message(
                user_id,
                convert_to_styled(f"""
I…¥s·¥ú“ì“ì…™·¥Ñ…™·¥á…¥·¥õ B·¥Ä ü·¥Ä…¥·¥Ñ·¥á

R·¥á«´·¥ú…™ Ä·¥á·¥Ö: ‚Çπ{cost:.2f}
Y·¥è·¥ú Ä B·¥Ä ü·¥Ä…¥·¥Ñ·¥á: ‚Çπ{balance:.2f}

P ü·¥á·¥Äs·¥á ·¥Ö·¥á·¥ò·¥ès…™·¥õ “ì…™ Äs·¥õ.
                """)
            )
            return
        
        # Place order via SMM API
        try:
            # Actual SMM API call
            params = {
                "key": SMM_API_KEY,
                "action": "add",
                "service": service['id'],
                "link": link,
                "quantity": quantity
            }
            response = requests.get(SMM_API_URL, params=params, timeout=30)
            api_response = response.json()
            
            api_order_id = api_response.get("order", "UNKNOWN")
            
            # Deduct balance and save order in MongoDB
            update_balance(user_id, -cost)
            add_order(user_id, service_name, link, quantity, cost, api_order_id)
            
            # Get updated balance
            new_balance = get_balance(user_id)
            
            # Confirm to user
            confirmation_text = convert_to_styled(f"""
‚úÖ O Ä·¥Ö·¥á Ä P ü·¥Ä·¥Ñ·¥á·¥Ö S·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è!

S·¥á Ä·¥†…™·¥Ñ·¥á: {service_name}
L…™…¥·¥ã: {link}
Q·¥ú·¥Ä…¥·¥õ…™·¥õ è: {quantity}
C·¥ès·¥õ: ‚Çπ{cost:.2f}
O Ä·¥Ö·¥á Ä ID: {api_order_id}
B·¥Ä ü·¥Ä…¥·¥Ñ·¥á: ‚Çπ{new_balance:.2f}

Y·¥è·¥ú ·¥Ñ·¥Ä…¥ ·¥Ñ ú·¥á·¥Ñ·¥ã ·¥è Ä·¥Ö·¥á Ä s·¥õ·¥Ä·¥õ·¥ús …™…¥ O Ä·¥Ö·¥á Äs ·¥ç·¥á…¥·¥ú.
            """)
            
            bot.send_message(user_id, confirmation_text, parse_mode='Markdown')
            
            # Send to proof channel
            proof_text = convert_to_styled(f"""
üéâ N·¥á·¥° O Ä·¥Ö·¥á Ä P ü·¥Ä·¥Ñ·¥á·¥Ö!

Us·¥á Ä: @{message.from_user.username or user_id}
S·¥á Ä·¥†…™·¥Ñ·¥á: {service_name}
Q·¥ú·¥Ä…¥·¥õ…™·¥õ è: {quantity}
A·¥ç·¥è·¥ú…¥·¥õ: ‚Çπ{cost:.2f}
O Ä·¥Ö·¥á Ä ID: {api_order_id}

B·¥è·¥õ H·¥á Ä·¥á üà¥
            """)
            
            keyboard = InlineKeyboardMarkup()
            keyboard.add(InlineKeyboardButton("ü§ñ B·¥è·¥õ H·¥á Ä·¥á üà¥", url=BOT_LINK))
            
            try:
                bot.send_message(
                    PROOF_CHANNEL,
                    proof_text,
                    reply_markup=keyboard,
                    parse_mode='Markdown'
                )
            except:
                pass
            
            # Clear session data
            clear_all_user_data(user_id)
            
        except Exception as e:
            bot.send_message(user_id, f"‚ùå E Ä Ä·¥è Ä ·¥ò ü·¥Ä·¥Ñ…™…¥…¢ ·¥è Ä·¥Ö·¥á Ä: {str(e)}")
            
    except ValueError:
        bot.send_message(user_id, "‚ùå P ü·¥á·¥Äs·¥á ·¥á…¥·¥õ·¥á Ä ·¥Ä ·¥†·¥Ä ü…™·¥Ö …¥·¥ú·¥ç ô·¥á Ä.")

# Other user menus with land.py font style
def show_orders(user_id, message_id):
    orders = get_user_orders(user_id)
    
    if not orders:
        orders_text = convert_to_styled("N·¥è ·¥è Ä·¥Ö·¥á Äs “ì·¥è·¥ú…¥·¥Ö.\n\nY·¥è·¥ú  ú·¥Ä·¥†·¥á…¥'·¥õ ·¥ò ü·¥Ä·¥Ñ·¥á·¥Ö ·¥Ä…¥ è ·¥è Ä·¥Ö·¥á Äs  è·¥á·¥õ.")
    else:
        orders_text = convert_to_styled("Y·¥è·¥ú Ä L·¥Äs·¥õ 5 O Ä·¥Ö·¥á Äs\n\n")
        for order in orders[:5]:
            status_emoji = {
                'P·¥á…¥·¥Ö…™…¥…¢': '‚è≥',
                'I…¥ P Ä·¥è…¢ Ä·¥áss': 'üîÑ', 
                'C·¥è·¥ç·¥ò ü·¥á·¥õ·¥á·¥Ö': '‚úÖ',
                'C·¥Ä…¥·¥Ñ·¥á ü ü·¥á·¥Ö': '‚ùå'
            }.get(order.get("status", "P·¥á…¥·¥Ö…™…¥…¢"), '‚è≥')
            
            orders_text += convert_to_styled(f"""
{status_emoji} O Ä·¥Ö·¥á Ä
S·¥á Ä·¥†…™·¥Ñ·¥á: {order.get('service_name', 'N/A')}
L…™…¥·¥ã: {order.get('link', 'N/A')[:30]}...
Q·¥ú·¥Ä…¥·¥õ…™·¥õ è: {order.get('quantity', 0)}
C·¥ès·¥õ: ‚Çπ{order.get('cost', 0):.2f}
T…™·¥ç·¥á: {order.get('order_date', datetime.now()).strftime('%Y-%m-%d %H:%M')}
S·¥õ·¥Ä·¥õ·¥ús: {order.get('status', 'P·¥á…¥·¥Ö…™…¥…¢')}

""")
    
    try:
        bot.edit_message_media(
            chat_id=user_id,
            message_id=message_id,
            media=telebot.types.InputMediaPhoto(
                media=HISTORY_IMAGE,
                caption=orders_text
            ),
            reply_markup=InlineKeyboardMarkup().add(
                InlineKeyboardButton("üîô B·¥Ä·¥Ñ·¥ã", callback_data="land")
            ),
            parse_mode='Markdown'
        )
    except:
        bot.send_photo(
            chat_id=user_id,
            photo=HISTORY_IMAGE,
            caption=orders_text,
            reply_markup=InlineKeyboardMarkup().add(
                InlineKeyboardButton("üîô B·¥Ä·¥Ñ·¥ã", callback_data="land")
            ),
            parse_mode='Markdown'
        )

def show_refer(user_id, message_id):
    refer_link = f"https://t.me/share/url?url={BOT_LINK}&text=Join%20this%20awesome%20SMM%20bot!"
    bonus = 10
    
    refer_text = convert_to_styled(f"""
R·¥á“ì·¥á Ä Ä·¥Ä ü P Ä·¥è…¢ Ä·¥Ä·¥ç

Y·¥è·¥ú Ä R·¥á“ì·¥á Ä Ä·¥Ä ü L…™…¥·¥ã:
`{refer_link}`

R·¥á“ì·¥á Ä Ä·¥Ä ü B·¥è…¥·¥ús: ‚Çπ{bonus} ·¥ò·¥á Ä s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü  Ä·¥á“ì·¥á Ä Ä·¥Ä ü

H·¥è·¥° …™·¥õ ·¥°·¥è Ä·¥ãs:
1. S ú·¥Ä Ä·¥á  è·¥è·¥ú Ä  Ä·¥á“ì·¥á Ä Ä·¥Ä ü  ü…™…¥·¥ã
2. W ú·¥á…¥ s·¥è·¥ç·¥á·¥è…¥·¥á ·¥ä·¥è…™…¥s ·¥ús…™…¥…¢  è·¥è·¥ú Ä  ü…™…¥·¥ã
3. Y·¥è·¥ú …¢·¥á·¥õ ‚Çπ{bonus}  ô·¥è…¥·¥ús ·¥° ú·¥á…¥ ·¥õ ú·¥á è ·¥Ö·¥á·¥ò·¥ès…™·¥õ

S·¥õ·¥Ä Ä·¥õ  Ä·¥á“ì·¥á Ä Ä…™…¥…¢ ·¥Ä…¥·¥Ö ·¥á·¥Ä Ä…¥ ·¥ç·¥è Ä·¥á!
    """)
    
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("üì§ S ú·¥Ä Ä·¥á L…™…¥·¥ã", url=f"tg://msg_url?url={urllib.parse.quote(refer_link)}"))
    keyboard.add(InlineKeyboardButton("üîô B·¥Ä·¥Ñ·¥ã", callback_data="land"))
    
    try:
        bot.edit_message_media(
            chat_id=user_id,
            message_id=message_id,
            media=telebot.types.InputMediaPhoto(
                media=REFER_IMAGE,
                caption=refer_text
            ),
            reply_markup=keyboard,
            parse_mode='Markdown'
        )
    except:
        bot.send_photo(
            chat_id=user_id,
            photo=REFER_IMAGE,
            caption=refer_text,
            reply_markup=keyboard,
            parse_mode='Markdown'
        )

def show_account(user_id, message_id):
    user = get_user(user_id)
    if not user:
        create_user(user_id, f"Us·¥á Ä_{user_id}")
        user = get_user(user_id)
    
    account_text = convert_to_styled(f"""
A·¥Ñ·¥Ñ·¥è·¥ú…¥·¥õ I…¥“ì·¥è Ä·¥ç·¥Ä·¥õ…™·¥è…¥

Us·¥á Ä ID: `{user.get('user_id', 'N/A')}`
Us·¥á Ä…¥·¥Ä·¥ç·¥á: @{user.get('username', 'N/A') or 'N/A'}
B·¥Ä ü·¥Ä…¥·¥Ñ·¥á: ‚Çπ{user.get('balance', 0):.2f}
T·¥è·¥õ·¥Ä ü D·¥á·¥ò·¥ès…™·¥õs: ‚Çπ{user.get('total_deposits', 0):.2f}
T·¥è·¥õ·¥Ä ü S·¥ò·¥á…¥·¥õ: ‚Çπ{user.get('total_spent', 0):.2f}
M·¥á·¥ç ô·¥á Ä S…™…¥·¥Ñ·¥á: {user.get('joined_date', datetime.now()).strftime('%Y-%m-%d')}
    """)
    
    try:
        bot.edit_message_media(
            chat_id=user_id,
            message_id=message_id,
            media=telebot.types.InputMediaPhoto(
                media=ACCOUNT_IMAGE,
                caption=account_text
            ),
            reply_markup=InlineKeyboardMarkup().add(
                InlineKeyboardButton("üîô B·¥Ä·¥Ñ·¥ã", callback_data="land")
            ),
            parse_mode='Markdown'
        )
    except:
        bot.send_photo(
            chat_id=user_id,
            photo=ACCOUNT_IMAGE,
            caption=account_text,
            reply_markup=InlineKeyboardMarkup().add(
                InlineKeyboardButton("üîô B·¥Ä·¥Ñ·¥ã", callback_data="land")
            ),
            parse_mode='Markdown'
        )

def show_stats(user_id, message_id):
    total_users = get_all_users()
    total_orders = get_total_orders()
    total_deposits = get_total_deposits()
    total_spent = get_total_spent()
    
    stats_text = convert_to_styled(f"""
B·¥è·¥õ S·¥õ·¥Ä·¥õ…™s·¥õ…™·¥Ñs

T·¥è·¥õ·¥Ä ü Us·¥á Äs: {total_users}
T·¥è·¥õ·¥Ä ü O Ä·¥Ö·¥á Äs: {total_orders}
T·¥è·¥õ·¥Ä ü D·¥á·¥ò·¥ès…™·¥õs: ‚Çπ{total_deposits:.2f}
T·¥è·¥õ·¥Ä ü S·¥ò·¥á…¥·¥õ: ‚Çπ{total_spent:.2f}

A·¥Ñ·¥õ…™·¥†·¥á S·¥á Ä·¥†…™·¥Ñ·¥ás: {sum(len(services) for services in SERVICES.values())}
C·¥Ä·¥õ·¥á…¢·¥è Ä…™·¥ás: {len(SERVICES)}
    """)
    
    try:
        bot.edit_message_media(
            chat_id=user_id,
            message_id=message_id,
            media=telebot.types.InputMediaPhoto(
                media=HISTORY_IMAGE,
                caption=stats_text
            ),
            reply_markup=InlineKeyboardMarkup().add(
                InlineKeyboardButton("üîô B·¥Ä·¥Ñ·¥ã", callback_data="land")
            ),
            parse_mode='Markdown'
        )
    except:
        bot.send_photo(
            chat_id=user_id,
            photo=HISTORY_IMAGE,
            caption=stats_text,
            reply_markup=InlineKeyboardMarkup().add(
                InlineKeyboardButton("üîô B·¥Ä·¥Ñ·¥ã", callback_data="land")
            ),
            parse_mode='Markdown'
        )

def show_support(user_id, message_id):
    support_text = convert_to_styled(f"""
S·¥ú·¥ò·¥ò·¥è Ä·¥õ & H·¥á ü·¥ò

N·¥á·¥á·¥Ö  ú·¥á ü·¥ò? C·¥è…¥·¥õ·¥Ä·¥Ñ·¥õ ·¥è·¥ú Ä s·¥ú·¥ò·¥ò·¥è Ä·¥õ ·¥õ·¥á·¥Ä·¥ç:

S·¥ú·¥ò·¥ò·¥è Ä·¥õ: {SUPPORT_LINK}
B·¥è·¥õ: {BOT_LINK}

B·¥á“ì·¥è Ä·¥á ·¥Ñ·¥è…¥·¥õ·¥Ä·¥Ñ·¥õ…™…¥…¢ s·¥ú·¥ò·¥ò·¥è Ä·¥õ:
‚Ä¢ C ú·¥á·¥Ñ·¥ã  è·¥è·¥ú Ä ·¥è Ä·¥Ö·¥á Ä s·¥õ·¥Ä·¥õ·¥ús …™…¥ O Ä·¥Ö·¥á Äs
‚Ä¢ E…¥s·¥ú Ä·¥á  è·¥è·¥ú  ú·¥Ä·¥†·¥á s·¥ú“ì“ì…™·¥Ñ…™·¥á…¥·¥õ  ô·¥Ä ü·¥Ä…¥·¥Ñ·¥á
‚Ä¢ P Ä·¥è·¥†…™·¥Ö·¥á  è·¥è·¥ú Ä Us·¥á Ä ID …™“ì …¥·¥á·¥á·¥Ö·¥á·¥Ö

S·¥ú·¥ò·¥ò·¥è Ä·¥õ ·¥Ä·¥†·¥Ä…™ ü·¥Ä ô ü·¥á 24/7
    """)
    
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("üìû C·¥è…¥·¥õ·¥Ä·¥Ñ·¥õ S·¥ú·¥ò·¥ò·¥è Ä·¥õ", url=SUPPORT_LINK))
    keyboard.add(InlineKeyboardButton("üîô B·¥Ä·¥Ñ·¥ã", callback_data="land"))
    
    try:
        bot.edit_message_media(
            chat_id=user_id,
            message_id=message_id,
            media=telebot.types.InputMediaPhoto(
                media=WELCOME_IMAGE,
                caption=support_text
            ),
            reply_markup=keyboard,
            parse_mode='Markdown'
        )
    except:
        bot.send_photo(
            chat_id=user_id,
            photo=WELCOME_IMAGE,
            caption=support_text,
            reply_markup=keyboard,
            parse_mode='Markdown'
        )

def show_main_menu(call):
    """S ú·¥è·¥° ·¥ç·¥Ä…™…¥ ·¥ç·¥á…¥·¥ú"""
    user_id = call.message.chat.id
    user_name = call.message.chat.first_name
    
    text = convert_to_styled(f"""
H·¥á ü ü·¥è {user_name}!

W·¥á ü·¥Ñ·¥è·¥ç·¥á ·¥õ·¥è O·¥ú Ä B·¥è·¥õ M·¥Ä…™…¥ M·¥á…¥·¥ú

S·¥á ü·¥á·¥Ñ·¥õ ·¥Ä…¥ ·¥è·¥ò·¥õ…™·¥è…¥  ô·¥á ü·¥è·¥°:
    """)
    
    try:
        bot.edit_message_media(
            chat_id=user_id,
            message_id=call.message.message_id,
            media=telebot.types.InputMediaPhoto(WELCOME_IMAGE, text),
            reply_markup=main_menu_keyboard()
        )
    except:
        bot.send_photo(user_id, WELCOME_IMAGE, text, reply_markup=main_menu_keyboard())

# Admin functions with land.py font style
def show_admin_panel(user_id, message_id):
    admin_text = convert_to_styled(f"""
A·¥Ö·¥ç…™…¥ P·¥Ä…¥·¥á ü

W·¥á ü·¥Ñ·¥è·¥ç·¥á  ô·¥Ä·¥Ñ·¥ã, A·¥Ö·¥ç…™…¥!

C ú·¥è·¥ès·¥á ·¥Ä…¥ ·¥è·¥ò·¥õ…™·¥è…¥  ô·¥á ü·¥è·¥°:
    """)
    
    try:
        bot.edit_message_media(
            chat_id=user_id,
            message_id=message_id,
            media=telebot.types.InputMediaPhoto(
                media=ADMIN_IMAGE,
                caption=admin_text
            ),
            reply_markup=admin_keyboard(),
            parse_mode='Markdown'
        )
    except:
        bot.send_photo(
            chat_id=user_id,
            photo=ADMIN_IMAGE,
            caption=admin_text,
            reply_markup=admin_keyboard(),
            parse_mode='Markdown'
        )

def handle_admin_commands(call):
    user_id = call.from_user.id
    message_id = call.message.message_id
    
    if call.data == "admin_stats":
        total_users = get_all_users()
        total_orders = get_total_orders()
        total_deposits = get_total_deposits()
        total_spent = get_total_spent()
        
        stats_text = convert_to_styled(f"""
A·¥Ö·¥ç…™…¥ S·¥õ·¥Ä·¥õ…™s·¥õ…™·¥Ñs

T·¥è·¥õ·¥Ä ü Us·¥á Äs: {total_users}
T·¥è·¥õ·¥Ä ü O Ä·¥Ö·¥á Äs: {total_orders}
T·¥è·¥õ·¥Ä ü D·¥á·¥ò·¥ès…™·¥õs: ‚Çπ{total_deposits:.2f}
T·¥è·¥õ·¥Ä ü S·¥ò·¥á…¥·¥õ: ‚Çπ{total_spent:.2f}

A·¥Ñ·¥õ…™·¥†·¥á S·¥á Ä·¥†…™·¥Ñ·¥ás: {sum(len(services) for services in SERVICES.values())}
        """)
        
        bot.edit_message_caption(
            chat_id=user_id,
            message_id=message_id,
            caption=stats_text,
            reply_markup=admin_keyboard(),
            parse_mode='Markdown'
        )
    
    elif call.data == "admin_balance":
        bot.edit_message_caption(
            chat_id=user_id,
            message_id=message_id,
            caption=convert_to_styled("B·¥Ä ü·¥Ä…¥·¥Ñ·¥á C·¥è…¥·¥õ Ä·¥è ü\n\nS·¥á…¥·¥Ö ·¥ús·¥á Ä ID ·¥Ä…¥·¥Ö ·¥Ä·¥ç·¥è·¥ú…¥·¥õ …™…¥ “ì·¥è Ä·¥ç·¥Ä·¥õ:\n`·¥ús·¥á Ä_…™·¥Ö ·¥Ä·¥ç·¥è·¥ú…¥·¥õ`\n\nEx·¥Ä·¥ç·¥ò ü·¥á: `123456789 100`"),
            reply_markup=InlineKeyboardMarkup().add(
                InlineKeyboardButton("üîô B·¥Ä·¥Ñ·¥ã", callback_data="admin")
            ),
            parse_mode='Markdown'
        )
        msg = bot.send_message(user_id, "üë§ E…¥·¥õ·¥á Ä ·¥ús·¥á Ä ID ·¥Ä…¥·¥Ö ·¥Ä·¥ç·¥è·¥ú…¥·¥õ:")
        bot.register_next_step_handler(msg, process_balance_update)
    
    elif call.data == "admin_broadcast":
        bot.edit_message_caption(
            chat_id=user_id,
            message_id=message_id,
            caption=convert_to_styled("B Ä·¥è·¥Ä·¥Ö·¥Ñ·¥Äs·¥õ M·¥áss·¥Ä…¢·¥á\n\nS·¥á…¥·¥Ö ·¥õ ú·¥á ·¥ç·¥áss·¥Ä…¢·¥á  è·¥è·¥ú ·¥°·¥Ä…¥·¥õ ·¥õ·¥è  ô Ä·¥è·¥Ä·¥Ö·¥Ñ·¥Äs·¥õ:"),
            reply_markup=InlineKeyboardMarkup().add(
                InlineKeyboardButton("üîô B·¥Ä·¥Ñ·¥ã", callback_data="admin")
            ),
            parse_mode='Markdown'
        )
        msg = bot.send_message(user_id, "üí¨ E…¥·¥õ·¥á Ä  ô Ä·¥è·¥Ä·¥Ö·¥Ñ·¥Äs·¥õ ·¥ç·¥áss·¥Ä…¢·¥á:")
        bot.register_next_step_handler(msg, process_broadcast)
    
    elif call.data == "admin_users":
        show_user_control(user_id, message_id)

def process_balance_update(message):
    user_id = message.from_user.id
    
    try:
        parts = message.text.split()
        if len(parts) != 2:
            bot.send_message(user_id, "‚ùå I…¥·¥†·¥Ä ü…™·¥Ö “ì·¥è Ä·¥ç·¥Ä·¥õ. Us·¥á: `·¥ús·¥á Ä_…™·¥Ö ·¥Ä·¥ç·¥è·¥ú…¥·¥õ`")
            return
        
        target_user_id = int(parts[0])
        amount = float(parts[1])
        
        target_user = get_user(target_user_id)
        if not target_user:
            create_user(target_user_id, f"Us·¥á Ä_{target_user_id}")
        
        new_balance = update_balance(target_user_id, amount)
        
        bot.send_message(
            user_id,
            convert_to_styled(f"""
‚úÖ B·¥Ä ü·¥Ä…¥·¥Ñ·¥á ·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥á·¥Ö!

Us·¥á Ä: {target_user_id}
A·¥ç·¥è·¥ú…¥·¥õ: ‚Çπ{amount}
N·¥á·¥° B·¥Ä ü·¥Ä…¥·¥Ñ·¥á: ‚Çπ{new_balance}
            """)
        )
        
        # Notify user
        try:
            bot.send_message(
                target_user_id,
                convert_to_styled(f"""
üí∞ Y·¥è·¥ú Ä  ô·¥Ä ü·¥Ä…¥·¥Ñ·¥á  ú·¥Äs  ô·¥á·¥á…¥ ·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥á·¥Ö!

A·¥ç·¥è·¥ú…¥·¥õ: ‚Çπ{amount}
N·¥á·¥° B·¥Ä ü·¥Ä…¥·¥Ñ·¥á: ‚Çπ{new_balance}
                """)
            )
        except:
            pass
            
    except Exception as e:
        bot.send_message(user_id, f"‚ùå E Ä Ä·¥è Ä: {str(e)}")

def process_broadcast(message):
    admin_id = message.from_user.id
    broadcast_text = message.text
    
    users = users_collection.find({})
    total_users = 0
    success_count = 0
    
    progress_msg = bot.send_message(admin_id, "üì§ S·¥õ·¥Ä Ä·¥õ…™…¥…¢  ô Ä·¥è·¥Ä·¥Ö·¥Ñ·¥Äs·¥õ...")
    
    for user in users:
        try:
            bot.send_message(user["user_id"], convert_to_styled(f"üì¢ B Ä·¥è·¥Ä·¥Ö·¥Ñ·¥Äs·¥õ M·¥áss·¥Ä…¢·¥á\n\n{broadcast_text}"), parse_mode='Markdown')
            success_count += 1
            total_users += 1
            
            # Update progress every 10 users
            if total_users % 10 == 0:
                bot.edit_message_text(
                    convert_to_styled(f"üì§ B Ä·¥è·¥Ä·¥Ö·¥Ñ·¥Äs·¥õ…™…¥…¢...\n\nS·¥á…¥·¥õ: {success_count}/{users.count()}"),
                    admin_id,
                    progress_msg.message_id
                )
                
        except Exception as e:
            total_users += 1
            continue
    
    bot.edit_message_text(
        convert_to_styled(f"‚úÖ B Ä·¥è·¥Ä·¥Ö·¥Ñ·¥Äs·¥õ C·¥è·¥ç·¥ò ü·¥á·¥õ·¥á·¥Ö!\n\nS·¥ú·¥Ñ·¥Ñ·¥áss: {success_count}\nF·¥Ä…™ ü·¥á·¥Ö: {total_users - success_count}"),
        admin_id,
        progress_msg.message_id
    )

def show_user_control(user_id, message_id):
    total_users = get_all_users()
    
    user_control_text = convert_to_styled(f"""
Us·¥á Ä C·¥è…¥·¥õ Ä·¥è ü

T·¥è·¥õ·¥Ä ü Us·¥á Äs: {total_users}

S·¥á ü·¥á·¥Ñ·¥õ ·¥Ä…¥ ·¥Ä·¥Ñ·¥õ…™·¥è…¥:
    """)
    
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("üìã Us·¥á Ä L…™s·¥õ", callback_data="admin_user_list"),
        InlineKeyboardButton("üîç F…™…¥·¥Ö Us·¥á Ä", callback_data="admin_find_user"),
        InlineKeyboardButton("üîô B·¥Ä·¥Ñ·¥ã", callback_data="admin")
    )
    
    bot.edit_message_caption(
        chat_id=user_id,
        message_id=message_id,
        caption=user_control_text,
        reply_markup=keyboard,
        parse_mode='Markdown'
    )

# Error handler
@bot.message_handler(func=lambda message: True)
def handle_all_messages(message):
    if message.text.startswith('/'):
        bot.send_message(message.chat.id, "‚ùå U…¥·¥ã…¥·¥è·¥°…¥ ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö. Us·¥á /start ·¥õ·¥è  ô·¥á…¢…™…¥.")
    else:
        bot.send_message(message.chat.id, "ü§ñ P ü·¥á·¥Äs·¥á ·¥ús·¥á ·¥õ ú·¥á ·¥ç·¥á…¥·¥ú  ô·¥ú·¥õ·¥õ·¥è…¥s ·¥õ·¥è …¥·¥Ä·¥†…™…¢·¥Ä·¥õ·¥á.")

# Start polling
if __name__ == "__main__":
    print("ü§ñ B·¥è·¥õ s·¥õ·¥Ä Ä·¥õ·¥á·¥Ö s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è!")
    print(f"üìä T·¥è·¥õ·¥Ä ü ·¥ús·¥á Äs …™…¥ ·¥Ö·¥Ä·¥õ·¥Ä ô·¥Äs·¥á: {get_all_users()}")
    print(f"üì¶ T·¥è·¥õ·¥Ä ü ·¥è Ä·¥Ö·¥á Äs …™…¥ ·¥Ö·¥Ä·¥õ·¥Ä ô·¥Äs·¥á: {get_total_orders()}")
    
    while True:
        try:
            bot.polling(none_stop=True, interval=1, timeout=30)
        except Exception as e:
            print(f"‚ùå P·¥è ü ü…™…¥…¢ ·¥á Ä Ä·¥è Ä: {e}")
            time.sleep(5)
            print("üîÑ R·¥ás·¥õ·¥Ä Ä·¥õ…™…¥…¢  ô·¥è·¥õ...")
