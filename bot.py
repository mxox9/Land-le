import os
import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
import pymongo
from pymongo import MongoClient
import requests
import time
from datetime import datetime, timedelta
import random
import urllib.parse
import threading
from bson import ObjectId
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

# Configuration from environment variables
BOT_TOKEN = os.getenv('BOT_TOKEN', '8052955693:AAGoXnNg90jqvcC1X1fVo_qKV8Y0eHjDAZg')
MONGO_URI = os.getenv('MONGO_URI', 'mongodb+srv://saifulmolla79088179_db_user:17gNrX0pC3bPqVaG@cluster0.fusvqca.mongodb.net/test?retryWrites=true&w=majority&appName=Cluster0')
ADMIN_IDS = [int(x.strip()) for x in os.getenv('ADMIN_IDS', '6052975324').split(',')]
CHANNEL_ID = os.getenv('CHANNEL_ID', '@prooflelo1')
SMM_API_URL = os.getenv('SMM_API_URL', 'https://mysmmapi.com/api/v2?')
SMM_API_KEY = os.getenv('SMM_API_KEY', 'a9bbe2f7d1a748b62cf5d1e195d06a165e3cc36d')

# Use your existing deposit API credentials
AUTODEP_API_KEY = os.getenv('AUTODEP_API_KEY', 'LY81vEV7')
MERCHANT_KEY = os.getenv('MERCHANT_KEY', 'WYcmQI71591891985230')

# Initialize bot with better error handling
bot = telebot.TeleBot(BOT_TOKEN, threaded=True)

# MongoDB connection with improved error handling
try:
    client = MongoClient(MONGO_URI, serverSelectionTimeoutMS=5000)
    db = client.smm_bot
    users_collection = db.users
    services_collection = db.services
    orders_collection = db.orders
    deposits_collection = db.deposits
    admin_logs_collection = db.admin_logs
    processed_refunds_collection = db.processed_refunds
    config_collection = db.config
    settings_collection = db.settings
    # Test connection
    client.admin.command('ismaster')
    print("‚úÖ MongoDB connected successfully")
except Exception as e:
    print(f"‚ùå MongoDB connection error: {e}")
    exit(1)

# Initialize default config
if not config_collection.find_one({"_id": "bot_config"}):
    config_collection.insert_one({
        "_id": "bot_config",
        "accepting_orders": True,
        "maintenance_mode": False
    })

# Initialize settings
if not settings_collection.find_one({"_id": "bot_settings"}):
    settings_collection.insert_one({
        "_id": "bot_settings",
        "accepting_orders": True
    })

# User states for conversation flow
user_states = {}
admin_states = {}

# Image URLs
WELCOME_IMAGE = "https://t.me/prooflelo1/16"
SERVICE_IMAGE = "https://t.me/prooflelo1/16"
DEPOSIT_IMAGE = "https://t.me/prooflelo1/16"
ACCOUNT_IMAGE = "https://t.me/prooflelo1/16"
HISTORY_IMAGE = "https://t.me/prooflelo1/16"
REFER_IMAGE = "https://t.me/prooflelo1/16"
ADMIN_IMAGE = "https://t.me/prooflelo1/16"

# Helper Functions
def log_admin_action(admin_id, action, details):
    """Log admin actions to database"""
    admin_logs_collection.insert_one({
        "admin_id": admin_id,
        "action": action,
        "details": details,
        "timestamp": datetime.now()
    })

def is_admin(user_id):
    """Check if user is admin"""
    return user_id in ADMIN_IDS

def get_user_balance(user_id):
    """Get user balance in points"""
    user = users_collection.find_one({"user_id": user_id})
    if not user:
        # Create new user
        users_collection.insert_one({
            "user_id": user_id,
            "balance_points": 0,
            "total_deposits_points": 0,
            "total_spent_points": 0,
            "joined_at": datetime.now(),
            "banned": False
        })
        return 0
    return user.get("balance_points", 0)

def update_user_balance(user_id, points_change, is_deposit=False, is_spent=False):
    """Update user balance and related stats"""
    user = users_collection.find_one({"user_id": user_id})
    if not user:
        return 0
    
    update_data = {"$inc": {"balance_points": points_change}}
    
    if is_deposit:
        update_data["$inc"]["total_deposits_points"] = points_change
    elif is_spent:
        update_data["$inc"]["total_spent_points"] = points_change
    
    users_collection.update_one({"user_id": user_id}, update_data)
    return get_user_balance(user_id)

def check_channel_membership(user_id):
    """Check if user is member of required channel"""
    try:
        member = bot.get_chat_member(CHANNEL_ID, user_id)
        return member.status in ['member', 'administrator', 'creator']
    except Exception as e:
        print(f"Channel check error: {e}")
        return False

def get_services_by_category(category):
    """Get active services by category"""
    return list(services_collection.find({
        "category": category,
        "active": True
    }))

def get_service_by_id(service_id):
    """Get service by ID"""
    return services_collection.find_one({
        "_id": ObjectId(service_id)
    })

def create_order(user_id, service_id, link, quantity, cost_points):
    """Create new order"""
    service = get_service_by_id(service_id)
    if not service:
        return None
    
    order_id = f"ORD{random.randint(100000, 999999)}"
    order = {
        "order_id": order_id,
        "user_id": user_id,
        "service_id": service_id,
        "service_name": service["name"],
        "link": link,
        "quantity": quantity,
        "cost_points": cost_points,
        "status": "Pending",
        "created_at": datetime.now(),
        "last_check": datetime.now()
    }
    
    result = orders_collection.insert_one(order)
    return order

def get_user_orders(user_id, limit=5):
    """Get user's recent orders"""
    return list(orders_collection.find(
        {"user_id": user_id}
    ).sort("created_at", -1).limit(limit))

def get_order_by_id(order_id):
    """Get order by order ID"""
    return orders_collection.find_one({"order_id": order_id})

def is_bot_accepting_orders():
    """Check if bot is accepting orders"""
    settings = settings_collection.find_one({"_id": "bot_settings"})
    return settings.get("accepting_orders", True) if settings else True

def set_bot_accepting_orders(status):
    """Set bot accepting orders status"""
    settings_collection.update_one(
        {"_id": "bot_settings"},
        {"$set": {"accepting_orders": status}},
        upsert=True
    )

# Admin Keyboard Builders
def admin_main_keyboard():
    """Admin main menu keyboard"""
    markup = InlineKeyboardMarkup()
    markup.row_width = 2
    markup.add(
        InlineKeyboardButton("üì¶ Manage Services", callback_data="admin_manage_services"),
        InlineKeyboardButton("üí∞ Balance Control", callback_data="admin_balance_control")
    )
    markup.add(
        InlineKeyboardButton("üë• User Control", callback_data="admin_user_control"),
        InlineKeyboardButton("üì¢ Broadcast", callback_data="admin_broadcast")
    )
    markup.add(
        InlineKeyboardButton("‚öôÔ∏è Bot Control", callback_data="admin_bot_control"),
        InlineKeyboardButton("üìä Stats", callback_data="admin_stats")
    )
    markup.add(InlineKeyboardButton("üîô Main Menu", callback_data="main_menu"))
    return markup

def admin_services_keyboard():
    """Admin services management keyboard"""
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("‚ûï Add Service", callback_data="admin_add_service"))
    markup.add(InlineKeyboardButton("‚úèÔ∏è Edit Service", callback_data="admin_edit_service"))
    markup.add(InlineKeyboardButton("‚ùå Delete Service", callback_data="admin_delete_service"))
    markup.add(InlineKeyboardButton("üîô Admin Menu", callback_data="admin_menu"))
    return markup

def admin_balance_keyboard():
    """Admin balance control keyboard"""
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("‚ûï Add Balance", callback_data="admin_add_balance"))
    markup.add(InlineKeyboardButton("‚ûñ Deduct Balance", callback_data="admin_deduct_balance"))
    markup.add(InlineKeyboardButton("üîô Admin Menu", callback_data="admin_menu"))
    return markup

def admin_user_keyboard():
    """Admin user control keyboard"""
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("üö´ Ban User", callback_data="admin_ban_user"))
    markup.add(InlineKeyboardButton("‚úÖ Unban User", callback_data="admin_unban_user"))
    markup.add(InlineKeyboardButton("üîô Admin Menu", callback_data="admin_menu"))
    return markup

def admin_bot_control_keyboard():
    """Admin bot control keyboard"""
    bot_status = "üü¢ ON" if is_bot_accepting_orders() else "üî¥ OFF"
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("üü¢ Turn Bot ON", callback_data="admin_bot_on"))
    markup.add(InlineKeyboardButton("üî¥ Turn Bot OFF", callback_data="admin_bot_off"))
    markup.add(InlineKeyboardButton(f"üìä Current Status: {bot_status}", callback_data="admin_bot_status"))
    markup.add(InlineKeyboardButton("üîô Admin Menu", callback_data="admin_menu"))
    return markup

def service_categories_keyboard():
    """Service categories selection keyboard for admin"""
    markup = InlineKeyboardMarkup()
    categories = ["Instagram", "YouTube", "Telegram", "Facebook", "Other"]
    for category in categories:
        markup.add(InlineKeyboardButton(category, callback_data=f"admin_category_{category.lower()}"))
    markup.add(InlineKeyboardButton("üîô Back", callback_data="admin_manage_services"))
    return markup

def services_list_keyboard(category, action):
    """Services list for a category with action"""
    markup = InlineKeyboardMarkup()
    services = list(services_collection.find({"category": category.lower(), "active": True}))
    
    for service in services:
        service_name = service['name'][:30]  # Limit name length
        markup.add(InlineKeyboardButton(
            service_name, 
            callback_data=f"admin_{action}_{service['_id']}"
        ))
    
    markup.add(InlineKeyboardButton("üîô Back", callback_data=f"admin_{action}_back"))
    return markup

def confirm_delete_keyboard(service_id):
    """Confirmation keyboard for service deletion"""
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("‚úÖ Yes, Delete", callback_data=f"admin_confirm_delete_{service_id}"))
    markup.add(InlineKeyboardButton("‚ùå Cancel", callback_data="admin_manage_services"))
    return markup

# Main Menu Keyboard Builders
def main_menu_keyboard():
    """Main menu inline keyboard"""
    markup = InlineKeyboardMarkup()
    markup.row_width = 2
    markup.add(
        InlineKeyboardButton("üí∞ D·¥á·¥ò·¥ès…™·¥õ", callback_data="deposit"),
        InlineKeyboardButton("üõí O Ä·¥Ö·¥á Ä", callback_data="order_menu")
    )
    markup.add(
        InlineKeyboardButton("üìã O Ä·¥Ö·¥á Äs", callback_data="history"),
        InlineKeyboardButton("üë• R·¥á“ì·¥á Ä", callback_data="refer")
    )
    markup.add(
        InlineKeyboardButton("üë§ A·¥Ñ·¥Ñ·¥è·¥ú…¥·¥õ", callback_data="account"),
        InlineKeyboardButton("üìä S·¥õ·¥Ä·¥õs", callback_data="stats")
    )
    markup.add(InlineKeyboardButton("‚ÑπÔ∏è S·¥ú·¥ò·¥ò·¥è Ä·¥õ", callback_data="support"))
    
    # Persistent buttons
    markup.add(
        InlineKeyboardButton("üì∫ How To Use", url="https://t.me/prooflelo1/26"),
        InlineKeyboardButton("üîÑ Restart", callback_data="restart")
    )
    
    return markup

def service_category_keyboard():
    """Service category selection keyboard"""
    markup = InlineKeyboardMarkup()
    
    # Get unique categories from services
    categories = services_collection.distinct("category", {"active": True})
    
    for category in categories:
        emoji = "üì±" if category == "instagram" else "üé•" if category == "youtube" else "üì¢"
        markup.add(InlineKeyboardButton(
            f"{emoji} {category.title()}", 
            callback_data=f"category_{category}"
        ))
    
    markup.add(InlineKeyboardButton("üîô Back", callback_data="main_menu"))
    return markup

def services_keyboard(category):
    """Services list for a category"""
    markup = InlineKeyboardMarkup()
    services = get_services_by_category(category)
    
    for service in services:
        price = service["price_per_unit"]
        unit = service["unit"]
        button_text = f"{service['name']} - {price} Points/{unit}"
        markup.add(InlineKeyboardButton(
            button_text, 
            callback_data=f"service_{service['_id']}"
        ))
    
    markup.add(InlineKeyboardButton("üîô Back", callback_data="order_menu"))
    return markup

def channel_join_keyboard():
    """Channel join requirement keyboard"""
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("‚úÖ Join Channel", url=f"https://t.me/{CHANNEL_ID.replace('@', '')}"))
    markup.add(InlineKeyboardButton("üîÑ Check Join", callback_data="check_join"))
    return markup

def support_keyboard():
    """Support options keyboard"""
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("üìû Contact Us", url="https://wa.me/639941532149"))
    markup.add(InlineKeyboardButton("üîô Back", callback_data="main_menu"))
    return markup

def track_order_keyboard():
    """Track order keyboard"""
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("üì¶ Track Order", callback_data="track_order"))
    markup.add(InlineKeyboardButton("üîô Back", callback_data="main_menu"))
    return markup

# Admin Message Handlers
@bot.message_handler(commands=['admin'])
def admin_panel(message):
    """Admin panel command"""
    user_id = message.chat.id
    
    if not is_admin(user_id):
        bot.reply_to(message, "üö´ Y·¥è·¥ú ·¥Ä Ä·¥á …¥·¥è·¥õ ·¥Ä·¥ú·¥õ ú·¥è Ä…™·¥¢·¥á·¥Ö.")
        return
    
    total_users = users_collection.count_documents({})
    total_orders = orders_collection.count_documents({})
    total_deposits = sum(user.get('total_deposits_points', 0) for user in users_collection.find()) / 100
    bot_status = "üü¢ ON" if is_bot_accepting_orders() else "üî¥ OFF"
    
    text = f"""
üëë A·¥Ö·¥ç…™…¥ P·¥Ä…¥·¥á ü

üë• Us·¥á Äs: {total_users}
üõí O Ä·¥Ö·¥á Äs: {total_orders}
üí∞ T·¥è·¥õ·¥Ä ü ·¥Ö·¥á·¥ò·¥ès…™·¥õs: ‚Çπ{total_deposits:.2f}
‚öôÔ∏è B·¥è·¥õ S·¥õ·¥Ä·¥õ·¥ús: {bot_status}

C ú·¥è·¥ès·¥á ·¥Ä…¥ ·¥è·¥ò·¥õ…™·¥è…¥:
    """
    
    bot.send_photo(user_id, ADMIN_IMAGE, text, reply_markup=admin_main_keyboard())

@bot.callback_query_handler(func=lambda call: call.data.startswith('admin_'))
def handle_admin_callbacks(call):
    """Handle admin callback queries"""
    user_id = call.message.chat.id
    
    if not is_admin(user_id):
        bot.answer_callback_query(call.id, "üö´ Y·¥è·¥ú ·¥Ä Ä·¥á …¥·¥è·¥õ ·¥Ä·¥ú·¥õ ú·¥è Ä…™·¥¢·¥á·¥Ö.", show_alert=True)
        return
    
    try:
        if call.data == "admin_menu":
            show_admin_menu(call)
        
        elif call.data == "admin_manage_services":
            show_admin_services_menu(call)
        
        elif call.data == "admin_balance_control":
            show_admin_balance_menu(call)
        
        elif call.data == "admin_user_control":
            show_admin_user_menu(call)
        
        elif call.data == "admin_broadcast":
            start_admin_broadcast(call)
        
        elif call.data == "admin_bot_control":
            show_admin_bot_control(call)
        
        elif call.data == "admin_stats":
            show_admin_stats(call)
        
        elif call.data == "admin_add_service":
            start_add_service(call)
        
        elif call.data == "admin_edit_service":
            show_service_categories(call, "edit")
        
        elif call.data == "admin_delete_service":
            show_service_categories(call, "delete")
        
        elif call.data.startswith("admin_category_"):
            category = call.data.replace("admin_category_", "")
            action = admin_states.get(user_id, {}).get("action")
            if action == "edit":
                show_services_for_edit(call, category)
            elif action == "delete":
                show_services_for_delete(call, category)
        
        elif call.data.startswith("admin_edit_"):
            service_id = call.data.replace("admin_edit_", "")
            start_edit_service(call, service_id)
        
        elif call.data.startswith("admin_delete_"):
            service_id = call.data.replace("admin_delete_", "")
            confirm_delete_service(call, service_id)
        
        elif call.data.startswith("admin_confirm_delete_"):
            service_id = call.data.replace("admin_confirm_delete_", "")
            delete_service(call, service_id)
        
        elif call.data == "admin_add_balance":
            start_add_balance(call)
        
        elif call.data == "admin_deduct_balance":
            start_deduct_balance(call)
        
        elif call.data == "admin_ban_user":
            start_ban_user(call)
        
        elif call.data == "admin_unban_user":
            start_unban_user(call)
        
        elif call.data == "admin_bot_on":
            set_bot_status(call, True)
        
        elif call.data == "admin_bot_off":
            set_bot_status(call, False)
        
        elif call.data == "admin_bot_status":
            show_bot_status(call)
        
        elif call.data.endswith("_back"):
            handle_admin_back(call)
        
        elif call.data.startswith('admin_confirm_'):
            handle_admin_confirmations(call)
            
    except Exception as e:
        print(f"Admin callback error: {e}")
        bot.answer_callback_query(call.id, "‚ùå A…¥ ·¥á Ä Ä·¥è Ä ·¥è·¥Ñ·¥Ñ·¥ú Ä Ä·¥á·¥Ö!")

# Admin Service Management Functions
def start_add_service(call):
    """Start add service process"""
    user_id = call.message.chat.id
    admin_states[user_id] = {"action": "adding_service", "step": "category"}
    
    try:
        bot.delete_message(user_id, call.message.message_id)
    except:
        pass
    
    text = "üì¶ A·¥Ö·¥Ö N·¥á·¥° S·¥á Ä·¥†…™·¥Ñ·¥á\n\nS·¥á ü·¥á·¥Ñ·¥õ ·¥Ñ·¥Ä·¥õ·¥á…¢·¥è Ä è:"
    bot.send_message(user_id, text, reply_markup=service_categories_keyboard())

def process_add_service_category(message):
    """Process service category selection"""
    user_id = message.chat.id
    
    if user_id not in admin_states or admin_states[user_id].get("action") != "adding_service":
        return
    
    category = message.text.strip()
    admin_states[user_id]["category"] = category
    admin_states[user_id]["step"] = "name"
    
    bot.send_message(user_id, "üìù E…¥·¥õ·¥á Ä s·¥á Ä·¥†…™·¥Ñ·¥á …¥·¥Ä·¥ç·¥á:")

def process_add_service_name(message):
    """Process service name"""
    user_id = message.chat.id
    
    if user_id not in admin_states or admin_states[user_id].get("action") != "adding_service":
        return
    
    admin_states[user_id]["name"] = message.text.strip()
    admin_states[user_id]["step"] = "description"
    
    bot.send_message(user_id, "üìÑ E…¥·¥õ·¥á Ä s·¥á Ä·¥†…™·¥Ñ·¥á ·¥Ö·¥ás·¥Ñ Ä…™·¥ò·¥õ…™·¥è…¥:")

def process_add_service_description(message):
    """Process service description"""
    user_id = message.chat.id
    
    if user_id not in admin_states or admin_states[user_id].get("action") != "adding_service":
        return
    
    admin_states[user_id]["description"] = message.text.strip()
    admin_states[user_id]["step"] = "min_quantity"
    
    bot.send_message(user_id, "üî¢ E…¥·¥õ·¥á Ä ·¥ç…™…¥…™·¥ç·¥ú·¥ç «´·¥ú·¥Ä…¥·¥õ…™·¥õ è:")

def process_add_service_min_quantity(message):
    """Process minimum quantity"""
    user_id = message.chat.id
    
    if user_id not in admin_states or admin_states[user_id].get("action") != "adding_service":
        return
    
    try:
        min_quantity = int(message.text.strip())
        admin_states[user_id]["min_quantity"] = min_quantity
        admin_states[user_id]["step"] = "max_quantity"
        
        bot.send_message(user_id, "üî¢ E…¥·¥õ·¥á Ä ·¥ç·¥Äx…™·¥ç·¥ú·¥ç «´·¥ú·¥Ä…¥·¥õ…™·¥õ è:")
    except ValueError:
        bot.send_message(user_id, "‚ùå I…¥·¥†·¥Ä ü…™·¥Ö «´·¥ú·¥Ä…¥·¥õ…™·¥õ è! Us·¥á …¥·¥ú·¥ç ô·¥á Äs ·¥è…¥ ü è.")

def process_add_service_max_quantity(message):
    """Process maximum quantity"""
    user_id = message.chat.id
    
    if user_id not in admin_states or admin_states[user_id].get("action") != "adding_service":
        return
    
    try:
        max_quantity = int(message.text.strip())
        admin_states[user_id]["max_quantity"] = max_quantity
        admin_states[user_id]["step"] = "unit"
        
        bot.send_message(user_id, "üìè E…¥·¥õ·¥á Ä ·¥ú…¥…™·¥õ (100 ·¥è Ä 1000):")
    except ValueError:
        bot.send_message(user_id, "‚ùå I…¥·¥†·¥Ä ü…™·¥Ö «´·¥ú·¥Ä…¥·¥õ…™·¥õ è! Us·¥á …¥·¥ú·¥ç ô·¥á Äs ·¥è…¥ ü è.")

def process_add_service_unit(message):
    """Process service unit"""
    user_id = message.chat.id
    
    if user_id not in admin_states or admin_states[user_id].get("action") != "adding_service":
        return
    
    try:
        unit = int(message.text.strip())
        if unit not in [100, 1000]:
            bot.send_message(user_id, "‚ùå U…¥…™·¥õ ·¥ç·¥ús·¥õ  ô·¥á 100 ·¥è Ä 1000!")
            return
        
        admin_states[user_id]["unit"] = unit
        admin_states[user_id]["step"] = "price"
        
        bot.send_message(user_id, "üí∞ E…¥·¥õ·¥á Ä ·¥ò Ä…™·¥Ñ·¥á ·¥ò·¥á Ä ·¥ú…¥…™·¥õ (·¥ò·¥è…™…¥·¥õs):")
    except ValueError:
        bot.send_message(user_id, "‚ùå I…¥·¥†·¥Ä ü…™·¥Ö ·¥ú…¥…™·¥õ! Us·¥á …¥·¥ú·¥ç ô·¥á Äs ·¥è…¥ ü è.")

def process_add_service_price(message):
    """Process service price"""
    user_id = message.chat.id
    
    if user_id not in admin_states or admin_states[user_id].get("action") != "adding_service":
        return
    
    try:
        price = int(message.text.strip())
        admin_states[user_id]["price"] = price
        admin_states[user_id]["step"] = "service_id"
        
        bot.send_message(user_id, "üÜî E…¥·¥õ·¥á Ä s·¥á Ä·¥†…™·¥Ñ·¥á ID (API s·¥á Ä·¥†…™·¥Ñ·¥á …™·¥Ö):")
    except ValueError:
        bot.send_message(user_id, "‚ùå I…¥·¥†·¥Ä ü…™·¥Ö ·¥ò Ä…™·¥Ñ·¥á! Us·¥á …¥·¥ú·¥ç ô·¥á Äs ·¥è…¥ ü è.")

def process_add_service_id(message):
    """Process service ID and save service"""
    user_id = message.chat.id
    
    if user_id not in admin_states or admin_states[user_id].get("action") != "adding_service":
        return
    
    service_id = message.text.strip()
    data = admin_states[user_id]
    
    # Save service to database
    service_data = {
        "category": data["category"].lower(),
        "name": data["name"],
        "description": data["description"],
        "min": data["min_quantity"],
        "max": data["max_quantity"],
        "unit": data["unit"],
        "price_per_unit": data["price"],
        "service_id": service_id,
        "active": True,
        "created_at": datetime.now()
    }
    
    services_collection.insert_one(service_data)
    
    # Clear state
    del admin_states[user_id]
    
    # Send confirmation
    text = f"""
‚úÖ S·¥á Ä·¥†…™·¥Ñ·¥á A·¥Ö·¥Ö·¥á·¥Ö S·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è!

üì¶ C·¥Ä·¥õ·¥á…¢·¥è Ä è: {data['category']}
üìù N·¥Ä·¥ç·¥á: {data['name']}
üìÑ D·¥ás·¥Ñ Ä…™·¥ò·¥õ…™·¥è…¥: {data['description']}
üî¢ Q·¥ú·¥Ä…¥·¥õ…™·¥õ è: {data['min_quantity']}-{data['max_quantity']}
üìè U…¥…™·¥õ: {data['unit']}
üí∞ P Ä…™·¥Ñ·¥á: {data['price']} ·¥ò·¥è…™…¥·¥õs/·¥ú…¥…™·¥õ
üÜî S·¥á Ä·¥†…™·¥Ñ·¥á ID: {service_id}
    """
    
    bot.send_message(user_id, text, reply_markup=admin_main_keyboard())
    log_admin_action(user_id, "add_service", f"Service: {data['name']}")

def show_service_categories(call, action):
    """Show service categories for edit/delete"""
    user_id = call.message.chat.id
    admin_states[user_id] = {"action": action}
    
    try:
        bot.edit_message_text(
            chat_id=user_id,
            message_id=call.message.message_id,
            text="üì¶ S·¥á ü·¥á·¥Ñ·¥õ s·¥á Ä·¥†…™·¥Ñ·¥á ·¥Ñ·¥Ä·¥õ·¥á…¢·¥è Ä è:",
            reply_markup=service_categories_keyboard()
        )
    except:
        bot.send_message(user_id, "üì¶ S·¥á ü·¥á·¥Ñ·¥õ s·¥á Ä·¥†…™·¥Ñ·¥á ·¥Ñ·¥Ä·¥õ·¥á…¢·¥è Ä è:", reply_markup=service_categories_keyboard())

def show_services_for_edit(call, category):
    """Show services for editing"""
    user_id = call.message.chat.id
    
    try:
        bot.edit_message_text(
            chat_id=user_id,
            message_id=call.message.message_id,
            text=f"‚úèÔ∏è S·¥á ü·¥á·¥Ñ·¥õ s·¥á Ä·¥†…™·¥Ñ·¥á ·¥õ·¥è ·¥á·¥Ö…™·¥õ ({category.title()}):",
            reply_markup=services_list_keyboard(category, "edit")
        )
    except:
        bot.send_message(user_id, f"‚úèÔ∏è S·¥á ü·¥á·¥Ñ·¥õ s·¥á Ä·¥†…™·¥Ñ·¥á ·¥õ·¥è ·¥á·¥Ö…™·¥õ ({category.title()}):", 
                        reply_markup=services_list_keyboard(category, "edit"))

def show_services_for_delete(call, category):
    """Show services for deletion"""
    user_id = call.message.chat.id
    
    try:
        bot.edit_message_text(
            chat_id=user_id,
            message_id=call.message.message_id,
            text=f"‚ùå S·¥á ü·¥á·¥Ñ·¥õ s·¥á Ä·¥†…™·¥Ñ·¥á ·¥õ·¥è ·¥Ö·¥á ü·¥á·¥õ·¥á ({category.title()}):",
            reply_markup=services_list_keyboard(category, "delete")
        )
    except:
        bot.send_message(user_id, f"‚ùå S·¥á ü·¥á·¥Ñ·¥õ s·¥á Ä·¥†…™·¥Ñ·¥á ·¥õ·¥è ·¥Ö·¥á ü·¥á·¥õ·¥á ({category.title()}):", 
                        reply_markup=services_list_keyboard(category, "delete"))

def start_edit_service(call, service_id):
    """Start editing a service"""
    user_id = call.message.chat.id
    service = services_collection.find_one({"_id": ObjectId(service_id)})
    
    if not service:
        bot.answer_callback_query(call.id, "‚ùå S·¥á Ä·¥†…™·¥Ñ·¥á …¥·¥è·¥õ “ì·¥è·¥ú…¥·¥Ö!")
        return
    
    admin_states[user_id] = {
        "action": "editing_service",
        "service_id": service_id,
        "service": service,
        "step": "field"
    }
    
    text = f"""
‚úèÔ∏è E·¥Ö…™·¥õ S·¥á Ä·¥†…™·¥Ñ·¥á: {service['name']}

S·¥á ü·¥á·¥Ñ·¥õ “ì…™·¥á ü·¥Ö ·¥õ·¥è ·¥á·¥Ö…™·¥õ:
1. üìù N·¥Ä·¥ç·¥á
2. üìÑ D·¥ás·¥Ñ Ä…™·¥ò·¥õ…™·¥è…¥  
3. üî¢ M…™…¥ Q·¥ú·¥Ä…¥·¥õ…™·¥õ è
4. üî¢ M·¥Äx Q·¥ú·¥Ä…¥·¥õ…™·¥õ è
5. üìè U…¥…™·¥õ
6. üí∞ P Ä…™·¥Ñ·¥á
7. üÜî S·¥á Ä·¥†…™·¥Ñ·¥á ID

R·¥á·¥ò ü è ·¥°…™·¥õ ú ·¥õ ú·¥á …¥·¥ú·¥ç ô·¥á Ä (1-7):
    """
    
    try:
        bot.edit_message_text(
            chat_id=user_id,
            message_id=call.message.message_id,
            text=text
        )
    except:
        bot.send_message(user_id, text)
    
    bot.register_next_step_handler(call.message, process_edit_service_field)

def process_edit_service_field(message):
    """Process which field to edit"""
    user_id = message.chat.id
    
    if user_id not in admin_states or admin_states[user_id].get("action") != "editing_service":
        return
    
    try:
        field_num = int(message.text.strip())
        field_map = {
            1: "name", 2: "description", 3: "min", 
            4: "max", 5: "unit", 6: "price_per_unit", 7: "service_id"
        }
        
        if field_num not in field_map:
            bot.send_message(user_id, "‚ùå I…¥·¥†·¥Ä ü…™·¥Ö “ì…™·¥á ü·¥Ö …¥·¥ú·¥ç ô·¥á Ä! Us·¥á 1-7.")
            return
        
        admin_states[user_id]["edit_field"] = field_map[field_num]
        admin_states[user_id]["step"] = "new_value"
        
        field_names = {
            "name": "…¥·¥Ä·¥ç·¥á", "description": "·¥Ö·¥ás·¥Ñ Ä…™·¥ò·¥õ…™·¥è…¥", 
            "min": "·¥ç…™…¥…™·¥ç·¥ú·¥ç «´·¥ú·¥Ä…¥·¥õ…™·¥õ è", "max": "·¥ç·¥Äx…™·¥ç·¥ú·¥ç «´·¥ú·¥Ä…¥·¥õ…™·¥õ è",
            "unit": "·¥ú…¥…™·¥õ", "price_per_unit": "·¥ò Ä…™·¥Ñ·¥á ·¥ò·¥á Ä ·¥ú…¥…™·¥õ", 
            "service_id": "s·¥á Ä·¥†…™·¥Ñ·¥á ID"
        }
        
        bot.send_message(user_id, f"üìù E…¥·¥õ·¥á Ä …¥·¥á·¥° {field_names[field_map[field_num]]}:")
        
    except ValueError:
        bot.send_message(user_id, "‚ùå I…¥·¥†·¥Ä ü…™·¥Ö …™…¥·¥ò·¥ú·¥õ! Us·¥á …¥·¥ú·¥ç ô·¥á Äs 1-7.")

def process_edit_service_value(message):
    """Process new value for service field"""
    user_id = message.chat.id
    
    if user_id not in admin_states or admin_states[user_id].get("action") != "editing_service":
        return
    
    data = admin_states[user_id]
    new_value = message.text.strip()
    field = data["edit_field"]
    
    # Validate numeric fields
    if field in ["min", "max", "unit", "price_per_unit"]:
        try:
            new_value = int(new_value)
        except ValueError:
            bot.send_message(user_id, "‚ùå I…¥·¥†·¥Ä ü…™·¥Ö …¥·¥ú·¥ç·¥á Ä…™·¥Ñ ·¥†·¥Ä ü·¥ú·¥á!")
            return
    
    # Update service in database
    services_collection.update_one(
        {"_id": ObjectId(data["service_id"])},
        {"$set": {field: new_value}}
    )
    
    # Clear state
    del admin_states[user_id]
    
    bot.send_message(user_id, f"‚úÖ S·¥á Ä·¥†…™·¥Ñ·¥á {field} ·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥á·¥Ö s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è!", 
                    reply_markup=admin_main_keyboard())
    
    log_admin_action(user_id, "edit_service", f"Service ID: {data['service_id']}, Field: {field}")

def confirm_delete_service(call, service_id):
    """Confirm service deletion"""
    user_id = call.message.chat.id
    service = services_collection.find_one({"_id": ObjectId(service_id)})
    
    if not service:
        bot.answer_callback_query(call.id, "‚ùå S·¥á Ä·¥†…™·¥Ñ·¥á …¥·¥è·¥õ “ì·¥è·¥ú…¥·¥Ö!")
        return
    
    text = f"""
‚ùå C·¥è…¥“ì…™ Ä·¥ç D·¥á ü·¥á·¥õ…™·¥è…¥

A Ä·¥á  è·¥è·¥ú s·¥ú Ä·¥á  è·¥è·¥ú ·¥°·¥Ä…¥·¥õ ·¥õ·¥è ·¥Ö·¥á ü·¥á·¥õ·¥á ·¥õ ú…™s s·¥á Ä·¥†…™·¥Ñ·¥á?

üì¶ S·¥á Ä·¥†…™·¥Ñ·¥á: {service['name']}
üìù C·¥Ä·¥õ·¥á…¢·¥è Ä è: {service['category']}
üí∞ P Ä…™·¥Ñ·¥á: {service['price_per_unit']} ·¥ò·¥è…™…¥·¥õs

T ú…™s ·¥Ä·¥Ñ·¥õ…™·¥è…¥ ·¥Ñ·¥Ä…¥…¥·¥è·¥õ  ô·¥á ·¥ú…¥·¥Ö·¥è…¥·¥á!
    """
    
    try:
        bot.edit_message_text(
            chat_id=user_id,
            message_id=call.message.message_id,
            text=text,
            reply_markup=confirm_delete_keyboard(service_id)
        )
    except:
        bot.send_message(user_id, text, reply_markup=confirm_delete_keyboard(service_id))

def delete_service(call, service_id):
    """Delete service from database"""
    user_id = call.message.chat.id
    service = services_collection.find_one({"_id": ObjectId(service_id)})
    
    if not service:
        bot.answer_callback_query(call.id, "‚ùå S·¥á Ä·¥†…™·¥Ñ·¥á …¥·¥è·¥õ “ì·¥è·¥ú…¥·¥Ö!")
        return
    
    service_name = service['name']
    services_collection.delete_one({"_id": ObjectId(service_id)})
    
    text = f"‚úÖ S·¥á Ä·¥†…™·¥Ñ·¥á '{service_name}' ·¥Ö·¥á ü·¥á·¥õ·¥á·¥Ö s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è!"
    
    try:
        bot.edit_message_text(
            chat_id=user_id,
            message_id=call.message.message_id,
            text=text,
            reply_markup=admin_main_keyboard()
        )
    except:
        bot.send_message(user_id, text, reply_markup=admin_main_keyboard())
    
    log_admin_action(user_id, "delete_service", f"Service: {service_name}")

def show_admin_services_menu(call):
    """Show admin services management menu"""
    user_id = call.message.chat.id
    
    try:
        bot.edit_message_text(
            chat_id=user_id,
            message_id=call.message.message_id,
            text="üì¶ S·¥á Ä·¥†…™·¥Ñ·¥ás M·¥Ä…¥·¥Ä…¢·¥á·¥ç·¥á…¥·¥õ\n\nS·¥á ü·¥á·¥Ñ·¥õ ·¥Ä…¥ ·¥è·¥ò·¥õ…™·¥è…¥:",
            reply_markup=admin_services_keyboard()
        )
    except:
        bot.send_message(user_id, "üì¶ S·¥á Ä·¥†…™·¥Ñ·¥ás M·¥Ä…¥·¥Ä…¢·¥á·¥ç·¥á…¥·¥õ\n\nS·¥á ü·¥á·¥Ñ·¥õ ·¥Ä…¥ ·¥è·¥ò·¥õ…™·¥è…¥:", 
                        reply_markup=admin_services_keyboard())

def show_admin_balance_menu(call):
    """Show admin balance control menu"""
    user_id = call.message.chat.id
    
    try:
        bot.edit_message_text(
            chat_id=user_id,
            message_id=call.message.message_id,
            text="üí∞ B·¥Ä ü·¥Ä…¥·¥Ñ·¥á C·¥è…¥·¥õ Ä·¥è ü\n\nS·¥á ü·¥á·¥Ñ·¥õ ·¥Ä…¥ ·¥è·¥ò·¥õ…™·¥è…¥:",
            reply_markup=admin_balance_keyboard()
        )
    except:
        bot.send_message(user_id, "üí∞ B·¥Ä ü·¥Ä…¥·¥Ñ·¥á C·¥è…¥·¥õ Ä·¥è ü\n\nS·¥á ü·¥á·¥Ñ·¥õ ·¥Ä…¥ ·¥è·¥ò·¥õ…™·¥è…¥:", 
                        reply_markup=admin_balance_keyboard())

def show_admin_user_menu(call):
    """Show admin user control menu"""
    user_id = call.message.chat.id
    
    try:
        bot.edit_message_text(
            chat_id=user_id,
            message_id=call.message.message_id,
            text="üë• Us·¥á Ä C·¥è…¥·¥õ Ä·¥è ü\n\nS·¥á ü·¥á·¥Ñ·¥õ ·¥Ä…¥ ·¥è·¥ò·¥õ…™·¥è…¥:",
            reply_markup=admin_user_keyboard()
        )
    except:
        bot.send_message(user_id, "üë• Us·¥á Ä C·¥è…¥·¥õ Ä·¥è ü\n\nS·¥á ü·¥á·¥Ñ·¥õ ·¥Ä…¥ ·¥è·¥ò·¥õ…™·¥è…¥:", 
                        reply_markup=admin_user_keyboard())

def show_admin_bot_control(call):
    """Show admin bot control menu"""
    user_id = call.message.chat.id
    bot_status = "üü¢ ON" if is_bot_accepting_orders() else "üî¥ OFF"
    
    text = f"""
‚öôÔ∏è B·¥è·¥õ C·¥è…¥·¥õ Ä·¥è ü

C·¥ú Ä Ä·¥á…¥·¥õ S·¥õ·¥Ä·¥õ·¥ús: {bot_status}

S·¥á ü·¥á·¥Ñ·¥õ ·¥Ä…¥ ·¥è·¥ò·¥õ…™·¥è…¥:
    """
    
    try:
        bot.edit_message_text(
            chat_id=user_id,
            message_id=call.message.message_id,
            text=text,
            reply_markup=admin_bot_control_keyboard()
        )
    except:
        bot.send_message(user_id, text, reply_markup=admin_bot_control_keyboard())

def show_admin_stats(call):
    """Show admin statistics"""
    user_id = call.message.chat.id
    
    total_users = users_collection.count_documents({})
    total_orders = orders_collection.count_documents({})
    total_deposits = sum(user.get('total_deposits_points', 0) for user in users_collection.find()) / 100
    total_spent = sum(user.get('total_spent_points', 0) for user in users_collection.find()) / 100
    active_services = services_collection.count_documents({"active": True})
    
    text = f"""
üìä A·¥Ö·¥ç…™…¥ S·¥õ·¥Ä·¥õ…™s·¥õ…™·¥Ñs

üë• T·¥è·¥õ·¥Ä ü Us·¥á Äs: {total_users}
üõí T·¥è·¥õ·¥Ä ü O Ä·¥Ö·¥á Äs: {total_orders}
üì¶ A·¥Ñ·¥õ…™·¥†·¥á S·¥á Ä·¥†…™·¥Ñ·¥ás: {active_services}
üí∞ T·¥è·¥õ·¥Ä ü D·¥á·¥ò·¥ès…™·¥õs: ‚Çπ{total_deposits:.2f}
üí∏ T·¥è·¥õ·¥Ä ü S·¥ò·¥á…¥·¥õ: ‚Çπ{total_spent:.2f}
    """
    
    try:
        bot.edit_message_text(
            chat_id=user_id,
            message_id=call.message.message_id,
            text=text,
            reply_markup=admin_main_keyboard()
        )
    except:
        bot.send_message(user_id, text, reply_markup=admin_main_keyboard())

def start_admin_broadcast(call):
    """Start broadcast process"""
    user_id = call.message.chat.id
    admin_states[user_id] = {"action": "broadcasting", "step": "message"}
    
    try:
        bot.edit_message_text(
            chat_id=user_id,
            message_id=call.message.message_id,
            text="üì¢ B Ä·¥è·¥Ä·¥Ö·¥Ñ·¥Äs·¥õ\n\nS·¥á…¥·¥Ö ·¥õ ú·¥á ·¥ç·¥áss·¥Ä…¢·¥á  è·¥è·¥ú ·¥°·¥Ä…¥·¥õ ·¥õ·¥è  ô Ä·¥è·¥Ä·¥Ö·¥Ñ·¥Äs·¥õ ·¥õ·¥è ·¥Ä ü ü ·¥ús·¥á Äs:"
        )
    except:
        bot.send_message(user_id, "üì¢ B Ä·¥è·¥Ä·¥Ö·¥Ñ·¥Äs·¥õ\n\nS·¥á…¥·¥Ö ·¥õ ú·¥á ·¥ç·¥áss·¥Ä…¢·¥á  è·¥è·¥ú ·¥°·¥Ä…¥·¥õ ·¥õ·¥è  ô Ä·¥è·¥Ä·¥Ö·¥Ñ·¥Äs·¥õ ·¥õ·¥è ·¥Ä ü ü ·¥ús·¥á Äs:")

def process_broadcast_message(message):
    """Process broadcast message"""
    user_id = message.chat.id
    
    if user_id not in admin_states or admin_states[user_id].get("action") != "broadcasting":
        return
    
    broadcast_message = message.text
    admin_states[user_id]["broadcast_message"] = broadcast_message
    admin_states[user_id]["step"] = "confirm"
    
    text = f"""
üì¢ B Ä·¥è·¥Ä·¥Ö·¥Ñ·¥Äs·¥õ C·¥è…¥“ì…™ Ä·¥ç·¥Ä·¥õ…™·¥è…¥

M·¥áss·¥Ä…¢·¥á:
{broadcast_message}

T ú…™s ·¥ç·¥áss·¥Ä…¢·¥á ·¥°…™ ü ü  ô·¥á s·¥á…¥·¥õ ·¥õ·¥è ·¥Ä ü ü ·¥ús·¥á Äs. C·¥è…¥·¥õ…™…¥·¥ú·¥á?
    """
    
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("‚úÖ Yes, Send", callback_data="admin_confirm_broadcast"))
    markup.add(InlineKeyboardButton("‚ùå Cancel", callback_data="admin_menu"))
    
    bot.send_message(user_id, text, reply_markup=markup)

def send_broadcast(admin_id, message_text):
    """Send broadcast to all users"""
    users = users_collection.find({})
    success_count = 0
    fail_count = 0
    
    for user in users:
        try:
            bot.send_message(user["user_id"], f"üì¢ A…¥…¥·¥è·¥ú…¥·¥Ñ·¥á·¥ç·¥á…¥·¥õ:\n\n{message_text}")
            success_count += 1
            time.sleep(0.1)  # Rate limiting
        except Exception as e:
            print(f"Broadcast failed for {user['user_id']}: {e}")
            fail_count += 1
    
    # Send report to admin
    report = f"""
üì¢ B Ä·¥è·¥Ä·¥Ö·¥Ñ·¥Äs·¥õ R·¥á·¥ò·¥è Ä·¥õ

‚úÖ S·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü: {success_count}
‚ùå F·¥Ä…™ ü·¥á·¥Ö: {fail_count}
üìä T·¥è·¥õ·¥Ä ü: {success_count + fail_count}
    """
    
    bot.send_message(admin_id, report)
    log_admin_action(admin_id, "broadcast", f"Sent to {success_count} users")

def start_add_balance(call):
    """Start add balance process"""
    user_id = call.message.chat.id
    admin_states[user_id] = {"action": "adding_balance", "step": "user_id"}
    
    try:
        bot.edit_message_text(
            chat_id=user_id,
            message_id=call.message.message_id,
            text="üí∞ A·¥Ö·¥Ö B·¥Ä ü·¥Ä…¥·¥Ñ·¥á\n\nS·¥á…¥·¥Ö ·¥õ ú·¥á Us·¥á Ä ID:"
        )
    except:
        bot.send_message(user_id, "üí∞ A·¥Ö·¥Ö B·¥Ä ü·¥Ä…¥·¥Ñ·¥á\n\nS·¥á…¥·¥Ö ·¥õ ú·¥á Us·¥á Ä ID:")

def process_add_balance_user_id(message):
    """Process user ID for adding balance"""
    user_id = message.chat.id
    
    if user_id not in admin_states or admin_states[user_id].get("action") != "adding_balance":
        return
    
    try:
        target_user_id = int(message.text.strip())
        admin_states[user_id]["target_user_id"] = target_user_id
        admin_states[user_id]["step"] = "amount"
        
        bot.send_message(user_id, "üí∞ E…¥·¥õ·¥á Ä ·¥Ä·¥ç·¥è·¥ú…¥·¥õ ·¥õ·¥è ·¥Ä·¥Ö·¥Ö (…™…¥ ·¥ò·¥è…™…¥·¥õs):")
    except ValueError:
        bot.send_message(user_id, "‚ùå I…¥·¥†·¥Ä ü…™·¥Ö Us·¥á Ä ID! Us·¥á …¥·¥ú·¥ç ô·¥á Äs ·¥è…¥ ü è.")

def process_add_balance_amount(message):
    """Process amount to add"""
    user_id = message.chat.id
    
    if user_id not in admin_states or admin_states[user_id].get("action") != "adding_balance":
        return
    
    try:
        amount = int(message.text.strip())
        target_user_id = admin_states[user_id]["target_user_id"]
        
        # Add balance
        new_balance = update_user_balance(target_user_id, amount, is_deposit=True)
        
        # Clear state
        del admin_states[user_id]
        
        text = f"""
‚úÖ B·¥Ä ü·¥Ä…¥·¥Ñ·¥á A·¥Ö·¥Ö·¥á·¥Ö S·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è!

üë§ Us·¥á Ä ID: {target_user_id}
üí∞ A·¥Ö·¥Ö·¥á·¥Ö: {amount} ·¥ò·¥è…™…¥·¥õs
üí≥ N·¥á·¥° B·¥Ä ü·¥Ä…¥·¥Ñ·¥á: {new_balance} ·¥ò·¥è…™…¥·¥õs
        """
        
        bot.send_message(user_id, text, reply_markup=admin_main_keyboard())
        log_admin_action(user_id, "add_balance", f"User: {target_user_id}, Amount: {amount}")
        
    except ValueError:
        bot.send_message(user_id, "‚ùå I…¥·¥†·¥Ä ü…™·¥Ö ·¥Ä·¥ç·¥è·¥ú…¥·¥õ! Us·¥á …¥·¥ú·¥ç ô·¥á Äs ·¥è…¥ ü è.")

def start_deduct_balance(call):
    """Start deduct balance process"""
    user_id = call.message.chat.id
    admin_states[user_id] = {"action": "deducting_balance", "step": "user_id"}
    
    try:
        bot.edit_message_text(
            chat_id=user_id,
            message_id=call.message.message_id,
            text="üí∞ D·¥á·¥Ö·¥ú·¥Ñ·¥õ B·¥Ä ü·¥Ä…¥·¥Ñ·¥á\n\nS·¥á…¥·¥Ö ·¥õ ú·¥á Us·¥á Ä ID:"
        )
    except:
        bot.send_message(user_id, "üí∞ D·¥á·¥Ö·¥ú·¥Ñ·¥õ B·¥Ä ü·¥Ä…¥·¥Ñ·¥á\n\nS·¥á…¥·¥Ö ·¥õ ú·¥á Us·¥á Ä ID:")

def process_deduct_balance_user_id(message):
    """Process user ID for deducting balance"""
    user_id = message.chat.id
    
    if user_id not in admin_states or admin_states[user_id].get("action") != "deducting_balance":
        return
    
    try:
        target_user_id = int(message.text.strip())
        admin_states[user_id]["target_user_id"] = target_user_id
        admin_states[user_id]["step"] = "amount"
        
        bot.send_message(user_id, "üí∞ E…¥·¥õ·¥á Ä ·¥Ä·¥ç·¥è·¥ú…¥·¥õ ·¥õ·¥è ·¥Ö·¥á·¥Ö·¥ú·¥Ñ·¥õ (…™…¥ ·¥ò·¥è…™…¥·¥õs):")
    except ValueError:
        bot.send_message(user_id, "‚ùå I…¥·¥†·¥Ä ü…™·¥Ö Us·¥á Ä ID! Us·¥á …¥·¥ú·¥ç ô·¥á Äs ·¥è…¥ ü è.")

def process_deduct_balance_amount(message):
    """Process amount to deduct"""
    user_id = message.chat.id
    
    if user_id not in admin_states or admin_states[user_id].get("action") != "deducting_balance":
        return
    
    try:
        amount = int(message.text.strip())
        target_user_id = admin_states[user_id]["target_user_id"]
        
        # Check if user has sufficient balance
        current_balance = get_user_balance(target_user_id)
        if current_balance < amount:
            bot.send_message(user_id, f"‚ùå I…¥s·¥ú“ì“ì…™·¥Ñ…™·¥á…¥·¥õ  ô·¥Ä ü·¥Ä…¥·¥Ñ·¥á! Us·¥á Ä  ú·¥Äs ·¥è…¥ ü è {current_balance} ·¥ò·¥è…™…¥·¥õs.")
            return
        
        # Deduct balance
        new_balance = update_user_balance(target_user_id, -amount, is_spent=True)
        
        # Clear state
        del admin_states[user_id]
        
        text = f"""
‚úÖ B·¥Ä ü·¥Ä…¥·¥Ñ·¥á D·¥á·¥Ö·¥ú·¥Ñ·¥õ·¥á·¥Ö S·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è!

üë§ Us·¥á Ä ID: {target_user_id}
üí∞ D·¥á·¥Ö·¥ú·¥Ñ·¥õ·¥á·¥Ö: {amount} ·¥ò·¥è…™…¥·¥õs
üí≥ N·¥á·¥° B·¥Ä ü·¥Ä…¥·¥Ñ·¥á: {new_balance} ·¥ò·¥è…™…¥·¥õs
        """
        
        bot.send_message(user_id, text, reply_markup=admin_main_keyboard())
        log_admin_action(user_id, "deduct_balance", f"User: {target_user_id}, Amount: {amount}")
        
    except ValueError:
        bot.send_message(user_id, "‚ùå I…¥·¥†·¥Ä ü…™·¥Ö ·¥Ä·¥ç·¥è·¥ú…¥·¥õ! Us·¥á …¥·¥ú·¥ç ô·¥á Äs ·¥è…¥ ü è.")

def start_ban_user(call):
    """Start ban user process"""
    user_id = call.message.chat.id
    admin_states[user_id] = {"action": "banning_user", "step": "user_id"}
    
    try:
        bot.edit_message_text(
            chat_id=user_id,
            message_id=call.message.message_id,
            text="üö´ B·¥Ä…¥ Us·¥á Ä\n\nS·¥á…¥·¥Ö ·¥õ ú·¥á Us·¥á Ä ID ·¥õ·¥è  ô·¥Ä…¥:"
        )
    except:
        bot.send_message(user_id, "üö´ B·¥Ä…¥ Us·¥á Ä\n\nS·¥á…¥·¥Ö ·¥õ ú·¥á Us·¥á Ä ID ·¥õ·¥è  ô·¥Ä…¥:")

def process_ban_user(message):
    """Process user ban"""
    user_id = message.chat.id
    
    if user_id not in admin_states or admin_states[user_id].get("action") != "banning_user":
        return
    
    try:
        target_user_id = int(message.text.strip())
        
        # Ban user
        users_collection.update_one(
            {"user_id": target_user_id},
            {"$set": {"banned": True}},
            upsert=True
        )
        
        # Clear state
        del admin_states[user_id]
        
        text = f"""
‚úÖ Us·¥á Ä B·¥Ä…¥…¥·¥á·¥Ö S·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è!

üë§ Us·¥á Ä ID: {target_user_id}
üö´ S·¥õ·¥Ä·¥õ·¥ús: B·¥Ä…¥…¥·¥á·¥Ö
        """
        
        bot.send_message(user_id, text, reply_markup=admin_main_keyboard())
        log_admin_action(user_id, "ban_user", f"User: {target_user_id}")
        
    except ValueError:
        bot.send_message(user_id, "‚ùå I…¥·¥†·¥Ä ü…™·¥Ö Us·¥á Ä ID! Us·¥á …¥·¥ú·¥ç ô·¥á Äs ·¥è…¥ ü è.")

def start_unban_user(call):
    """Start unban user process"""
    user_id = call.message.chat.id
    admin_states[user_id] = {"action": "unbanning_user", "step": "user_id"}
    
    try:
        bot.edit_message_text(
            chat_id=user_id,
            message_id=call.message.message_id,
            text="‚úÖ U…¥ ô·¥Ä…¥ Us·¥á Ä\n\nS·¥á…¥·¥Ö ·¥õ ú·¥á Us·¥á Ä ID ·¥õ·¥è ·¥ú…¥ ô·¥Ä…¥:"
        )
    except:
        bot.send_message(user_id, "‚úÖ U…¥ ô·¥Ä…¥ Us·¥á Ä\n\nS·¥á…¥·¥Ö ·¥õ ú·¥á Us·¥á Ä ID ·¥õ·¥è ·¥ú…¥ ô·¥Ä…¥:")

def process_unban_user(message):
    """Process user unban"""
    user_id = message.chat.id
    
    if user_id not in admin_states or admin_states[user_id].get("action") != "unbanning_user":
        return
    
    try:
        target_user_id = int(message.text.strip())
        
        # Unban user
        users_collection.update_one(
            {"user_id": target_user_id},
            {"$set": {"banned": False}}
        )
        
        # Clear state
        del admin_states[user_id]
        
        text = f"""
‚úÖ Us·¥á Ä U…¥ ô·¥Ä…¥…¥·¥á·¥Ö S·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è!

üë§ Us·¥á Ä ID: {target_user_id}
‚úÖ S·¥õ·¥Ä·¥õ·¥ús: A·¥Ñ·¥õ…™·¥†·¥á
        """
        
        bot.send_message(user_id, text, reply_markup=admin_main_keyboard())
        log_admin_action(user_id, "unban_user", f"User: {target_user_id}")
        
    except ValueError:
        bot.send_message(user_id, "‚ùå I…¥·¥†·¥Ä ü…™·¥Ö Us·¥á Ä ID! Us·¥á …¥·¥ú·¥ç ô·¥á Äs ·¥è…¥ ü è.")

def set_bot_status(call, status):
    """Set bot accepting orders status"""
    user_id = call.message.chat.id
    set_bot_accepting_orders(status)
    
    status_text = "üü¢ ON" if status else "üî¥ OFF"
    text = f"‚úÖ B·¥è·¥õ s·¥õ·¥Ä·¥õ·¥ús s·¥á·¥õ ·¥õ·¥è: {status_text}"
    
    try:
        bot.edit_message_text(
            chat_id=user_id,
            message_id=call.message.message_id,
            text=text,
            reply_markup=admin_main_keyboard()
        )
    except:
        bot.send_message(user_id, text, reply_markup=admin_main_keyboard())
    
    log_admin_action(user_id, "set_bot_status", f"Status: {status_text}")

def show_bot_status(call):
    """Show current bot status"""
    user_id = call.message.chat.id
    bot_status = "üü¢ ON" if is_bot_accepting_orders() else "üî¥ OFF"
    
    text = f"‚öôÔ∏è C·¥ú Ä Ä·¥á…¥·¥õ B·¥è·¥õ S·¥õ·¥Ä·¥õ·¥ús: {bot_status}"
    
    bot.answer_callback_query(call.id, text, show_alert=True)

def handle_admin_back(call):
    """Handle admin back navigation"""
    user_id = call.message.chat.id
    
    if call.data == "admin_manage_services_back":
        show_admin_services_menu(call)
    elif call.data == "admin_edit_back" or call.data == "admin_delete_back":
        show_service_categories(call, "edit" if "edit" in call.data else "delete")
    else:
        show_admin_menu(call)

def handle_admin_confirmations(call):
    """Handle admin confirmations"""
    user_id = call.message.chat.id
    
    if call.data == "admin_confirm_broadcast":
        message_text = admin_states[user_id].get("broadcast_message")
        if message_text:
            send_broadcast(user_id, message_text)
            del admin_states[user_id]
            
            try:
                bot.edit_message_text(
                    chat_id=user_id,
                    message_id=call.message.message_id,
                    text="üì¢ B Ä·¥è·¥Ä·¥Ö·¥Ñ·¥Äs·¥õ s·¥á…¥·¥õ s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è!",
                    reply_markup=admin_main_keyboard()
                )
            except:
                bot.send_message(user_id, "üì¢ B Ä·¥è·¥Ä·¥Ö·¥Ñ·¥Äs·¥õ s·¥á…¥·¥õ s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è!", 
                               reply_markup=admin_main_keyboard())

def show_admin_menu(call):
    """Show admin main menu"""
    user_id = call.message.chat.id
    admin_panel(call.message)

# User Message Handlers
@bot.message_handler(commands=['start'])
def send_welcome(message):
    """Handle /start command"""
    user_id = message.chat.id
    user_name = message.chat.first_name
    
    # Check if user is banned
    user = users_collection.find_one({"user_id": user_id})
    if user and user.get("banned"):
        bot.reply_to(message, "üö´ Y·¥è·¥ú ·¥Ä Ä·¥á  ô·¥Ä…¥…¥·¥á·¥Ö “ì Ä·¥è·¥ç ·¥ús…™…¥…¢ ·¥õ ú…™s  ô·¥è·¥õ.")
        return
    
    # Check channel membership
    if not check_channel_membership(user_id):
        text = f"""
üëã W·¥á ü·¥Ñ·¥è·¥ç·¥á {user_name}!

üì¢ P ü·¥á·¥Äs·¥á ·¥ä·¥è…™…¥ ·¥è·¥ú Ä ·¥Ñ ú·¥Ä…¥…¥·¥á ü ·¥õ·¥è ·¥ús·¥á ·¥õ ú·¥á  ô·¥è·¥õ:

{CHANNEL_ID}

A“ì·¥õ·¥á Ä ·¥ä·¥è…™…¥…™…¥…¢, ·¥Ñ ü…™·¥Ñ·¥ã ·¥õ ú·¥á  ô·¥ú·¥õ·¥õ·¥è…¥  ô·¥á ü·¥è·¥° ·¥õ·¥è ·¥Ñ ú·¥á·¥Ñ·¥ã.
        """
        bot.send_photo(user_id, WELCOME_IMAGE, text, reply_markup=channel_join_keyboard())
        return
    
    # Welcome message for verified users
    text = f"""
üëã W·¥á ü·¥Ñ·¥è·¥ç·¥á {user_name}!

ü§ñ I'·¥ç ·¥Ä…¥ SMM s·¥á Ä·¥†…™·¥Ñ·¥ás  ô·¥è·¥õ. I ·¥Ñ·¥Ä…¥  ú·¥á ü·¥ò  è·¥è·¥ú …¢ Ä·¥è·¥°  è·¥è·¥ú Ä s·¥è·¥Ñ…™·¥Ä ü ·¥ç·¥á·¥Ö…™·¥Ä ·¥Ä·¥Ñ·¥Ñ·¥è·¥ú…¥·¥õs.

üí° F·¥á·¥Ä·¥õ·¥ú Ä·¥ás:
‚Ä¢ Instagram Followers/Likes
‚Ä¢ YouTube Views/Subscribers  
‚Ä¢ Telegram Members/Reactions
‚Ä¢ Facebook Likes/Followers
‚Ä¢ And many more!

üí∞ G·¥á·¥õ s·¥õ·¥Ä Ä·¥õ·¥á·¥Ö  ô è ·¥Ä·¥Ö·¥Ö…™…¥…¢ “ì·¥ú…¥·¥Ös ·¥õ·¥è  è·¥è·¥ú Ä ·¥Ä·¥Ñ·¥Ñ·¥è·¥ú…¥·¥õ.
    """
    
    bot.send_photo(user_id, WELCOME_IMAGE, text, reply_markup=main_menu_keyboard())

@bot.message_handler(commands=['balance'])
def check_balance(message):
    """Check user balance"""
    user_id = message.chat.id
    balance = get_user_balance(user_id)
    
    text = f"""
üí≥ Y·¥è·¥ú Ä A·¥Ñ·¥Ñ·¥è·¥ú…¥·¥õ B·¥Ä ü·¥Ä…¥·¥Ñ·¥á

üí∞ A·¥†·¥Ä…™ ü·¥Ä ô ü·¥á B·¥Ä ü·¥Ä…¥·¥Ñ·¥á: {balance} ·¥ò·¥è…™…¥·¥õs
üíµ A·¥ò·¥ò Ä·¥èx. …™…¥  Ä·¥ú·¥ò·¥á·¥ás: ‚Çπ{balance/100:.2f}

üí° 100 ·¥ò·¥è…™…¥·¥õs = ‚Çπ1
    """
    
    bot.send_photo(user_id, ACCOUNT_IMAGE, text, reply_markup=main_menu_keyboard())

@bot.callback_query_handler(func=lambda call: True)
def handle_callback_queries(call):
    """Handle all callback queries"""
    user_id = call.message.chat.id
    
    # Check if user is banned
    user = users_collection.find_one({"user_id": user_id})
    if user and user.get("banned"):
        bot.answer_callback_query(call.id, "üö´ Y·¥è·¥ú ·¥Ä Ä·¥á  ô·¥Ä…¥…¥·¥á·¥Ö “ì Ä·¥è·¥ç ·¥ús…™…¥…¢ ·¥õ ú…™s  ô·¥è·¥õ.", show_alert=True)
        return
    
    try:
        if call.data == "main_menu":
            show_main_menu(call)
        
        elif call.data == "deposit":
            show_deposit_options(call)
        
        elif call.data == "order_menu":
            show_service_categories_user(call)
        
        elif call.data == "history":
            show_order_history(call)
        
        elif call.data == "refer":
            show_referral_info(call)
        
        elif call.data == "account":
            show_account_info(call)
        
        elif call.data == "stats":
            show_stats(call)
        
        elif call.data == "support":
            show_support(call)
        
        elif call.data == "restart":
            restart_bot(call)
        
        elif call.data == "check_join":
            check_channel_join(call)
        
        elif call.data.startswith("category_"):
            category = call.data.replace("category_", "")
            show_services(call, category)
        
        elif call.data.startswith("service_"):
            service_id = call.data.replace("service_", "")
            start_order_process(call, service_id)
        
        elif call.data == "track_order":
            start_track_order(call)
        
        # Handle admin callbacks
        elif call.data.startswith("admin_"):
            handle_admin_callbacks(call)
            
    except Exception as e:
        print(f"Callback error: {e}")
        bot.answer_callback_query(call.id, "‚ùå A…¥ ·¥á Ä Ä·¥è Ä ·¥è·¥Ñ·¥Ñ·¥ú Ä Ä·¥á·¥Ö!")

def show_main_menu(call):
    """Show main menu"""
    user_id = call.message.chat.id
    user_name = call.message.chat.first_name
    
    text = f"""
üëã H·¥á ü ü·¥è {user_name}!

ü§ñ W·¥á ü·¥Ñ·¥è·¥ç·¥á ·¥õ·¥è SMM B·¥è·¥õ M·¥Ä…™…¥ M·¥á…¥·¥ú

S·¥á ü·¥á·¥Ñ·¥õ ·¥Ä…¥ ·¥è·¥ò·¥õ…™·¥è…¥ “ì Ä·¥è·¥ç  ô·¥á ü·¥è·¥°:
    """
    
    try:
        bot.edit_message_media(
            chat_id=user_id,
            message_id=call.message.message_id,
            media=telebot.types.InputMediaPhoto(WELCOME_IMAGE, text),
            reply_markup=main_menu_keyboard()
        )
    except:
        bot.send_photo(user_id, WELCOME_IMAGE, text, reply_markup=main_menu_keyboard())

def show_deposit_options(call):
    """Show deposit options"""
    user_id = call.message.chat.id
    balance = get_user_balance(user_id)
    
    text = f"""
üí∞ D·¥á·¥ò·¥ès…™·¥õ F·¥ú…¥·¥Ös

üí≥ C·¥ú Ä Ä·¥á…¥·¥õ B·¥Ä ü·¥Ä…¥·¥Ñ·¥á: {balance} ·¥ò·¥è…™…¥·¥õs
üíµ A·¥ò·¥ò Ä·¥èx. …™…¥  Ä·¥ú·¥ò·¥á·¥ás: ‚Çπ{balance/100:.2f}

üí° 100 ·¥ò·¥è…™…¥·¥õs = ‚Çπ1

P ü·¥á·¥Äs·¥á ·¥Ñ·¥è…¥·¥õ·¥Ä·¥Ñ·¥õ ·¥Ä·¥Ö·¥ç…™…¥ “ì·¥è Ä ·¥Ö·¥á·¥ò·¥ès…™·¥õs:

üìû C·¥è…¥·¥õ·¥Ä·¥Ñ·¥õ: @SMMSupportBot
    """
    
    try:
        bot.edit_message_media(
            chat_id=user_id,
            message_id=call.message.message_id,
            media=telebot.types.InputMediaPhoto(DEPOSIT_IMAGE, text),
            reply_markup=main_menu_keyboard()
        )
    except:
        bot.send_photo(user_id, DEPOSIT_IMAGE, text, reply_markup=main_menu_keyboard())

def show_service_categories_user(call):
    """Show service categories for users"""
    user_id = call.message.chat.id
    
    if not is_bot_accepting_orders():
        bot.answer_callback_query(call.id, "‚ùå B·¥è·¥õ …™s ·¥Ñ·¥ú Ä Ä·¥á…¥·¥õ ü è …¥·¥è·¥õ ·¥Ä·¥Ñ·¥Ñ·¥á·¥ò·¥õ…™…¥…¢ ·¥è Ä·¥Ö·¥á Äs!", show_alert=True)
        return
    
    text = """
üõí S·¥á ü·¥á·¥Ñ·¥õ S·¥á Ä·¥†…™·¥Ñ·¥á C·¥Ä·¥õ·¥á…¢·¥è Ä è

C ú·¥è·¥ès·¥á ·¥Ä ·¥Ñ·¥Ä·¥õ·¥á…¢·¥è Ä è “ì Ä·¥è·¥ç  ô·¥á ü·¥è·¥°:
    """
    
    try:
        bot.edit_message_media(
            chat_id=user_id,
            message_id=call.message.message_id,
            media=telebot.types.InputMediaPhoto(SERVICE_IMAGE, text),
            reply_markup=service_category_keyboard()
        )
    except:
        bot.send_photo(user_id, SERVICE_IMAGE, text, reply_markup=service_category_keyboard())

def show_services(call, category):
    """Show services for a category"""
    user_id = call.message.chat.id
    
    text = f"""
üì¶ {category.title()} S·¥á Ä·¥†…™·¥Ñ·¥ás

S·¥á ü·¥á·¥Ñ·¥õ ·¥Ä s·¥á Ä·¥†…™·¥Ñ·¥á “ì Ä·¥è·¥ç  ô·¥á ü·¥è·¥°:
    """
    
    try:
        bot.edit_message_media(
            chat_id=user_id,
            message_id=call.message.message_id,
            media=telebot.types.InputMediaPhoto(SERVICE_IMAGE, text),
            reply_markup=services_keyboard(category)
        )
    except:
        bot.send_photo(user_id, SERVICE_IMAGE, text, reply_markup=services_keyboard(category))

def start_order_process(call, service_id):
    """Start order process for a service"""
    user_id = call.message.chat.id
    service = get_service_by_id(service_id)
    
    if not service:
        bot.answer_callback_query(call.id, "‚ùå S·¥á Ä·¥†…™·¥Ñ·¥á …¥·¥è·¥õ “ì·¥è·¥ú…¥·¥Ö!")
        return
    
    user_states[user_id] = {
        "action": "ordering",
        "service_id": service_id,
        "step": "link"
    }
    
    text = f"""
üì¶ O Ä·¥Ö·¥á Ä: {service['name']}

üìù D·¥ás·¥Ñ Ä…™·¥ò·¥õ…™·¥è…¥: {service['description']}
üí∞ P Ä…™·¥Ñ·¥á: {service['price_per_unit']} ·¥ò·¥è…™…¥·¥õs ·¥ò·¥á Ä {service['unit']}
üî¢ Q·¥ú·¥Ä…¥·¥õ…™·¥õ è  Ä·¥Ä…¥…¢·¥á: {service['min']} - {service['max']}

P ü·¥á·¥Äs·¥á s·¥á…¥·¥Ö ·¥õ ú·¥á  ü…™…¥·¥ã:
    """
    
    try:
        bot.edit_message_text(
            chat_id=user_id,
            message_id=call.message.message_id,
            text=text
        )
    except:
        bot.send_message(user_id, text)
    
    bot.register_next_step_handler(call.message, process_order_link)

def process_order_link(message):
    """Process order link"""
    user_id = message.chat.id
    
    if user_id not in user_states or user_states[user_id].get("action") != "ordering":
        return
    
    link = message.text.strip()
    user_states[user_id]["link"] = link
    user_states[user_id]["step"] = "quantity"
    
    service = get_service_by_id(user_states[user_id]["service_id"])
    
    bot.send_message(user_id, f"üî¢ E…¥·¥õ·¥á Ä «´·¥ú·¥Ä…¥·¥õ…™·¥õ è ({service['min']} - {service['max']}):")

def process_order_quantity(message):
    """Process order quantity"""
    user_id = message.chat.id
    
    if user_id not in user_states or user_states[user_id].get("action") != "ordering":
        return
    
    try:
        quantity = int(message.text.strip())
        service = get_service_by_id(user_states[user_id]["service_id"])
        
        if quantity < service["min"] or quantity > service["max"]:
            bot.send_message(user_id, f"‚ùå I…¥·¥†·¥Ä ü…™·¥Ö «´·¥ú·¥Ä…¥·¥õ…™·¥õ è! M·¥ús·¥õ  ô·¥á  ô·¥á·¥õ·¥°·¥á·¥á…¥ {service['min']} ·¥Ä…¥·¥Ö {service['max']}.")
            return
        
        user_states[user_id]["quantity"] = quantity
        
        # Calculate cost
        cost_points = (quantity / service["unit"]) * service["price_per_unit"]
        user_states[user_id]["cost_points"] = cost_points
        
        # Check balance
        user_balance = get_user_balance(user_id)
        if user_balance < cost_points:
            bot.send_message(user_id, f"‚ùå I…¥s·¥ú“ì“ì…™·¥Ñ…™·¥á…¥·¥õ  ô·¥Ä ü·¥Ä…¥·¥Ñ·¥á! Y·¥è·¥ú …¥·¥á·¥á·¥Ö {cost_points} ·¥ò·¥è…™…¥·¥õs,  ô·¥ú·¥õ  è·¥è·¥ú  ú·¥Ä·¥†·¥á ·¥è…¥ ü è {user_balance} ·¥ò·¥è…™…¥·¥õs.")
            del user_states[user_id]
            return
        
        # Confirm order
        text = f"""
üì¶ O Ä·¥Ö·¥á Ä C·¥è…¥“ì…™ Ä·¥ç·¥Ä·¥õ…™·¥è…¥

üìù S·¥á Ä·¥†…™·¥Ñ·¥á: {service['name']}
üîó L…™…¥·¥ã: {user_states[user_id]['link']}
üî¢ Q·¥ú·¥Ä…¥·¥õ…™·¥õ è: {quantity}
üí∞ C·¥ès·¥õ: {cost_points} ·¥ò·¥è…™…¥·¥õs

C·¥è…¥“ì…™ Ä·¥ç ·¥è Ä·¥Ö·¥á Ä?
        """
        
        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton("‚úÖ Confirm", callback_data="confirm_order"))
        markup.add(InlineKeyboardButton("‚ùå Cancel", callback_data="order_menu"))
        
        bot.send_message(user_id, text, reply_markup=markup)
        
    except ValueError:
        bot.send_message(user_id, "‚ùå I…¥·¥†·¥Ä ü…™·¥Ö «´·¥ú·¥Ä…¥·¥õ…™·¥õ è! Us·¥á …¥·¥ú·¥ç ô·¥á Äs ·¥è…¥ ü è.")

def confirm_order(call):
    """Confirm and process order"""
    user_id = call.message.chat.id
    
    if user_id not in user_states or user_states[user_id].get("action") != "ordering":
        return
    
    data = user_states[user_id]
    service = get_service_by_id(data["service_id"])
    
    # Deduct balance
    new_balance = update_user_balance(user_id, -data["cost_points"], is_spent=True)
    
    # Create order
    order = create_order(user_id, data["service_id"], data["link"], data["quantity"], data["cost_points"])
    
    if order:
        # Clear state
        del user_states[user_id]
        
        text = f"""
‚úÖ O Ä·¥Ö·¥á Ä P ü·¥Ä·¥Ñ·¥á·¥Ö S·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è!

üÜî O Ä·¥Ö·¥á Ä ID: {order['order_id']}
üìù S·¥á Ä·¥†…™·¥Ñ·¥á: {service['name']}
üîó L…™…¥·¥ã: {data['link']}
üî¢ Q·¥ú·¥Ä…¥·¥õ…™·¥õ è: {data['quantity']}
üí∞ C·¥ès·¥õ: {data['cost_points']} ·¥ò·¥è…™…¥·¥õs
üí≥ N·¥á·¥° B·¥Ä ü·¥Ä…¥·¥Ñ·¥á: {new_balance} ·¥ò·¥è…™…¥·¥õs

üìä S·¥õ·¥Ä·¥õ·¥ús: P·¥á…¥·¥Ö…™…¥…¢
‚è∞ E·¥õ·¥Ä: 24-48  ú·¥è·¥ú Äs
        """
        
        try:
            bot.edit_message_text(
                chat_id=user_id,
                message_id=call.message.message_id,
                text=text,
                reply_markup=main_menu_keyboard()
            )
        except:
            bot.send_message(user_id, text, reply_markup=main_menu_keyboard())
    else:
        bot.answer_callback_query(call.id, "‚ùå F·¥Ä…™ ü·¥á·¥Ö ·¥õ·¥è ·¥Ñ Ä·¥á·¥Ä·¥õ·¥á ·¥è Ä·¥Ö·¥á Ä!", show_alert=True)

def show_order_history(call):
    """Show user's order history"""
    user_id = call.message.chat.id
    orders = get_user_orders(user_id)
    
    if not orders:
        text = "üìã Y·¥è·¥ú  ú·¥Ä·¥†·¥á …¥·¥è ·¥è Ä·¥Ö·¥á Äs  è·¥á·¥õ."
    else:
        text = "üìã Y·¥è·¥ú Ä R·¥á·¥Ñ·¥á…¥·¥õ O Ä·¥Ö·¥á Äs:\n\n"
        for order in orders:
            status_emoji = "üü¢" if order["status"] == "Completed" else "üü°" if order["status"] == "Processing" else "üî¥"
            text += f"""
{status_emoji} O Ä·¥Ö·¥á Ä ID: {order['order_id']}
üì¶ S·¥á Ä·¥†…™·¥Ñ·¥á: {order['service_name']}
üî¢ Q·¥ú·¥Ä…¥·¥õ…™·¥õ è: {order['quantity']}
üí∞ C·¥ès·¥õ: {order['cost_points']} ·¥ò·¥è…™…¥·¥õs
üìä S·¥õ·¥Ä·¥õ·¥ús: {order['status']}
‚è∞ D·¥Ä·¥õ·¥á: {order['created_at'].strftime('%Y-%m-%d %H:%M')}
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
            """
    
    try:
        bot.edit_message_media(
            chat_id=user_id,
            message_id=call.message.message_id,
            media=telebot.types.InputMediaPhoto(HISTORY_IMAGE, text),
            reply_markup=track_order_keyboard()
        )
    except:
        bot.send_photo(user_id, HISTORY_IMAGE, text, reply_markup=track_order_keyboard())

def show_referral_info(call):
    """Show referral information"""
    user_id = call.message.chat.id
    referral_link = f"https://t.me/{(bot.get_me()).username}?start={user_id}"
    
    text = f"""
üë• R·¥á“ì·¥á Ä & E·¥Ä Ä…¥

üîó Y·¥è·¥ú Ä  Ä·¥á“ì·¥á Ä Ä·¥Ä ü  ü…™…¥·¥ã:
{referral_link}

üí° H·¥è·¥° …™·¥õ ·¥°·¥è Ä·¥ãs:
‚Ä¢ S ú·¥Ä Ä·¥á  è·¥è·¥ú Ä  Ä·¥á“ì·¥á Ä Ä·¥Ä ü  ü…™…¥·¥ã
‚Ä¢ G·¥á·¥õ 10% ·¥è“ì ·¥á·¥†·¥á Ä è ·¥Ö·¥á·¥ò·¥ès…™·¥õ ·¥õ ú·¥á è ·¥ç·¥Ä·¥ã·¥á
‚Ä¢ E·¥Ä Ä…¥ ·¥ú…¥ ü…™·¥ç…™·¥õ·¥á·¥Ö ·¥Ñ·¥è·¥ç·¥ç…™ss…™·¥è…¥s!

üí∞ R·¥á“ì·¥á Ä Ä·¥Ä ü ·¥Ñ·¥è·¥ç·¥ç…™ss…™·¥è…¥: 10%
    """
    
    try:
        bot.edit_message_media(
            chat_id=user_id,
            message_id=call.message.message_id,
            media=telebot.types.InputMediaPhoto(REFER_IMAGE, text),
            reply_markup=main_menu_keyboard()
        )
    except:
        bot.send_photo(user_id, REFER_IMAGE, text, reply_markup=main_menu_keyboard())

def show_account_info(call):
    """Show user account information"""
    user_id = call.message.chat.id
    user = users_collection.find_one({"user_id": user_id})
    balance = get_user_balance(user_id)
    total_orders = orders_collection.count_documents({"user_id": user_id})
    
    if not user:
        users_collection.insert_one({
            "user_id": user_id,
            "balance_points": 0,
            "total_deposits_points": 0,
            "total_spent_points": 0,
            "joined_at": datetime.now(),
            "banned": False
        })
        user = users_collection.find_one({"user_id": user_id})
    
    text = f"""
üë§ A·¥Ñ·¥Ñ·¥è·¥ú…¥·¥õ I…¥“ì·¥è Ä·¥ç·¥Ä·¥õ…™·¥è…¥

üÜî Us·¥á Ä ID: {user_id}
üëã N·¥Ä·¥ç·¥á: {call.message.chat.first_name}
üìÖ J·¥è…™…¥·¥á·¥Ö: {user['joined_at'].strftime('%Y-%m-%d')}

üí≥ B·¥Ä ü·¥Ä…¥·¥Ñ·¥á: {balance} ·¥ò·¥è…™…¥·¥õs
üí∞ T·¥è·¥õ·¥Ä ü D·¥á·¥ò·¥ès…™·¥õ·¥á·¥Ö: {user.get('total_deposits_points', 0)} ·¥ò·¥è…™…¥·¥õs
üí∏ T·¥è·¥õ·¥Ä ü S·¥ò·¥á…¥·¥õ: {user.get('total_spent_points', 0)} ·¥ò·¥è…™…¥·¥õs
üõí T·¥è·¥õ·¥Ä ü O Ä·¥Ö·¥á Äs: {total_orders}

üí° 100 ·¥ò·¥è…™…¥·¥õs = ‚Çπ1
    """
    
    try:
        bot.edit_message_media(
            chat_id=user_id,
            message_id=call.message.message_id,
            media=telebot.types.InputMediaPhoto(ACCOUNT_IMAGE, text),
            reply_markup=main_menu_keyboard()
        )
    except:
        bot.send_photo(user_id, ACCOUNT_IMAGE, text, reply_markup=main_menu_keyboard())

def show_stats(call):
    """Show bot statistics"""
    user_id = call.message.chat.id
    total_users = users_collection.count_documents({})
    total_orders = orders_collection.count_documents({})
    
    text = f"""
üìä B·¥è·¥õ S·¥õ·¥Ä·¥õ…™s·¥õ…™·¥Ñs

üë• T·¥è·¥õ·¥Ä ü Us·¥á Äs: {total_users}
üõí T·¥è·¥õ·¥Ä ü O Ä·¥Ö·¥á Äs: {total_orders}
üì¶ A·¥Ñ·¥õ…™·¥†·¥á S·¥á Ä·¥†…™·¥Ñ·¥ás: {services_collection.count_documents({'active': True})}

‚ö° B·¥è·¥õ S·¥õ·¥Ä·¥õ·¥ús: {'üü¢ Online' if is_bot_accepting_orders() else 'üî¥ Maintenance'}
    """
    
    try:
        bot.edit_message_text(
            chat_id=user_id,
            message_id=call.message.message_id,
            text=text,
            reply_markup=main_menu_keyboard()
        )
    except:
        bot.send_message(user_id, text, reply_markup=main_menu_keyboard())

def show_support(call):
    """Show support information"""
    user_id = call.message.chat.id
    
    text = """
‚ÑπÔ∏è S·¥ú·¥ò·¥ò·¥è Ä·¥õ

üìû C·¥è…¥·¥õ·¥Ä·¥Ñ·¥õ ·¥ús “ì·¥è Ä:
‚Ä¢ A·¥Ñ·¥Ñ·¥è·¥ú…¥·¥õ …™ss·¥ú·¥ás
‚Ä¢ D·¥á·¥ò·¥ès…™·¥õ  ú·¥á ü·¥ò
‚Ä¢ O Ä·¥Ö·¥á Ä ·¥ò Ä·¥è ô ü·¥á·¥çs
‚Ä¢ G·¥á…¥·¥á Ä·¥Ä ü «´·¥ú·¥ás·¥õ…™·¥è…¥s

üë®‚Äçüíª C·¥è…¥·¥õ·¥Ä·¥Ñ·¥õ: @SMMSupportBot
‚è∞ S·¥ú·¥ò·¥ò·¥è Ä·¥õ  ú·¥è·¥ú Äs: 24/7
    """
    
    try:
        bot.edit_message_media(
            chat_id=user_id,
            message_id=call.message.message_id,
            media=telebot.types.InputMediaPhoto(WELCOME_IMAGE, text),
            reply_markup=support_keyboard()
        )
    except:
        bot.send_photo(user_id, WELCOME_IMAGE, text, reply_markup=support_keyboard())

def restart_bot(call):
    """Restart bot for user"""
    user_id = call.message.chat.id
    send_welcome(call.message)

def check_channel_join(call):
    """Check if user has joined the channel"""
    user_id = call.message.chat.id
    
    if check_channel_membership(user_id):
        send_welcome(call.message)
    else:
        bot.answer_callback_query(call.id, "‚ùå Y·¥è·¥ú  ú·¥Ä·¥†·¥á …¥·¥è·¥õ ·¥ä·¥è…™…¥·¥á·¥Ö ·¥õ ú·¥á ·¥Ñ ú·¥Ä…¥…¥·¥á ü  è·¥á·¥õ!", show_alert=True)

def start_track_order(call):
    """Start track order process"""
    user_id = call.message.chat.id
    user_states[user_id] = {"action": "tracking_order", "step": "order_id"}
    
    bot.send_message(user_id, "üîç E…¥·¥õ·¥á Ä  è·¥è·¥ú Ä O Ä·¥Ö·¥á Ä ID:")

def process_track_order(message):
    """Process order tracking"""
    user_id = message.chat.id
    
    if user_id not in user_states or user_states[user_id].get("action") != "tracking_order":
        return
    
    order_id = message.text.strip()
    order = get_order_by_id(order_id)
    
    if not order or order["user_id"] != user_id:
        bot.send_message(user_id, "‚ùå O Ä·¥Ö·¥á Ä …¥·¥è·¥õ “ì·¥è·¥ú…¥·¥Ö ·¥è Ä  è·¥è·¥ú ·¥Ö·¥è…¥'·¥õ  ú·¥Ä·¥†·¥á ·¥ò·¥á Ä·¥ç…™ss…™·¥è…¥ ·¥õ·¥è ·¥†…™·¥á·¥° …™·¥õ!")
        del user_states[user_id]
        return
    
    status_emoji = "üü¢" if order["status"] == "Completed" else "üü°" if order["status"] == "Processing" else "üî¥"
    
    text = f"""
üîç O Ä·¥Ö·¥á Ä T Ä·¥Ä·¥Ñ·¥ã…™…¥…¢

üÜî O Ä·¥Ö·¥á Ä ID: {order['order_id']}
üì¶ S·¥á Ä·¥†…™·¥Ñ·¥á: {order['service_name']}
üîó L…™…¥·¥ã: {order['link']}
üî¢ Q·¥ú·¥Ä…¥·¥õ…™·¥õ è: {order['quantity']}
üí∞ C·¥ès·¥õ: {order['cost_points']} ·¥ò·¥è…™…¥·¥õs
üìä S·¥õ·¥Ä·¥õ·¥ús: {status_emoji} {order['status']}
‚è∞ C Ä·¥á·¥Ä·¥õ·¥á·¥Ö: {order['created_at'].strftime('%Y-%m-%d %H:%M')}
‚è∞ L·¥Äs·¥õ ·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥á: {order['last_check'].strftime('%Y-%m-%d %H:%M')}
    """
    
    bot.send_message(user_id, text, reply_markup=main_menu_keyboard())
    del user_states[user_id]

# Message handlers for conversation flows
@bot.message_handler(func=lambda message: True)
def handle_all_messages(message):
    """Handle all messages for conversation flows"""
    user_id = message.chat.id
    
    # Check if user is banned
    user = users_collection.find_one({"user_id": user_id})
    if user and user.get("banned"):
        return
    
    # Handle admin conversation flows
    if user_id in admin_states:
        state = admin_states[user_id]
        
        if state.get("action") == "adding_service":
            if state.get("step") == "category":
                process_add_service_category(message)
            elif state.get("step") == "name":
                process_add_service_name(message)
            elif state.get("step") == "description":
                process_add_service_description(message)
            elif state.get("step") == "min_quantity":
                process_add_service_min_quantity(message)
            elif state.get("step") == "max_quantity":
                process_add_service_max_quantity(message)
            elif state.get("step") == "unit":
                process_add_service_unit(message)
            elif state.get("step") == "price":
                process_add_service_price(message)
            elif state.get("step") == "service_id":
                process_add_service_id(message)
        
        elif state.get("action") == "editing_service" and state.get("step") == "new_value":
            process_edit_service_value(message)
        
        elif state.get("action") == "broadcasting" and state.get("step") == "message":
            process_broadcast_message(message)
        
        elif state.get("action") == "adding_balance":
            if state.get("step") == "user_id":
                process_add_balance_user_id(message)
            elif state.get("step") == "amount":
                process_add_balance_amount(message)
        
        elif state.get("action") == "deducting_balance":
            if state.get("step") == "user_id":
                process_deduct_balance_user_id(message)
            elif state.get("step") == "amount":
                process_deduct_balance_amount(message)
        
        elif state.get("action") == "banning_user" and state.get("step") == "user_id":
            process_ban_user(message)
        
        elif state.get("action") == "unbanning_user" and state.get("step") == "user_id":
            process_unban_user(message)
    
    # Handle user conversation flows
    elif user_id in user_states:
        state = user_states[user_id]
        
        if state.get("action") == "ordering" and state.get("step") == "quantity":
            process_order_quantity(message)
        
        elif state.get("action") == "tracking_order" and state.get("step") == "order_id":
            process_track_order(message)

# Error handler
@bot.message_handler(func=lambda message: True, content_types=['audio', 'video', 'document', 'sticker', 'photo'])
def handle_non_text_messages(message):
    """Handle non-text messages"""
    bot.reply_to(message, "‚ùå I ·¥è…¥ ü è ·¥ú…¥·¥Ö·¥á Äs·¥õ·¥Ä…¥·¥Ö ·¥õ·¥áx·¥õ ·¥ç·¥áss·¥Ä…¢·¥ás. P ü·¥á·¥Äs·¥á ·¥ús·¥á ·¥õ ú·¥á  ô·¥ú·¥õ·¥õ·¥è…¥s ·¥ò Ä·¥è·¥†…™·¥Ö·¥á·¥Ö.")

# Start the bot with proper error handling
def start_bot():
    """Start the bot with error handling and recovery"""
    print("ü§ñ Starting SMM Bot...")
    
    while True:
        try:
            print("üîÑ Starting polling...")
            bot.infinity_polling(timeout=60, long_polling_timeout=60)
            
        except Exception as e:
            print(f"‚ùå Bot error: {e}")
            print("üîÑ Restarting bot in 10 seconds...")
            time.sleep(10)

if __name__ == "__main__":
    # Ensure only one instance runs
    print("üöÄ SMM Bot Starting...")
    print("‚úÖ MongoDB Connected")
    print("‚úÖ Bot Initialized")
    print("‚úÖ Services Loaded")
    
    # Start the bot
    start_bot()
