import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardRemove
import threading
import time
from datetime import datetime

from config import Config
from database import db
from utils import style_text, get_categories, get_services_by_category, validate_quantity
from payments import PaymentSystem, create_deposit_message
from orders import OrderSystem, calculate_order_cost, create_order_summary

# Initialize bot
bot = telebot.TeleBot(Config.BOT_TOKEN)

# Store temporary user data
user_states = {}
payment_sessions = {}

class UserState:
    WAITING_DEPOSIT_AMOUNT = "waiting_deposit_amount"
    WAITING_ORDER_LINK = "waiting_order_link"
    WAITING_ORDER_QUANTITY = "waiting_order_quantity"
    WAITING_TRACK_ORDER = "waiting_track_order"

def is_user_joined_channel(user_id):
    """C ú·¥á·¥Ñ·¥ã …™“ì ·¥ús·¥á Ä  ú·¥Äs ·¥ä·¥è…™…¥·¥á·¥Ö ·¥Ñ ú·¥Ä…¥…¥·¥á ü"""
    try:
        member = bot.get_chat_member(f"@{Config.CHANNEL_ID}", user_id)
        return member.status in ['member', 'administrator', 'creator']
    except:
        return True  # If check fails, assume joined

def is_admin(user_id):
    """C ú·¥á·¥Ñ·¥ã …™“ì ·¥ús·¥á Ä …™s ·¥Ä·¥Ö·¥ç…™…¥"""
    return user_id in Config.ADMIN_IDS

def main_menu():
    """M·¥Ä…™…¥ ·¥ç·¥á…¥·¥ú …™…¥ ü…™…¥·¥á ·¥ã·¥á è ô·¥è·¥Ä Ä·¥Ö"""
    keyboard = InlineKeyboardMarkup()
    
    keyboard.row(
        InlineKeyboardButton(style_text("üí∞ D·¥á·¥ò·¥ès…™·¥õ"), callback_data="deposit"),
        InlineKeyboardButton(style_text("üõí N·¥á·¥° O Ä·¥Ö·¥á Ä"), callback_data="new_order")
    )
    
    keyboard.row(
        InlineKeyboardButton(style_text("üìã T Ä·¥Ä·¥Ñ·¥ã O Ä·¥Ö·¥á Ä"), callback_data="track_order"),
        InlineKeyboardButton(style_text("üë§ A·¥Ñ·¥Ñ·¥è·¥ú…¥·¥õ"), callback_data="account")
    )
    
    keyboard.row(
        InlineKeyboardButton(style_text("üë• R·¥á“ì·¥á Ä"), callback_data="refer"),
        InlineKeyboardButton(style_text("üìä S·¥õ·¥Ä·¥õs"), callback_data="stats")
    )
    
    keyboard.row(
        InlineKeyboardButton(style_text("‚ÑπÔ∏è S·¥ú·¥ò·¥ò·¥è Ä·¥õ"), callback_data="support")
    )
    
    keyboard.row(
        InlineKeyboardButton(style_text("H·¥è·¥° T·¥è Us·¥á"), callback_data="how_to_use"),
        InlineKeyboardButton(style_text("R·¥ás·¥õ·¥Ä Ä·¥õ"), callback_data="restart")
    )
    
    return keyboard

def channel_join_keyboard():
    """C ú·¥Ä…¥…¥·¥á ü ·¥ä·¥è…™…¥ ·¥ã·¥á è ô·¥è·¥Ä Ä·¥Ö"""
    keyboard = InlineKeyboardMarkup()
    keyboard.row(
        InlineKeyboardButton(style_text("‚úÖ J·¥è…™…¥ C ú·¥Ä…¥…¥·¥á ü"), url=f"https://t.me/{Config.CHANNEL_ID}"),
        InlineKeyboardButton(style_text("üîÉ C ú·¥á·¥Ñ·¥ã"), callback_data="check_join")
    )
    return keyboard

def back_button():
    """B·¥Ä·¥Ñ·¥ã  ô·¥ú·¥õ·¥õ·¥è…¥"""
    keyboard = InlineKeyboardMarkup()
    keyboard.row(InlineKeyboardButton(style_text("B·¥Ä·¥Ñ·¥ã üîô"), callback_data="main_menu"))
    return keyboard

def paid_button(utr):
    """P·¥Ä…™·¥Ö  ô·¥ú·¥õ·¥õ·¥è…¥ ·¥°…™·¥õ ú UTR"""
    keyboard = InlineKeyboardMarkup()
    keyboard.row(
        InlineKeyboardButton(style_text("ùó£ùóÆùó∂ùó± ‚úÖ"), callback_data=f"paid_{utr}"),
        InlineKeyboardButton(style_text("B·¥Ä·¥Ñ·¥ã üîô"), callback_data="main_menu")
    )
    return keyboard

def support_keyboard():
    """S·¥ú·¥ò·¥ò·¥è Ä·¥õ ·¥ã·¥á è ô·¥è·¥Ä Ä·¥Ö"""
    keyboard = InlineKeyboardMarkup()
    keyboard.row(
        InlineKeyboardButton(style_text("C·¥è…¥·¥õ·¥Ä·¥Ñ·¥õ Us"), url=Config.SUPPORT_WHATSAPP),
        InlineKeyboardButton(style_text("B·¥Ä·¥Ñ·¥ã"), callback_data="main_menu")
    )
    return keyboard

@bot.message_handler(commands=['start'])
def start_command(message):
    """S·¥õ·¥Ä Ä·¥õ ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö ·¥°…™·¥õ ú ·¥Ñ ú·¥Ä…¥…¥·¥á ü ·¥Ñ ú·¥á·¥Ñ·¥ã"""
    user_id = message.from_user.id
    
    # Check for referral
    if len(message.text.split()) > 1:
        ref_code = message.text.split()[1]
        if ref_code.startswith('ref_'):
            referrer_id = int(ref_code[4:])
            user = db.get_user(user_id)
            if user['referred_by'] is None and referrer_id != user_id:
                db.update_user(user_id, {'referred_by': referrer_id})
                
                # Add bonus to referrer if new user hasn't claimed yet
                referrer = db.get_user(referrer_id)
                if not user.get('referral_bonus_claimed', False):
                    db.update_user(referrer_id, {
                        'balance': referrer['balance'] + Config.REFERRAL_BONUS,
                        'referral_bonus_claimed': True
                    })
                    bot.send_message(referrer_id, style_text(f"""
üéâ R·¥á“ì·¥á Ä Ä·¥Ä ü B·¥è…¥·¥ús!

Y·¥è·¥ú  Ä·¥á“ì·¥á Ä Ä·¥á·¥Ö ·¥Ä …¥·¥á·¥° ·¥ús·¥á Ä! 
+{Config.REFERRAL_BONUS} ·¥ò·¥è…™…¥·¥õs ·¥Ä·¥Ö·¥Ö·¥á·¥Ö ·¥õ·¥è  è·¥è·¥ú Ä ·¥Ä·¥Ñ·¥Ñ·¥è·¥ú…¥·¥õ.
"""))
    
    if not is_user_joined_channel(user_id):
        bot.send_message(
            message.chat.id,
            style_text("P ü·¥á·¥Äs·¥á ·¥ä·¥è…™…¥ ·¥è·¥ú Ä ·¥Ñ ú·¥Ä…¥…¥·¥á ü ·¥õ·¥è ·¥ús·¥á ·¥õ ú·¥á  ô·¥è·¥õ:"),
            reply_markup=channel_join_keyboard()
        )
        return
    
    welcome_text = style_text("""
ü§ñ W·¥á ü·¥Ñ·¥è·¥ç·¥á ·¥õ·¥è S·¥è·¥Ñ…™·¥Ä ü M·¥á·¥Ö…™·¥Ä M·¥Ä Ä·¥ã·¥á·¥õ…™…¥…¢ B·¥è·¥õ!

C ú·¥è·¥ès·¥á ·¥Ä…¥ ·¥è·¥ò·¥õ…™·¥è…¥ “ì Ä·¥è·¥ç ·¥õ ú·¥á ·¥ç·¥á…¥·¥ú  ô·¥á ü·¥è·¥°:

üí∞ D·¥á·¥ò·¥ès…™·¥õ - A·¥Ö·¥Ö “ì·¥ú…¥·¥Ös ·¥õ·¥è  è·¥è·¥ú Ä ·¥Ä·¥Ñ·¥Ñ·¥è·¥ú…¥·¥õ
üõí N·¥á·¥° O Ä·¥Ö·¥á Ä - P ü·¥Ä·¥Ñ·¥á ·¥Ä …¥·¥á·¥° s·¥á Ä·¥†…™·¥Ñ·¥á ·¥è Ä·¥Ö·¥á Ä
üìã T Ä·¥Ä·¥Ñ·¥ã O Ä·¥Ö·¥á Ä - C ú·¥á·¥Ñ·¥ã ·¥è Ä·¥Ö·¥á Ä s·¥õ·¥Ä·¥õ·¥ús
üë§ A·¥Ñ·¥Ñ·¥è·¥ú…¥·¥õ - V…™·¥á·¥°  è·¥è·¥ú Ä ·¥Ä·¥Ñ·¥Ñ·¥è·¥ú…¥·¥õ …™…¥“ì·¥è
üë• R·¥á“ì·¥á Ä - R·¥á“ì·¥á Ä “ì Ä…™·¥á…¥·¥Ös & ·¥á·¥Ä Ä…¥  ô·¥è…¥·¥ús·¥ás
üìä S·¥õ·¥Ä·¥õs - V…™·¥á·¥°  ô·¥è·¥õ s·¥õ·¥Ä·¥õ…™s·¥õ…™·¥Ñs
‚ÑπÔ∏è S·¥ú·¥ò·¥ò·¥è Ä·¥õ - G·¥á·¥õ  ú·¥á ü·¥ò & s·¥ú·¥ò·¥ò·¥è Ä·¥õ
""")
    
    bot.send_message(message.chat.id, welcome_text, reply_markup=main_menu())

@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):
    """H·¥Ä…¥·¥Ö ü·¥á ·¥Ä ü ü …™…¥ ü…™…¥·¥á «´·¥ú·¥á Ä…™·¥ás"""
    user_id = call.from_user.id
    chat_id = call.message.chat.id
    message_id = call.message.message_id
    
    if call.data == "check_join":
        if is_user_joined_channel(user_id):
            bot.edit_message_text(
                style_text("T ú·¥Ä…¥·¥ã  è·¥è·¥ú! N·¥è·¥°  è·¥è·¥ú ·¥Ñ·¥Ä…¥ ·¥ús·¥á ·¥õ ú·¥á  ô·¥è·¥õ."),
                chat_id, message_id,
                reply_markup=main_menu()
            )
        else:
            bot.answer_callback_query(call.id, style_text("P ü·¥á·¥Äs·¥á ·¥ä·¥è…™…¥ ·¥õ ú·¥á ·¥Ñ ú·¥Ä…¥…¥·¥á ü “ì…™ Äs·¥õ!"), show_alert=True)
    
    elif call.data == "main_menu":
        bot.edit_message_text(
            style_text("M·¥Ä…™…¥ M·¥á…¥·¥ú:"),
            chat_id, message_id,
            reply_markup=main_menu()
        )
    
    elif call.data == "deposit":
        user_states[user_id] = UserState.WAITING_DEPOSIT_AMOUNT
        bot.edit_message_text(
            style_text("üí∞ D·¥á·¥ò·¥ès…™·¥õ\n\nE…¥·¥õ·¥á Ä ·¥õ ú·¥á ·¥Ä·¥ç·¥è·¥ú…¥·¥õ …™…¥  Ä·¥ú·¥ò·¥á·¥ás (‚Çπ):"),
            chat_id, message_id,
            reply_markup=back_button()
        )
    
    elif call.data == "new_order":
        if not db.bot_enabled:
            bot.answer_callback_query(call.id, style_text("B·¥è·¥õ …™s ·¥õ·¥á·¥ç·¥ò·¥è Ä·¥Ä Ä…™ ü è ·¥Ö…™s·¥Ä ô ü·¥á·¥Ö  ô è ·¥Ä·¥Ö·¥ç…™…¥!"), show_alert=True)
            return
        
        categories = get_categories(Config.SERVICES)
        keyboard = InlineKeyboardMarkup()
        
        for category in categories:
            keyboard.row(InlineKeyboardButton(category, callback_data=f"category_{category}"))
        
        keyboard.row(InlineKeyboardButton(style_text("B·¥Ä·¥Ñ·¥ã üîô"), callback_data="main_menu"))
        
        bot.edit_message_text(
            style_text("üõí N·¥á·¥° O Ä·¥Ö·¥á Ä\n\nS·¥á ü·¥á·¥Ñ·¥õ ·¥Ä ·¥Ñ·¥Ä·¥õ·¥á…¢·¥è Ä è:"),
            chat_id, message_id,
            reply_markup=keyboard
        )
    
    elif call.data.startswith("category_"):
        category = call.data.replace("category_", "")
        services = get_services_by_category(category, Config.SERVICES)
        
        keyboard = InlineKeyboardMarkup()
        for service in services:
            keyboard.row(InlineKeyboardButton(
                f"{service['name']} - ‚Çπ{service['price']/100:.2f}/{service['unit']}",
                callback_data=f"service_{service['id']}"
            ))
        
        keyboard.row(InlineKeyboardButton(style_text("B·¥Ä·¥Ñ·¥ã üîô"), callback_data="new_order"))
        
        bot.edit_message_text(
            style_text(f"üõí {category}\n\nS·¥á ü·¥á·¥Ñ·¥õ ·¥Ä s·¥á Ä·¥†…™·¥Ñ·¥á:"),
            chat_id, message_id,
            reply_markup=keyboard
        )
    
    elif call.data.startswith("service_"):
        service_id = int(call.data.replace("service_", ""))
        service = next((s for s in Config.SERVICES if s['id'] == service_id), None)
        
        if service:
            user_states[user_id] = {
                'state': UserState.WAITING_ORDER_LINK,
                'service': service
            }
            
            bot.edit_message_text(
                style_text(f"""
üõí {service['name']}

{service['description']}

M…™…¥: {service['min']}
M·¥Äx: {service['max']}
U…¥…™·¥õ: {service['unit']}
P Ä…™·¥Ñ·¥á: ‚Çπ{service['price']/100:.2f} ·¥ò·¥á Ä {service['unit']}

P ü·¥á·¥Äs·¥á s·¥á…¥·¥Ö ·¥õ ú·¥á  ü…™…¥·¥ã:
"""),
                chat_id, message_id,
                reply_markup=back_button()
            )
    
    elif call.data == "track_order":
        user_states[user_id] = UserState.WAITING_TRACK_ORDER
        bot.edit_message_text(
            style_text("üìã T Ä·¥Ä·¥Ñ·¥ã O Ä·¥Ö·¥á Ä\n\nP ü·¥á·¥Äs·¥á ·¥á…¥·¥õ·¥á Ä  è·¥è·¥ú Ä O Ä·¥Ö·¥á Ä ID:"),
            chat_id, message_id,
            reply_markup=back_button()
        )
    
    elif call.data == "account":
        user = db.get_user(user_id)
        account_text = style_text(f"""
üë§ A·¥Ñ·¥Ñ·¥è·¥ú…¥·¥õ I…¥“ì·¥è

üÜî Us·¥á Ä ID: {user_id}
üí∞ B·¥Ä ü·¥Ä…¥·¥Ñ·¥á: {user['balance']} ·¥ò·¥è…™…¥·¥õs (‚Çπ{user['balance']/100:.2f})
üè¶ T·¥è·¥õ·¥Ä ü D·¥á·¥ò·¥ès…™·¥õs: ‚Çπ{user['total_deposits']:.2f}
üí≥ T·¥è·¥õ·¥Ä ü S·¥ò·¥á…¥·¥õ: {user['total_spent']} ·¥ò·¥è…™…¥·¥õs
üìÖ J·¥è…™…¥ D·¥Ä·¥õ·¥á: {user['join_date']}
""")
        bot.edit_message_text(account_text, chat_id, message_id, reply_markup=back_button())
    
    elif call.data == "refer":
        user = db.get_user(user_id)
        ref_link = f"https://t.me/{Config.BOT_USERNAME}?start=ref_{user_id}"
        
        ref_text = style_text(f"""
üë• R·¥á“ì·¥á Ä & E·¥Ä Ä…¥

Y·¥è·¥ú Ä  Ä·¥á“ì·¥á Ä Ä·¥Ä ü  ü…™…¥·¥ã:
{ref_link}

üîπ R·¥á“ì·¥á Ä  è·¥è·¥ú Ä “ì Ä…™·¥á…¥·¥Ös ·¥Ä…¥·¥Ö …¢·¥á·¥õ {Config.REFERRAL_BONUS} ·¥ò·¥è…™…¥·¥õs “ì·¥è Ä ·¥á·¥Ä·¥Ñ ú …¥·¥á·¥° ·¥ús·¥á Ä!
üîπ T ú·¥á è ·¥ç·¥ús·¥õ ·¥ús·¥á  è·¥è·¥ú Ä  ü…™…¥·¥ã ·¥õ·¥è ·¥ä·¥è…™…¥
üîπ B·¥è…¥·¥ús ·¥°…™ ü ü  ô·¥á ·¥Ñ Ä·¥á·¥Ö…™·¥õ·¥á·¥Ö ·¥è…¥·¥Ñ·¥á ·¥õ ú·¥á è ·¥ä·¥è…™…¥

R·¥á“ì·¥á Ä Ä·¥á·¥Ö  ô è: {user['referred_by'] or 'N·¥è·¥è…¥·¥á'}
""")
        bot.edit_message_text(ref_text, chat_id, message_id, reply_markup=back_button())
    
    elif call.data == "stats":
        stats = db.get_stats()
        user = db.get_user(user_id)
        
        stats_text = style_text(f"""
üìä B·¥è·¥õ S·¥õ·¥Ä·¥õ…™s·¥õ…™·¥Ñs

üë• T·¥è·¥õ·¥Ä ü Us·¥á Äs: {stats['total_users']}
üõí T·¥è·¥õ·¥Ä ü O Ä·¥Ö·¥á Äs: {stats['total_orders']}
üí∞ T·¥è·¥õ·¥Ä ü D·¥á·¥ò·¥ès…™·¥õs: ‚Çπ{stats['total_deposits']:.2f}

üë§ Y·¥è·¥ú Ä B·¥Ä ü·¥Ä…¥·¥Ñ·¥á: {user['balance']} ·¥ò·¥è…™…¥·¥õs
üë§ Y·¥è·¥ú Ä O Ä·¥Ö·¥á Äs: {len(db.get_user_orders(user_id))}
""")
        bot.edit_message_text(stats_text, chat_id, message_id, reply_markup=back_button())
    
    elif call.data == "support":
        bot.delete_message(chat_id, message_id)
        bot.send_photo(
            chat_id,
            photo="https://via.placeholder.com/500x300/0088cc/ffffff?text=Support",  # Replace with actual support image
            caption=style_text("""
üìû C·¥è…¥·¥õ·¥Ä·¥Ñ·¥õ O·¥ú Ä S·¥ú·¥ò·¥ò·¥è Ä·¥õ T·¥á·¥Ä·¥ç

W·¥á' Ä·¥á  ú·¥á Ä·¥á ·¥õ·¥è  ú·¥á ü·¥ò  è·¥è·¥ú! C ü…™·¥Ñ·¥ã ·¥õ ú·¥á  ô·¥ú·¥õ·¥õ·¥è…¥  ô·¥á ü·¥è·¥° ·¥õ·¥è ·¥Ñ·¥è…¥·¥õ·¥Ä·¥Ñ·¥õ ·¥ús ·¥è…¥ W ú·¥Ä·¥õsA·¥ò·¥ò.

O·¥ú Ä s·¥ú·¥ò·¥ò·¥è Ä·¥õ  ú·¥è·¥ú Äs:
‚Ä¢ M·¥è…¥ - S·¥ú…¥: 24/7
‚Ä¢ R·¥ás·¥ò·¥è…¥s·¥á ·¥õ…™·¥ç·¥á: W…™·¥õ ú…™…¥ 15 ·¥ç…™…¥·¥ú·¥õ·¥ás
"""),
            reply_markup=support_keyboard()
        )
    
    elif call.data == "how_to_use":
        how_to_text = style_text("""
üìñ H·¥è·¥° T·¥è Us·¥á

1Ô∏è‚É£ üí∞ D·¥á·¥ò·¥ès…™·¥õ
   ‚Ä¢ C ü…™·¥Ñ·¥ã ·¥è…¥ D·¥á·¥ò·¥ès…™·¥õ
   ‚Ä¢ E…¥·¥õ·¥á Ä ·¥Ä·¥ç·¥è·¥ú…¥·¥õ …™…¥ ‚Çπ
   ‚Ä¢ S·¥Ñ·¥Ä…¥ QR ·¥Ñ·¥è·¥Ö·¥á ·¥è Ä ·¥ús·¥á UPI  ü…™…¥·¥ã
   ‚Ä¢ C ü…™·¥Ñ·¥è·¥ã "P·¥Ä…™·¥Ö ‚úÖ" ·¥Ä“ì·¥õ·¥á Ä ·¥ò·¥Ä è·¥ç·¥á…¥·¥õ

2Ô∏è‚É£ üõí N·¥á·¥° O Ä·¥Ö·¥á Ä
   ‚Ä¢ S·¥á ü·¥á·¥Ñ·¥õ ·¥Ñ·¥Ä·¥õ·¥á…¢·¥è Ä è
   ‚Ä¢ C ú·¥è·¥ès·¥á s·¥á Ä·¥†…™·¥Ñ·¥á
   ‚Ä¢ S·¥á…¥·¥Ö  ü…™…¥·¥ã
   ‚Ä¢ E…¥·¥õ·¥á Ä «´·¥ú·¥Ä…¥·¥õ…™·¥õ è
   ‚Ä¢ O Ä·¥Ö·¥á Ä ·¥°…™ ü ü  ô·¥á ·¥ò ü·¥Ä·¥Ñ·¥á·¥Ö

3Ô∏è‚É£ üìã T Ä·¥Ä·¥Ñ·¥ã O Ä·¥Ö·¥á Ä
   ‚Ä¢ E…¥·¥õ·¥á Ä ·¥è Ä·¥Ö·¥á Ä ID
   ‚Ä¢ V…™·¥á·¥° ·¥Ñ·¥ú Ä Ä·¥á…¥·¥õ s·¥õ·¥Ä·¥õ·¥ús

N·¥á·¥á·¥Ö  ú·¥á ü·¥ò? C·¥è…¥·¥õ·¥Ä·¥Ñ·¥õ s·¥ú·¥ò·¥ò·¥è Ä·¥õ!
""")
        bot.edit_message_text(how_to_text, chat_id, message_id, reply_markup=back_button())
    
    elif call.data == "restart":
        bot.delete_message(chat_id, message_id)
        start_command(call.message)
    
    elif call.data.startswith("paid_"):
        utr = call.data.replace("paid_", "")
        
        if utr in payment_sessions:
            session = payment_sessions[utr]
            amount = session['amount']
            user_id = session['user_id']
            
            # Verify payment
            if PaymentSystem.verify_payment(utr, amount):
                # Payment successful
                points = amount * 100  # Convert ‚Çπ to points
                user = db.get_user(user_id)
                
                # Update user balance
                db.update_user(user_id, {
                    'balance': user['balance'] + points,
                    'total_deposits': user['total_deposits'] + amount
                })
                
                # Record deposit
                db.add_deposit({
                    'user_id': user_id,
                    'amount': amount,
                    'utr': utr,
                    'points': points,
                    'status': 'C·¥è·¥ç·¥ò ü·¥á·¥õ·¥á·¥Ö'
                })
                
                # Notify user
                bot.edit_message_text(
                    style_text(f"""
‚úÖ P·¥Ä è·¥ç·¥á…¥·¥õ S·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü!

A·¥ç·¥è·¥ú…¥·¥õ: ‚Çπ{amount}
P·¥è…™…¥·¥õs ·¥Ä·¥Ö·¥Ö·¥á·¥Ö: {points}
N·¥á·¥° B·¥Ä ü·¥Ä…¥·¥Ñ·¥á: {user['balance'] + points} ·¥ò·¥è…™…¥·¥õs

T ú·¥Ä…¥·¥ã  è·¥è·¥ú “ì·¥è Ä  è·¥è·¥ú Ä ·¥Ö·¥á·¥ò·¥ès…™·¥õ!
"""),
                    chat_id, message_id,
                    reply_markup=back_button()
                )
                
                # Notify admin
                for admin_id in Config.ADMIN_IDS:
                    try:
                        bot.send_message(
                            admin_id,
                            style_text(f"""
üí∞ N·¥á·¥° D·¥á·¥ò·¥ès…™·¥õ!

Us·¥á Ä: {user_id}
A·¥ç·¥è·¥ú…¥·¥õ: ‚Çπ{amount}
UTR: {utr}
P·¥è…™…¥·¥õs: {points}
""")
                        )
                    except:
                        pass
                
                # Cleanup session
                del payment_sessions[utr]
                
            else:
                bot.answer_callback_query(call.id, style_text("‚ùå P ü·¥á·¥Äs·¥á ·¥ò·¥Ä è “ì…™ Äs·¥õ!"), show_alert=True)
        else:
            bot.answer_callback_query(call.id, style_text("‚ùå S·¥áss…™·¥è…¥ ·¥áx·¥ò…™ Ä·¥á·¥Ö!"), show_alert=True)

@bot.message_handler(func=lambda message: True)
def handle_messages(message):
    """H·¥Ä…¥·¥Ö ü·¥á ·¥Ä ü ü ·¥õ·¥áx·¥õ ·¥ç·¥áss·¥Ä…¢·¥ás"""
    user_id = message.from_user.id
    chat_id = message.chat.id
    
    if user_id not in user_states:
        return
    
    state = user_states[user_id]
    
    if state == UserState.WAITING_DEPOSIT_AMOUNT:
        try:
            amount = float(message.text)
            if amount < 10:
                bot.send_message(chat_id, style_text("M…™…¥…™·¥ç·¥ú·¥ç ·¥Ö·¥á·¥ò·¥ès…™·¥õ …™s ‚Çπ10!"), reply_markup=back_button())
                return
            
            # Generate UTR and payment details
            utr = generate_utr()
            upi_link = PaymentSystem.generate_upi_link(amount, utr)
            qr_image = PaymentSystem.generate_qr_code(upi_link)
            
            # Store payment session
            payment_sessions[utr] = {
                'user_id': user_id,
                'amount': amount,
                'created_at': datetime.now()
            }
            
            # Send QR code and payment details
            bot.send_photo(
                chat_id,
                photo=qr_image,
                caption=style_text(f"""
üí∞ D·¥á·¥ò·¥ès…™·¥õ R·¥á«´·¥ú·¥ás·¥õ

A·¥ç·¥è·¥ú…¥·¥õ: ‚Çπ{amount}
UTR: {utr}

S·¥Ñ·¥Ä…¥ ·¥õ ú·¥á QR ·¥Ñ·¥è·¥Ö·¥á ·¥è Ä ·¥ús·¥á ·¥ú·¥ò…™  ü…™…¥·¥ã ·¥õ·¥è ·¥ò·¥Ä è.

A“ì·¥õ·¥á Ä ·¥ò·¥Ä è·¥ç·¥á…¥·¥õ, ·¥Ñ ü…™·¥Ñ·¥ã "P·¥Ä…™·¥Ö ‚úÖ"  ô·¥ú·¥õ·¥õ·¥è…¥.
"""),
                reply_markup=paid_button(utr)
            )
            
            del user_states[user_id]
            
        except ValueError:
            bot.send_message(chat_id, style_text("P ü·¥á·¥Äs·¥á ·¥á…¥·¥õ·¥á Ä ·¥Ä ·¥†·¥Ä ü…™·¥Ö ·¥Ä·¥ç·¥è·¥ú…¥·¥õ!"), reply_markup=back_button())
    
    elif isinstance(state, dict) and state.get('state') == UserState.WAITING_ORDER_LINK:
        link = message.text.strip()
        service = state['service']
        
        user_states[user_id] = {
            'state': UserState.WAITING_ORDER_QUANTITY,
            'service': service,
            'link': link
        }
        
        bot.send_message(
            chat_id,
            style_text(f"""
üõí {service['name']}

L…™…¥·¥ã: {link}

N·¥è·¥° ·¥á…¥·¥õ·¥á Ä ·¥õ ú·¥á «´·¥ú·¥Ä…¥·¥õ…™·¥õ è:

M…™…¥: {service['min']}
M·¥Äx: {service['max']}
U…¥…™·¥õ: {service['unit']}
"""),
            reply_markup=back_button()
        )
    
    elif isinstance(state, dict) and state.get('state') == UserState.WAITING_ORDER_QUANTITY:
        try:
            quantity = int(message.text)
            service = state['service']
            link = state['link']
            
            # Validate quantity
            is_valid, error_msg = validate_quantity(quantity, service)
            if not is_valid:
                bot.send_message(chat_id, error_msg, reply_markup=back_button())
                return
            
            # Calculate cost
            cost = calculate_order_cost(quantity, service)
            user = db.get_user(user_id)
            
            # Check balance
            if user['balance'] < cost:
                bot.send_message(
                    chat_id,
                    style_text(f"""
‚ùå I…¥s·¥ú“ì“ì…™·¥Ñ…™·¥á…¥·¥õ B·¥Ä ü·¥Ä…¥·¥Ñ·¥á!

R·¥á«´·¥ú…™ Ä·¥á·¥Ö: {cost} ·¥ò·¥è…™…¥·¥õs
Y·¥è·¥ú Ä  ô·¥Ä ü·¥Ä…¥·¥Ñ·¥á: {user['balance']} ·¥ò·¥è…™…¥·¥õs

P ü·¥á·¥Äs·¥á ·¥Ö·¥á·¥ò·¥ès…™·¥õ “ì·¥ú…¥·¥Ös “ì…™ Äs·¥õ.
"""),
                    reply_markup=back_button()
                )
                del user_states[user_id]
                return
            
            # Place order with SMM API
            api_result = OrderSystem.place_smm_order(service['id'], link, quantity)
            
            if api_result.get('status') == 'success':
                # Deduct balance
                db.update_user(user_id, {
                    'balance': user['balance'] - cost,
                    'total_spent': user['total_spent'] + cost
                })
                
                # Save order
                order_data = {
                    'user_id': user_id,
                    'service_id': service['id'],
                    'service_name': service['name'],
                    'link': link,
                    'quantity': quantity,
                    'cost': cost,
                    'api_order_id': api_result.get('order', ''),
                    'status': 'P·¥á…¥·¥Ö…™…¥…¢'
                }
                
                order_id = db.add_order(order_data)
                
                # Send order confirmation
                order_summary = create_order_summary(
                    {**order_data, 'order_id': order_id},
                    service,
                    cost
                )
                
                bot.send_message(chat_id, order_summary, reply_markup=main_menu())
                
                # Notify admin
                for admin_id in Config.ADMIN_IDS:
                    try:
                        keyboard = InlineKeyboardMarkup()
                        keyboard.row(InlineKeyboardButton(
                            style_text("B·¥è·¥õ H·¥á Ä·¥á üà¥"), 
                            url=f"https://t.me/{Config.BOT_USERNAME}"
                        ))
                        
                        bot.send_message(
                            admin_id,
                            style_text(f"""
üõí N·¥á·¥° O Ä·¥Ö·¥á Ä!

Us·¥á Ä: {user_id}
S·¥á Ä·¥†…™·¥Ñ·¥á: {service['name']}
O Ä·¥Ö·¥á Ä ID: {order_id}
L…™…¥·¥ã: {link}
Q·¥ú·¥Ä…¥·¥õ…™·¥õ è: {quantity}
C·¥ès·¥õ: {cost} ·¥ò·¥è…™…¥·¥õs
"""),
                            reply_markup=keyboard
                        )
                    except:
                        pass
                
            else:
                bot.send_message(
                    chat_id,
                    style_text("‚ùå E Ä Ä·¥è Ä ·¥ò ü·¥Ä·¥Ñ…™…¥…¢ ·¥è Ä·¥Ö·¥á Ä! P ü·¥á·¥Äs·¥á ·¥õ Ä è ·¥Ä…¢·¥Ä…™…¥  ü·¥Ä·¥õ·¥á Ä."),
                    reply_markup=back_button()
                )
            
            del user_states[user_id]
            
        except ValueError:
            bot.send_message(chat_id, style_text("P ü·¥á·¥Äs·¥á ·¥á…¥·¥õ·¥á Ä ·¥Ä ·¥†·¥Ä ü…™·¥Ö «´·¥ú·¥Ä…¥·¥õ…™·¥õ è!"), reply_markup=back_button())
    
    elif state == UserState.WAITING_TRACK_ORDER:
        order_id = message.text.strip()
        order = db.get_order(order_id)
        
        if not order:
            bot.send_message(
                chat_id,
                style_text("‚ùå O Ä·¥Ö·¥á Ä …¥·¥è·¥õ “ì·¥è·¥ú…¥·¥Ö! P ü·¥á·¥Äs·¥á ·¥Ñ ú·¥á·¥Ñ·¥ã ·¥õ ú·¥á O Ä·¥Ö·¥á Ä ID."),
                reply_markup=back_button()
            )
            return
        
        # Get latest status from SMM API
        api_status = OrderSystem.get_order_status(order.get('api_order_id', ''))
        current_status = api_status.get('status', order['status'])
        
        # Update order status
        db.update_order(order_id, {'status': current_status})
        
        track_text = style_text(f"""
üìã O Ä·¥Ö·¥á Ä T Ä·¥Ä·¥Ñ·¥ã…™…¥…¢

S·¥á Ä·¥†…™·¥Ñ·¥á: {order['service_name']}
O Ä·¥Ö·¥á Ä ID: {order_id}
API O Ä·¥Ö·¥á Ä ID: {order.get('api_order_id', 'N/A')}
L…™…¥·¥ã: {order['link']}
Q·¥ú·¥Ä…¥·¥õ…™·¥õ è: {order['quantity']}
C·¥ès·¥õ: {order['cost']} ·¥ò·¥è…™…¥·¥õs
S·¥õ·¥Ä·¥õ·¥ús: {current_status}

U·¥ò·¥Ö·¥Ä·¥õ·¥á·¥Ö: {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}
""")
        
        bot.send_message(chat_id, track_text, reply_markup=main_menu())
        del user_states[user_id]

@bot.message_handler(commands=['admin'])
def admin_command(message):
    """A·¥Ö·¥ç…™…¥ ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö"""
    user_id = message.from_user.id
    
    if not is_admin(user_id):
        bot.send_message(message.chat.id, style_text("‚ùå A·¥Ñ·¥Ñ·¥áss ·¥Ö·¥á…¥…™·¥á·¥Ö!"))
        return
    
    keyboard = InlineKeyboardMarkup()
    keyboard.row(
        InlineKeyboardButton(style_text("üì¢ B Ä·¥è·¥Ä·¥Ö·¥Ñ·¥Äs·¥õ"), callback_data="admin_broadcast"),
        InlineKeyboardButton(style_text("üìä V…™·¥á·¥° S·¥õ·¥Ä·¥õs"), callback_data="admin_stats")
    )
    keyboard.row(
        InlineKeyboardButton(
            style_text("‚öôÔ∏è B·¥è·¥õ C·¥è…¥·¥õ Ä·¥è ü") + f" ({'ON' if db.bot_enabled else 'OFF'})",
            callback_data="admin_toggle_bot"
        )
    )
    
    bot.send_message(
        message.chat.id,
        style_text("üëë A·¥Ö·¥ç…™…¥ P·¥Ä…¥·¥á ü\n\nS·¥á ü·¥á·¥Ñ·¥õ ·¥Ä…¥ ·¥è·¥ò·¥õ…™·¥è…¥:"),
        reply_markup=keyboard
    )

# Background refund system
def refund_system():
    """B·¥Ä·¥Ñ·¥ã…¢ Ä·¥è·¥ú…¥·¥Ö  Ä·¥á“ì·¥ú…¥·¥Ö s ès·¥õ·¥á·¥ç"""
    while True:
        try:
            # Check orders every 30 minutes
            time.sleep(1800)  # 30 minutes
            
            for order in db.orders:
                if order['status'] in ['P·¥á…¥·¥Ö…™…¥…¢', 'I…¥ P Ä·¥è…¢ Ä·¥áss']:
                    # Get latest status from API
                    api_status = OrderSystem.get_order_status(order.get('api_order_id', ''))
                    current_status = api_status.get('status', order['status'])
                    
                    if current_status in ['C·¥Ä…¥·¥Ñ·¥á ü ü·¥á·¥Ö', 'P·¥Ä Ä·¥õ…™·¥Ä ü']:
                        # Calculate refund
                        user = db.get_user(order['user_id'])
                        refund_amount = order['cost']
                        
                        if current_status == 'P·¥Ä Ä·¥õ…™·¥Ä ü':
                            # Partial refund logic (simplified)
                            remains = int(api_status.get('remains', 0))
                            if remains > 0:
                                service = next((s for s in Config.SERVICES if s['id'] == order['service_id']), None)
                                if service:
                                    refund_amount = calculate_order_cost(remains, service)
                        
                        # Process refund
                        db.update_user(order['user_id'], {
                            'balance': user['balance'] + refund_amount
                        })
                        
                        db.update_order(order['order_id'], {
                            'status': current_status,
                            'refund_amount': refund_amount
                        })
                        
                        # Notify user
                        try:
                            bot.send_message(
                                order['user_id'],
                                style_text(f"""
üí∞ R·¥á“ì·¥ú…¥·¥Ö P Ä·¥è·¥Ñ·¥áss·¥á·¥Ö!

O Ä·¥Ö·¥á Ä ID: {order['order_id']}
S·¥õ·¥Ä·¥õ·¥ús: {current_status}
R·¥á“ì·¥ú…¥·¥Ö·¥á·¥Ö: {refund_amount} ·¥ò·¥è…™…¥·¥õs
N·¥á·¥° B·¥Ä ü·¥Ä…¥·¥Ñ·¥á: {user['balance'] + refund_amount} ·¥ò·¥è…™…¥·¥õs
""")
                            )
                        except:
                            pass
                        
                        # Notify admin
                        for admin_id in Config.ADMIN_IDS:
                            try:
                                bot.send_message(
                                    admin_id,
                                    style_text(f"""
üí∞ R·¥á“ì·¥ú…¥·¥Ö P Ä·¥è·¥Ñ·¥áss·¥á·¥Ö

Us·¥á Ä: {order['user_id']}
O Ä·¥Ö·¥á Ä: {order['order_id']}
S·¥á Ä·¥†…™·¥Ñ·¥á: {order['service_name']}
R·¥á“ì·¥ú…¥·¥Ö: {refund_amount} ·¥ò·¥è…™…¥·¥õs
S·¥õ·¥Ä·¥õ·¥ús: {current_status}
""")
                                )
                            except:
                                pass
        
        except Exception as e:
            print(f"Refund system error: {e}")

# Start refund system in background thread
refund_thread = threading.Thread(target=refund_system, daemon=True)
refund_thread.start()

if __name__ == "__main__":
    print(style_text("B·¥è·¥õ s·¥õ·¥Ä Ä·¥õ·¥á·¥Ö..."))
    bot.infinity_polling()
