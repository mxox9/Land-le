import os
import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
import pymongo
from pymongo import MongoClient
import requests
import time
from datetime import datetime, timedelta
import random
import urllib.parse
import threading
from bson import ObjectId
from dotenv import load_dotenv
import qrcode
import io
import base64
import re
import json
from urllib.parse import quote

# Load environment variables
load_dotenv()

# Configuration from environment variables
BOT_TOKEN = os.getenv('BOT_TOKEN', '8052955693:AAGoXnNg90jqvcC1X1fVo_qKV8Y0eHjDAZg')
MONGO_URI = os.getenv('MONGO_URI', 'mongodb+srv://saifulmolla79088179_db_user:17gNrX0pC3bPqVaG@cluster0.fusvqca.mongodb.net/test?retryWrites=true&w=majority&appName=Cluster0')
ADMIN_IDS = [int(x.strip()) for x in os.getenv('ADMIN_IDS', '6052975324').split(',')]
CHANNEL_ID = os.getenv('CHANNEL_ID', '@prooflelo1')
PROOF_CHANNEL = "https://t.me/prooflelo1"
BOT_USERNAME = "@prank_ox_bot"
SUPPORT_LINK = "https://t.me/your_support"
BOT_LINK = "https://t.me/your_bot"

# API Keys
AUTODEP_API_KEY = "LY81vEV7"
AUTODEP_MERCHANT_KEY = "WYcmQI71591891985230"
SMM_API_KEY = "c33fb3166621856879b2e486b99a30f0c442ac92"
SMM_API_URL = "https://smm-jupiter.com/api/v2"

# Initialize bot with better error handling
bot = telebot.TeleBot(BOT_TOKEN, threaded=True)

# MongoDB connection with improved error handling
try:
    client = MongoClient(MONGO_URI, serverSelectionTimeoutMS=5000)
    db = client.smm_bot
    users_collection = db.users
    orders_collection = db.orders
    deposits_collection = db.deposits
    admin_logs_collection = db.admin_logs
    user_sessions_collection = db.user_sessions
    # Test connection
    client.admin.command('ismaster')
    print("‚úÖ M·¥è…¥…¢·¥èDB ·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õ·¥á·¥Ö s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è")
except Exception as e:
    print(f"‚ùå M·¥è…¥…¢·¥èDB ·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õ…™·¥è…¥ ·¥á Ä Ä·¥è Ä: {e}")
    exit(1)

# Services data (categories and services) - HARDCODED like in bot (2).py
SERVICES = {
    "Instagram": {
        "üì∏ I…¥s·¥õ·¥Ä…¢ Ä·¥Ä·¥ç L…™·¥ã·¥ás": {"id": 101, "price": 30, "min": 100, "max": 10000, "unit": 1000},
        "üëÅ I…¥s·¥õ·¥Ä…¢ Ä·¥Ä·¥ç V…™·¥á·¥°s": {"id": 13685, "price": 50, "min": 100, "max": 50000, "unit": 1000},
        "üë§ I…¥s·¥õ·¥Ä…¢ Ä·¥Ä·¥ç F·¥è ü ü·¥è·¥°·¥á Äs": {"id": 103, "price": 80, "min": 100, "max": 10000, "unit": 1000}
    },
    "Facebook": {
        "üëç F·¥Ä·¥Ñ·¥á ô·¥è·¥è·¥ã L…™·¥ã·¥ás": {"id": 201, "price": 40, "min": 100, "max": 20000, "unit": 1000},
        "üëÅ F·¥Ä·¥Ñ·¥á ô·¥è·¥è·¥ã V…™·¥á·¥°s": {"id": 202, "price": 60, "min": 100, "max": 50000, "unit": 1000},
        "üë• F·¥Ä·¥Ñ·¥á ô·¥è·¥è·¥ã F·¥è ü ü·¥è·¥°·¥á Äs": {"id": 203, "price": 90, "min": 100, "max": 15000, "unit": 1000}
    },
    "YouTube": {
        "üëç Y·¥è·¥úT·¥ú ô·¥á L…™·¥ã·¥ás": {"id": 301, "price": 35, "min": 100, "max": 50000, "unit": 1000},
        "üëÅ Y·¥è·¥úT·¥ú ô·¥á V…™·¥á·¥°s": {"id": 302, "price": 45, "min": 100, "max": 100000, "unit": 1000},
        "üîî Y·¥è·¥úT·¥ú ô·¥á S·¥ú ôs·¥Ñ Ä…™ ô·¥á Äs": {"id": 303, "price": 120, "min": 100, "max": 10000, "unit": 1000}
    },
    "Telegram": {
        "üë• T·¥á ü·¥á…¢ Ä·¥Ä·¥ç M·¥á·¥ç ô·¥á Äs": {"id": 401, "price": 25, "min": 100, "max": 50000, "unit": 1000},
        "üëç T·¥á ü·¥á…¢ Ä·¥Ä·¥ç P·¥ès·¥õ L…™·¥ã·¥ás": {"id": 402, "price": 20, "min": 100, "max": 100000, "unit": 1000},
        "üëÅ T·¥á ü·¥á…¢ Ä·¥Ä·¥ç P·¥ès·¥õ V…™·¥á·¥°s": {"id": 403, "price": 15, "min": 100, "max": 100000, "unit": 1000}
    }
}

# User states for conversation flow
user_states = {}
admin_states = {}

# Image URLs
WELCOME_IMAGE = "https://t.me/prooflelo1/135?single"
SERVICE_IMAGE = "https://t.me/prooflelo1/138?single"
DEPOSIT_IMAGE = "https://t.me/prooflelo1/136?single"
ACCOUNT_IMAGE = "https://t.me/prooflelo1/137?single"
HISTORY_IMAGE = "https://t.me/prooflelo1/139?single"
REFER_IMAGE = "https://t.me/prooflelo1/17"
ADMIN_IMAGE = "https://t.me/prooflelo1/140?single"

# Text styling function
def style_text(text):
    """C·¥è…¥·¥†·¥á Ä·¥õ ·¥õ·¥áx·¥õ ·¥õ·¥è s·¥õ è ü…™s ú “ì·¥è Ä·¥ç·¥Ä·¥õ ·¥°…™·¥õ ú “ì…™ Äs·¥õ  ü·¥á·¥õ·¥õ·¥á Ä ·¥Ñ·¥Ä·¥ò…™·¥õ·¥Ä ü…™·¥¢·¥á·¥Ö ·¥Ä…¥·¥Ö  Ä·¥ás·¥õ s·¥ç·¥Ä ü ü"""
    def style_word(word):
        if len(word) > 0:
            return word[0] + word[1:].lower()
        return word
    
    words = text.split()
    styled_words = []
    
    for word in words:
        if any(char.isalpha() for char in word):
            styled_words.append(style_word(word))
        else:
            styled_words.append(word)
    
    return ' '.join(styled_words)

# Database helper functions for MongoDB
def get_user(user_id):
    user = users_collection.find_one({"user_id": user_id})
    if not user:
        users_collection.insert_one({
            "user_id": user_id,
            "username": f"User_{user_id}",
            "balance": 0,
            "total_deposits": 0,
            "total_spent": 0,
            "banned": False,
            "joined_date": datetime.now()
        })
        user = users_collection.find_one({"user_id": user_id})
    return user

def update_balance(user_id, amount):
    user = get_user(user_id)
    new_balance = user["balance"] + amount
    
    update_data = {"$set": {"balance": new_balance}}
    
    if amount > 0:
        update_data["$inc"] = {"total_deposits": amount}
    else:
        update_data["$inc"] = {"total_spent": abs(amount)}
    
    users_collection.update_one({"user_id": user_id}, update_data)
    return new_balance

def get_balance(user_id):
    user = get_user(user_id)
    return user["balance"]

def add_order(user_id, service_name, link, quantity, cost, api_order_id=None):
    order_id = f"ORD{random.randint(100000, 999999)}"
    
    order = {
        "order_id": order_id,
        "user_id": user_id,
        "service_name": service_name,
        "link": link,
        "quantity": quantity,
        "cost": cost,
        "status": "Pending",
        "api_order_id": api_order_id,
        "order_date": datetime.now()
    }
    
    orders_collection.insert_one(order)
    return order

def get_user_orders(user_id, limit=5):
    return list(orders_collection.find(
        {"user_id": user_id}
    ).sort("order_date", -1).limit(limit))

def add_deposit(user_id, amount, utr):
    deposit = {
        "user_id": user_id,
        "amount": amount,
        "utr": utr,
        "status": "Pending",
        "deposit_date": datetime.now()
    }
    
    deposits_collection.insert_one(deposit)
    return deposit

def update_deposit_status(utr, status):
    deposits_collection.update_one(
        {"utr": utr},
        {"$set": {"status": status}}
    )

# User session functions for deposit data
def save_user_data(user_id, key, value):
    user_sessions_collection.update_one(
        {"user_id": user_id},
        {"$set": {key: value}},
        upsert=True
    )

def get_user_data(user_id, key):
    session = user_sessions_collection.find_one({"user_id": user_id})
    return session.get(key) if session else None

def delete_user_data(user_id, key):
    user_sessions_collection.update_one(
        {"user_id": user_id},
        {"$unset": {key: ""}}
    )

def clear_all_user_data(user_id):
    user_sessions_collection.delete_one({"user_id": user_id})

def get_all_users():
    return users_collection.count_documents({})

def get_total_orders():
    return orders_collection.count_documents({})

def get_total_deposits():
    result = deposits_collection.aggregate([
        {"$match": {"status": "Completed"}},
        {"$group": {"_id": None, "total": {"$sum": "$amount"}}}
    ])
    return list(result)[0]["total"] if result else 0

def get_total_spent():
    result = orders_collection.aggregate([
        {"$group": {"_id": None, "total": {"$sum": "$cost"}}}
    ])
    return list(result)[0]["total"] if result else 0

# API Functions
def place_smm_order(service_id, link, quantity):
    """P ü·¥Ä·¥Ñ·¥á ·¥è Ä·¥Ö·¥á Ä ·¥†…™·¥Ä SMM API"""
    try:
        params = {
            "key": SMM_API_KEY,
            "action": "add",
            "service": service_id,
            "link": link,
            "quantity": quantity
        }
        response = requests.get(SMM_API_URL, params=params, timeout=30)
        api_response = response.json()
        
        api_order_id = api_response.get("order", "UNKNOWN")
        return api_order_id
        
    except Exception as e:
        print(f"SMM API order error: {e}")
        return None

def verify_payment(utr):
    """V·¥á Ä…™“ì è ·¥ò·¥Ä è·¥ç·¥á…¥·¥õ ·¥ús…™…¥…¢ A·¥ú·¥õ·¥è·¥Ö·¥á·¥ò API"""
    try:
        url = f"https://erox-autodep-api.onrender.com/api?key={AUTODEP_API_KEY}&merchantkey={AUTODEP_MERCHANT_KEY}&transactionid={utr}"
        resp = requests.get(url, timeout=10).json()
        
        if resp.get("result", {}).get("STATUS") == "TXN_SUCCESS":
            return True
        return False
    except Exception as e:
        print(f"Payment verification error: {e}")
        return False

def generate_qr_code(amount, upi_id="paytm.s1m11be@pty"):
    """G·¥á…¥·¥á Ä·¥Ä·¥õ·¥á QR ·¥Ñ·¥è·¥Ö·¥á “ì·¥è Ä UPI ·¥ò·¥Ä è·¥ç·¥á…¥·¥õ"""
    upi_url = f"upi://pay?pa={upi_id}&pn=Paytm&am={amount}&tn=Deposit"
    
    qr = qrcode.QRCode(
        version=1,
        error_correction=qrcode.constants.ERROR_CORRECT_L,
        box_size=10,
        border=4,
    )
    qr.add_data(upi_url)
    qr.make(fit=True)
    
    img = qr.make_image(fill_color="black", back_color="white")
    img_bytes = io.BytesIO()
    img.save(img_bytes, format='PNG')
    img_bytes.seek(0)
    
    return img_bytes

# Helper Functions
def is_admin(user_id):
    return user_id in ADMIN_IDS

def check_channel_membership(user_id):
    try:
        member = bot.get_chat_member(CHANNEL_ID, user_id)
        return member.status in ['member', 'administrator', 'creator']
    except Exception as e:
        print(f"Channel check error: {e}")
        return False

# Keyboard Builders with stylish text
def main_menu_keyboard():
    markup = InlineKeyboardMarkup(row_width=2)
    buttons = [
        InlineKeyboardButton("üí∞ D·¥á·¥ò·¥ès…™·¥õ", callback_data="deposit"),
        InlineKeyboardButton("üõí O Ä·¥Ö·¥á Ä", callback_data="order"),
        InlineKeyboardButton("üìã O Ä·¥Ö·¥á Äs", callback_data="orders"),
        InlineKeyboardButton("üë• R·¥á“ì·¥á Ä", callback_data="refer"),
        InlineKeyboardButton("üë§ A·¥Ñ·¥Ñ·¥è·¥ú…¥·¥õ", callback_data="account"),
        InlineKeyboardButton("üìä S·¥õ·¥Ä·¥õs", callback_data="stats"),
        InlineKeyboardButton("‚ÑπÔ∏è S·¥ú·¥ò·¥ò·¥è Ä·¥õ", callback_data="support")
    ]
    markup.add(*buttons)
    return markup

def categories_keyboard():
    markup = InlineKeyboardMarkup(row_width=2)
    buttons = []
    for category in SERVICES.keys():
        emoji = "üì∏" if category == "Instagram" else "üëç" if category == "Facebook" else "üì∫" if category == "YouTube" else "üì±"
        buttons.append(InlineKeyboardButton(f"{emoji} {category}", callback_data=f"cat_{category}"))
    
    markup.add(*buttons)
    markup.add(InlineKeyboardButton("üîô B·¥Ä·¥Ñ·¥ã", callback_data="main_menu"))
    return markup

def services_keyboard(category):
    markup = InlineKeyboardMarkup()
    for service_name in SERVICES[category].keys():
        markup.add(InlineKeyboardButton(service_name, callback_data=f"serv_{category}_{service_name}"))
    markup.add(InlineKeyboardButton("üîô B·¥Ä·¥Ñ·¥ã", callback_data="order"))
    return markup

def back_button_only():
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("üîô B·¥Ä·¥Ñ·¥ã", callback_data="main_menu"))
    return markup

def channel_join_keyboard():
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("‚úÖ J·¥è…™…¥ C ú·¥Ä…¥…¥·¥á ü", url=f"https://t.me/{CHANNEL_ID.replace('@', '')}"))
    markup.add(InlineKeyboardButton("üîç C ú·¥á·¥Ñ·¥ã J·¥è…™…¥", callback_data="check_join"))
    return markup

def deposit_confirmation_keyboard():
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("‚úÖ I H·¥Ä·¥†·¥á P·¥Ä…™·¥Ö", callback_data="check_txn"))
    markup.add(InlineKeyboardButton("üîô B·¥Ä·¥Ñ·¥ã", callback_data="main_menu"))
    return markup

def support_keyboard():
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("üìû C·¥è…¥·¥õ·¥Ä·¥Ñ·¥õ Us", url=SUPPORT_LINK))
    markup.add(InlineKeyboardButton("üîô B·¥Ä·¥Ñ·¥ã", callback_data="main_menu"))
    return markup

# Admin Keyboards
def admin_keyboard():
    markup = InlineKeyboardMarkup(row_width=2)
    buttons = [
        InlineKeyboardButton("üí∞ B·¥Ä ü·¥Ä…¥·¥Ñ·¥á C·¥è…¥·¥õ Ä·¥è ü", callback_data="admin_balance"),
        InlineKeyboardButton("üì¢ B Ä·¥è·¥Ä·¥Ö·¥Ñ·¥Äs·¥õ", callback_data="admin_broadcast"),
        InlineKeyboardButton("üë§ Us·¥á Ä C·¥è…¥·¥õ Ä·¥è ü", callback_data="admin_users"),
        InlineKeyboardButton("üìä S·¥õ·¥Ä·¥õs", callback_data="admin_stats"),
        InlineKeyboardButton("üîô M·¥Ä…™…¥ M·¥á…¥·¥ú", callback_data="main_menu")
    ]
    markup.add(*buttons)
    return markup

# Start command and main menu
@bot.message_handler(commands=['start'])
def start_command(message):
    user_id = message.from_user.id
    username = message.from_user.username or f"User_{user_id}"
    
    get_user(user_id)  # Ensure user exists in DB
    
    # Check channel membership
    if not check_channel_membership(user_id):
        welcome_text = f"""
‚ú® W·¥á ü·¥Ñ·¥è·¥ç·¥á {message.from_user.first_name}!

üì¢ P ü·¥á·¥Äs·¥á ·¥ä·¥è…™…¥ ·¥è·¥ú Ä ·¥Ñ ú·¥Ä…¥…¥·¥á ü ·¥õ·¥è ·¥ús·¥á ·¥õ ú·¥á  ô·¥è·¥õ:

{CHANNEL_ID}

A“ì·¥õ·¥á Ä ·¥ä·¥è…™…¥…™…¥…¢, ·¥Ñ ü…™·¥Ñ·¥ã ·¥õ ú·¥á ·¥Ñ ú·¥á·¥Ñ·¥ã  ô·¥ú·¥õ·¥õ·¥è…¥  ô·¥á ü·¥è·¥°.
        """
        bot.send_photo(user_id, WELCOME_IMAGE, welcome_text, reply_markup=channel_join_keyboard())
        return
    
    welcome_text = f"""
‚ú® W·¥á ü·¥Ñ·¥è·¥ç·¥á T·¥è SMM B·¥è·¥õ ‚ú®

üöÄ B·¥ú è S·¥è·¥Ñ…™·¥Ä ü M·¥á·¥Ö…™·¥Ä S·¥á Ä·¥†…™·¥Ñ·¥ás ·¥Ä·¥õ C ú·¥á·¥Ä·¥ò·¥ás·¥õ R·¥Ä·¥õ·¥ás!

üìä I…¥s·¥õ·¥Ä…¢ Ä·¥Ä·¥ç, F·¥Ä·¥Ñ·¥á ô·¥è·¥è·¥ã, Y·¥è·¥úT·¥ú ô·¥á & T·¥á ü·¥á…¢ Ä·¥Ä·¥ç S·¥á Ä·¥†…™·¥Ñ·¥ás
üíé H…™…¢ ú Q·¥ú·¥Ä ü…™·¥õ è & F·¥Äs·¥õ D·¥á ü…™·¥†·¥á Ä è
üîí S·¥á·¥Ñ·¥ú Ä·¥á P·¥Ä è·¥ç·¥á…¥·¥õs & 24/7 S·¥ú·¥ò·¥ò·¥è Ä·¥õ

üí´ S·¥õ·¥Ä Ä·¥õ  ô è ·¥Ö·¥á·¥ò·¥ès…™·¥õ…™…¥…¢ “ì·¥ú…¥·¥Ös ·¥è Ä ·¥ò ü·¥Ä·¥Ñ…™…¥…¢ ·¥Ä…¥ ·¥è Ä·¥Ö·¥á Ä!
    """
    
    bot.send_photo(user_id, WELCOME_IMAGE, welcome_text, reply_markup=main_menu_keyboard())

@bot.message_handler(commands=['admin'])
def admin_command(message):
    user_id = message.from_user.id
    if is_admin(user_id):
        admin_text = """
üëë A·¥Ö·¥ç…™…¥ P·¥Ä…¥·¥á ü

üíº M·¥Ä…¥·¥Ä…¢·¥á  è·¥è·¥ú Ä SMM  ô·¥è·¥õ ·¥°…™·¥õ ú ·¥ò·¥è·¥°·¥á Ä“ì·¥ú ü ·¥Ä·¥Ö·¥ç…™…¥ ·¥õ·¥è·¥è üs.

S·¥á ü·¥á·¥Ñ·¥õ ·¥Ä…¥ ·¥è·¥ò·¥õ…™·¥è…¥  ô·¥á ü·¥è·¥°:
    """
        bot.send_photo(user_id, ADMIN_IMAGE, admin_text, reply_markup=admin_keyboard())
    else:
        bot.send_message(user_id, "‚ùå A·¥Ñ·¥Ñ·¥áss ·¥Ö·¥á…¥…™·¥á·¥Ö.")

# Callback query handler
@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
    user_id = call.from_user.id
    message_id = call.message.message_id
    
    try:
        if call.data == "main_menu":
            show_main_menu(call)
        
        elif call.data == "deposit":
            show_deposit_menu(user_id, message_id)
        
        elif call.data == "order":
            show_categories(user_id, message_id)
        
        elif call.data == "orders":
            show_orders(user_id, message_id)
        
        elif call.data == "refer":
            show_refer(user_id, message_id)
        
        elif call.data == "account":
            show_account(user_id, message_id)
        
        elif call.data == "stats":
            show_stats(user_id, message_id)
        
        elif call.data == "support":
            show_support(user_id, message_id)
        
        elif call.data == "check_join":
            check_channel_join(call)
        
        elif call.data.startswith("cat_"):
            category = call.data[4:]
            show_services(user_id, message_id, category)
        
        elif call.data.startswith("serv_"):
            parts = call.data.split("_")
            if len(parts) >= 3:
                category = parts[1]
                service_name = " ".join(parts[2:])
                start_order_flow(user_id, message_id, category, service_name)
        
        elif call.data == "check_txn":
            check_transaction(call)
        
        elif call.data.startswith("admin_"):
            if is_admin(user_id):
                handle_admin_commands(call)
            else:
                bot.answer_callback_query(call.id, "‚ùå A·¥Ñ·¥Ñ·¥áss D·¥á…¥…™·¥á·¥Ö!", show_alert=True)
                
    except Exception as e:
        print(f"Error in callback: {e}")
        bot.answer_callback_query(call.id, "‚ùå E Ä Ä·¥è Ä ·¥è·¥Ñ·¥Ñ·¥ú Ä Ä·¥á·¥Ö!", show_alert=True)

# Deposit flow - FROM BOT (2).PY
def show_deposit_menu(user_id, message_id):
    clear_all_user_data(user_id)
    
    deposit_text = "E…¥·¥õ·¥á Ä T ú·¥á A·¥ç·¥è·¥ú…¥·¥õ Y·¥è·¥ú W·¥Ä…¥·¥õ T·¥è D·¥á·¥ò·¥ès…™·¥õ üí∞"
    
    try:
        bot.edit_message_media(
            chat_id=user_id,
            message_id=message_id,
            media=telebot.types.InputMediaPhoto(
                media=DEPOSIT_IMAGE,
                caption=deposit_text
            ),
            reply_markup=None
        )
    except:
        bot.send_photo(user_id, DEPOSIT_IMAGE, deposit_text)
    
    msg = bot.send_message(user_id, "üí≥ P ü·¥á·¥Äs·¥á ·¥á…¥·¥õ·¥á Ä ·¥õ ú·¥á ·¥Ä·¥ç·¥è·¥ú…¥·¥õ  è·¥è·¥ú ·¥°·¥Ä…¥·¥õ ·¥õ·¥è ·¥Ö·¥á·¥ò·¥ès…™·¥õ (…™…¥ ‚Çπ):")
    bot.register_next_step_handler(msg, process_deposit_amount)

def process_deposit_amount(message):
    user_id = message.from_user.id
    
    try:
        amount = float(message.text)
        utr = str(random.randint(100000000000, 999999999999))

        save_user_data(user_id, "deposit_utr", utr)
        save_user_data(user_id, "deposit_amount", amount)

        qr_img = generate_qr_code(amount)
        
        keyboard = InlineKeyboardMarkup()
        keyboard.add(
            InlineKeyboardButton("P·¥Ä…™·¥Ö ‚úÖ", callback_data="check_txn"),
            InlineKeyboardButton("B·¥Ä·¥Ñ·¥ã üîô", callback_data="main_menu")
        )

        sent = bot.send_photo(
            chat_id=user_id,
            photo=qr_img,
            caption=f"üí∞ *D·¥á·¥ò·¥ès…™·¥õ R·¥á«´·¥ú·¥ás·¥õ*\n\nüíµ A·¥ç·¥è·¥ú…¥·¥õ: ‚Çπ{amount}\nüî¢ UTR: `{utr}`\n\nüì≤ S·¥Ñ·¥Ä…¥ ·¥õ ú·¥á QR ·¥Ñ·¥è·¥Ö·¥á ·¥õ·¥è ·¥Ñ·¥è·¥ç·¥ò ü·¥á·¥õ·¥á ·¥ò·¥Ä è·¥ç·¥á…¥·¥õ",
            reply_markup=keyboard,
            parse_mode='Markdown'
        )

        save_user_data(user_id, "deposit_qr_msg", sent.message_id)

    except Exception as e:
        bot.send_message(user_id, "‚ùå I…¥·¥†·¥Ä ü…™·¥Ö …™…¥·¥ò·¥ú·¥õ. P ü·¥á·¥Äs·¥á ·¥á…¥·¥õ·¥á Ä ·¥Ä ·¥†·¥Ä ü…™·¥Ö …¥·¥ú·¥ç ô·¥á Ä.")
        show_deposit_menu(user_id, message.message_id)

def check_transaction(call):
    user_id = call.from_user.id
    
    try:
        utr = get_user_data(user_id, "deposit_utr")
        amount = get_user_data(user_id, "deposit_amount")
        qr_msg_id = get_user_data(user_id, "deposit_qr_msg")

        if utr and amount:
            payment_verified = verify_payment(utr)
            
            if payment_verified:
                points = float(amount)
                new_balance = update_balance(user_id, points)
                add_deposit(user_id, amount, utr)
                update_deposit_status(utr, "Completed")

                try:
                    if qr_msg_id:
                        bot.delete_message(chat_id=user_id, message_id=qr_msg_id)
                except:
                    pass

                success_msg = bot.send_message(
                    chat_id=user_id,
                    text=f"‚úÖ T Ä·¥Ä…¥s·¥Ä·¥Ñ·¥õ…™·¥è…¥ s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü! ‚Çπ{amount} ·¥Ä·¥Ö·¥Ö·¥á·¥Ö.\nN·¥á·¥° B·¥Ä ü·¥Ä…¥·¥Ñ·¥á: ‚Çπ{new_balance}"
                )

                try:
                    bot.send_message(
                        chat_id=ADMIN_IDS[0],
                        text=f"‚úÖ S·¥ú·¥Ñ·¥Ñ·¥áss\n\nUs·¥á Ä {user_id} ·¥Ö·¥á·¥ò·¥ès…™·¥õ·¥á·¥Ö ‚Çπ{amount}.\nN·¥á·¥° B·¥Ä ü·¥Ä…¥·¥Ñ·¥á: ‚Çπ{new_balance}"
                    )
                except:
                    pass

                clear_all_user_data(user_id)
                time.sleep(2)
                show_main_menu_for_message(success_msg)

            else:
                bot.answer_callback_query(
                    callback_query_id=call.id,
                    text="‚ùå Y·¥è·¥ú  ú·¥Ä·¥†·¥á …¥·¥è·¥õ ·¥Ö·¥á·¥ò·¥ès…™·¥õ·¥á·¥Ö  è·¥á·¥õ. P ü·¥á·¥Äs·¥á ·¥ò·¥Ä è “ì…™ Äs·¥õ.",
                    show_alert=True
                )

        else:
            bot.answer_callback_query(callback_query_id=call.id, text="‚ö†Ô∏è N·¥è ·¥ò·¥á…¥·¥Ö…™…¥…¢ ·¥Ö·¥á·¥ò·¥ès…™·¥õ “ì·¥è·¥ú…¥·¥Ö.", show_alert=True)

    except Exception as e:
        bot.answer_callback_query(callback_query_id=call.id, text="‚ùå A…¥ ·¥á Ä Ä·¥è Ä ·¥è·¥Ñ·¥Ñ·¥ú Ä Ä·¥á·¥Ö.", show_alert=True)

# Order flow - FROM BOT (2).PY
def show_categories(user_id, message_id):
    try:
        bot.edit_message_media(
            chat_id=user_id,
            message_id=message_id,
            media=telebot.types.InputMediaPhoto(
                media=SERVICE_IMAGE,
                caption="üéØ *S·¥á ü·¥á·¥Ñ·¥õ ·¥Ä C·¥Ä·¥õ·¥á…¢·¥è Ä è*\n\nC ú·¥è·¥ès·¥á ·¥Ä ·¥Ñ·¥Ä·¥õ·¥á…¢·¥è Ä è ·¥õ·¥è ·¥†…™·¥á·¥° s·¥á Ä·¥†…™·¥Ñ·¥ás:"
            ),
            reply_markup=categories_keyboard(),
            parse_mode='Markdown'
        )
    except:
        bot.send_photo(
            chat_id=user_id,
            photo=SERVICE_IMAGE,
            caption="üéØ *S·¥á ü·¥á·¥Ñ·¥õ ·¥Ä C·¥Ä·¥õ·¥á…¢·¥è Ä è*\n\nC ú·¥è·¥ès·¥á ·¥Ä ·¥Ñ·¥Ä·¥õ·¥á…¢·¥è Ä è ·¥õ·¥è ·¥†…™·¥á·¥° s·¥á Ä·¥†…™·¥Ñ·¥ás:",
            reply_markup=categories_keyboard(),
            parse_mode='Markdown'
        )

def show_services(user_id, message_id, category):
    if category not in SERVICES:
        bot.answer_callback_query(message_id, "‚ùå C·¥Ä·¥õ·¥á…¢·¥è Ä è …¥·¥è·¥õ “ì·¥è·¥ú…¥·¥Ö!", show_alert=True)
        return
        
    try:
        bot.edit_message_media(
            chat_id=user_id,
            message_id=message_id,
            media=telebot.types.InputMediaPhoto(
                media=SERVICE_IMAGE,
                caption=f"üõçÔ∏è *{category} S·¥á Ä·¥†…™·¥Ñ·¥ás*\n\nS·¥á ü·¥á·¥Ñ·¥õ ·¥Ä s·¥á Ä·¥†…™·¥Ñ·¥á ·¥õ·¥è ·¥Ñ·¥è…¥·¥õ…™…¥·¥ú·¥á:"
            ),
            reply_markup=services_keyboard(category),
            parse_mode='Markdown'
        )
    except:
        bot.send_photo(
            chat_id=user_id,
            photo=SERVICE_IMAGE,
            caption=f"üõçÔ∏è *{category} S·¥á Ä·¥†…™·¥Ñ·¥ás*\n\nS·¥á ü·¥á·¥Ñ·¥õ ·¥Ä s·¥á Ä·¥†…™·¥Ñ·¥á ·¥õ·¥è ·¥Ñ·¥è…¥·¥õ…™…¥·¥ú·¥á:",
            reply_markup=services_keyboard(category),
            parse_mode='Markdown'
        )

def start_order_flow(user_id, message_id, category, service_name):
    if category not in SERVICES or service_name not in SERVICES[category]:
        bot.answer_callback_query(message_id, "‚ùå S·¥á Ä·¥†…™·¥Ñ·¥á …¥·¥è·¥õ “ì·¥è·¥ú…¥·¥Ö!", show_alert=True)
        return
        
    service = SERVICES[category][service_name]
    
    service_info = f"""
*{service_name}*

üí∞ P Ä…™·¥Ñ·¥á: ‚Çπ{service['price']}/1000
üì¶ M…™…¥…™·¥ç·¥ú·¥ç: {service['min']}
üìà M·¥Äx…™·¥ç·¥ú·¥ç: {service['max']}

P ü·¥á·¥Äs·¥á s·¥á…¥·¥Ö ·¥õ ú·¥á  ü…™…¥·¥ã “ì·¥è Ä  è·¥è·¥ú Ä ·¥è Ä·¥Ö·¥á Ä:
    """
    
    try:
        bot.edit_message_caption(
            chat_id=user_id,
            message_id=message_id,
            caption=service_info,
            reply_markup=None,
            parse_mode='Markdown'
        )
    except:
        bot.send_message(user_id, service_info, parse_mode='Markdown')
    
    save_user_data(user_id, "order_category", category)
    save_user_data(user_id, "order_service_name", service_name)
    save_user_data(user_id, "order_service_data", json.dumps(service))
    
    msg = bot.send_message(user_id, "üîó P ü·¥á·¥Äs·¥á ·¥á…¥·¥õ·¥á Ä ·¥õ ú·¥á  ü…™…¥·¥ã:")
    bot.register_next_step_handler(msg, process_order_link)

def process_order_link(message):
    user_id = message.from_user.id
    link = message.text.strip()
    
    category = get_user_data(user_id, "order_category")
    service_name = get_user_data(user_id, "order_service_name")
    service_data = get_user_data(user_id, "order_service_data")
    
    if not all([category, service_name, service_data]):
        bot.send_message(user_id, "‚ùå S·¥áss…™·¥è…¥ ·¥áx·¥ò…™ Ä·¥á·¥Ö. P ü·¥á·¥Äs·¥á s·¥õ·¥Ä Ä·¥õ ·¥è·¥†·¥á Ä.")
        show_main_menu_for_message(message)
        return
    
    service = json.loads(service_data)
    
    save_user_data(user_id, "order_link", link)
    
    service_info = f"""
*{service_name}*

üîó L…™…¥·¥ã: `{link}`
üí∞ P Ä…™·¥Ñ·¥á: ‚Çπ{service['price']}/1000
üì¶ M…™…¥…™·¥ç·¥ú·¥ç: {service['min']}
üìà M·¥Äx…™·¥ç·¥ú·¥ç: {service['max']}

P ü·¥á·¥Äs·¥á ·¥á…¥·¥õ·¥á Ä ·¥õ ú·¥á «´·¥ú·¥Ä…¥·¥õ…™·¥õ è:
    """
    
    bot.send_message(user_id, service_info, parse_mode='Markdown')
    
    msg = bot.send_message(user_id, "üî¢ P ü·¥á·¥Äs·¥á ·¥á…¥·¥õ·¥á Ä ·¥õ ú·¥á «´·¥ú·¥Ä…¥·¥õ…™·¥õ è:")
    bot.register_next_step_handler(msg, process_order_quantity)

def process_order_quantity(message):
    user_id = message.from_user.id
    
    try:
        quantity = int(message.text)
        
        category = get_user_data(user_id, "order_category")
        service_name = get_user_data(user_id, "order_service_name")
        service_data = get_user_data(user_id, "order_service_data")
        link = get_user_data(user_id, "order_link")
        
        if not all([category, service_name, service_data, link]):
            bot.send_message(user_id, "‚ùå S·¥áss…™·¥è…¥ ·¥áx·¥ò…™ Ä·¥á·¥Ö. P ü·¥á·¥Äs·¥á s·¥õ·¥Ä Ä·¥õ ·¥è·¥†·¥á Ä.")
            show_main_menu_for_message(message)
            return
        
        service = json.loads(service_data)
        
        if quantity < service['min']:
            bot.send_message(user_id, f"‚ùå Q·¥ú·¥Ä…¥·¥õ…™·¥õ è  ô·¥á ü·¥è·¥° ·¥ç…™…¥…™·¥ç·¥ú·¥ç ({service['min']}).")
            return
        elif quantity > service['max']:
            bot.send_message(user_id, f"‚ùå Q·¥ú·¥Ä…¥·¥õ…™·¥õ è ·¥áx·¥Ñ·¥á·¥á·¥Ös ·¥ç·¥Äx…™·¥ç·¥ú·¥ç ({service['max']}).")
            return
        
        cost = (quantity / service['unit']) * service['price']
        cost = round(cost, 2)
        
        user_balance = get_balance(user_id)
        
        if user_balance < cost:
            bot.send_message(
                user_id,
                f"‚ùå I…¥s·¥ú“ì“ì…™·¥Ñ…™·¥á…¥·¥õ  ô·¥Ä ü·¥Ä…¥·¥Ñ·¥á!\n\nüí∞ Y·¥è·¥ú Ä B·¥Ä ü·¥Ä…¥·¥Ñ·¥á: ‚Çπ{user_balance}\nüí≥ R·¥á«´·¥ú…™ Ä·¥á·¥Ö: ‚Çπ{cost}\n\nP ü·¥á·¥Äs·¥á ·¥Ö·¥á·¥ò·¥ès…™·¥õ “ì·¥ú…¥·¥Ös “ì…™ Äs·¥õ.",
                reply_markup=InlineKeyboardMarkup().add(
                    InlineKeyboardButton("üí∞ D·¥á·¥ò·¥ès…™·¥õ", callback_data="deposit")
                )
            )
            return
        
        # Confirm order
        order_summary = f"""
*O Ä·¥Ö·¥á Ä S·¥ú·¥ç·¥ç·¥Ä Ä è*

üì¶ S·¥á Ä·¥†…™·¥Ñ·¥á: {service_name}
üîó L…™…¥·¥ã: `{link}`
üî¢ Q·¥ú·¥Ä…¥·¥õ…™·¥õ è: {quantity}
üí∞ C·¥ès·¥õ: ‚Çπ{cost}

P Ä·¥è·¥Ñ·¥á·¥á·¥Ö ·¥°…™·¥õ ú ·¥õ ú…™s ·¥è Ä·¥Ö·¥á Ä?
        """
        
        markup = InlineKeyboardMarkup()
        markup.add(
            InlineKeyboardButton("‚úÖ C·¥è…¥“ì…™ Ä·¥ç", callback_data=f"confirm_order_{cost}"),
            InlineKeyboardButton("‚ùå C·¥Ä…¥·¥Ñ·¥á ü", callback_data="main_menu")
        )
        
        bot.send_message(user_id, order_summary, parse_mode='Markdown', reply_markup=markup)
        
        save_user_data(user_id, "order_quantity", quantity)
        save_user_data(user_id, "order_cost", cost)
        
    except ValueError:
        bot.send_message(user_id, "‚ùå I…¥·¥†·¥Ä ü…™·¥Ö «´·¥ú·¥Ä…¥·¥õ…™·¥õ è. P ü·¥á·¥Äs·¥á ·¥á…¥·¥õ·¥á Ä ·¥Ä ·¥†·¥Ä ü…™·¥Ö …¥·¥ú·¥ç ô·¥á Ä.")

@bot.callback_query_handler(func=lambda call: call.data.startswith('confirm_order_'))
def confirm_order(call):
    user_id = call.from_user.id
    
    try:
        cost = float(call.data.split('_')[2])
        
        category = get_user_data(user_id, "order_category")
        service_name = get_user_data(user_id, "order_service_name")
        service_data = get_user_data(user_id, "order_service_data")
        link = get_user_data(user_id, "order_link")
        quantity = get_user_data(user_id, "order_quantity")
        
        if not all([category, service_name, service_data, link, quantity, cost]):
            bot.answer_callback_query(call.id, "‚ùå S·¥áss…™·¥è…¥ ·¥áx·¥ò…™ Ä·¥á·¥Ö!", show_alert=True)
            return
        
        service = json.loads(service_data)
        
        user_balance = get_balance(user_id)
        
        if user_balance < cost:
            bot.answer_callback_query(call.id, "‚ùå I…¥s·¥ú“ì“ì…™·¥Ñ…™·¥á…¥·¥õ  ô·¥Ä ü·¥Ä…¥·¥Ñ·¥á!", show_alert=True)
            return
        
        # Place order via API
        api_order_id = place_smm_order(service['id'], link, quantity)
        
        if api_order_id:
            # Deduct balance
            new_balance = update_balance(user_id, -cost)
            
            # Save order
            order = add_order(user_id, service_name, link, quantity, cost, api_order_id)
            
            # Success message
            success_msg = f"""
‚úÖ *O Ä·¥Ö·¥á Ä P ü·¥Ä·¥Ñ·¥á·¥Ö S·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è!*

üì¶ S·¥á Ä·¥†…™·¥Ñ·¥á: {service_name}
üîó L…™…¥·¥ã: `{link}`
üî¢ Q·¥ú·¥Ä…¥·¥õ…™·¥õ è: {quantity}
üí∞ C·¥ès·¥õ: ‚Çπ{cost}
üìã O Ä·¥Ö·¥á Ä ID: `{order['order_id']}`
üí≥ R·¥á·¥ç·¥Ä…™…¥…™…¥…¢ B·¥Ä ü·¥Ä…¥·¥Ñ·¥á: ‚Çπ{new_balance}

T ú·¥Ä…¥·¥ã  è·¥è·¥ú “ì·¥è Ä  è·¥è·¥ú Ä ·¥è Ä·¥Ö·¥á Ä!
            """
            
            bot.edit_message_text(
                chat_id=user_id,
                message_id=call.message.message_id,
                text=success_msg,
                parse_mode='Markdown'
            )
            
            # Notify admin
            try:
                bot.send_message(
                    ADMIN_IDS[0],
                    f"üõí N·¥á·¥° O Ä·¥Ö·¥á Ä!\n\nüë§ Us·¥á Ä: {user_id}\nüì¶ S·¥á Ä·¥†…™·¥Ñ·¥á: {service_name}\nüí∞ A·¥ç·¥è·¥ú…¥·¥õ: ‚Çπ{cost}\nüìã O Ä·¥Ö·¥á Ä ID: {order['order_id']}"
                )
            except:
                pass
            
        else:
            bot.answer_callback_query(call.id, "‚ùå O Ä·¥Ö·¥á Ä “ì·¥Ä…™ ü·¥á·¥Ö! P ü·¥á·¥Äs·¥á ·¥õ Ä è ·¥Ä…¢·¥Ä…™…¥.", show_alert=True)
        
        clear_all_user_data(user_id)
        
    except Exception as e:
        print(f"Order error: {e}")
        bot.answer_callback_query(call.id, "‚ùå O Ä·¥Ö·¥á Ä “ì·¥Ä…™ ü·¥á·¥Ö!", show_alert=True)

# Other menu functions
def show_orders(user_id, message_id):
    orders = get_user_orders(user_id)
    
    if not orders:
        try:
            bot.edit_message_media(
                chat_id=user_id,
                message_id=message_id,
                media=telebot.types.InputMediaPhoto(
                    media=HISTORY_IMAGE,
                    caption="üìã *Y·¥è·¥ú Ä O Ä·¥Ö·¥á Äs*\n\nN·¥è ·¥è Ä·¥Ö·¥á Äs “ì·¥è·¥ú…¥·¥Ö."
                ),
                reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton("üîô B·¥Ä·¥Ñ·¥ã", callback_data="main_menu")),
                parse_mode='Markdown'
            )
        except:
            bot.send_photo(
                chat_id=user_id,
                photo=HISTORY_IMAGE,
                caption="üìã *Y·¥è·¥ú Ä O Ä·¥Ö·¥á Äs*\n\nN·¥è ·¥è Ä·¥Ö·¥á Äs “ì·¥è·¥ú…¥·¥Ö.",
                reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton("üîô B·¥Ä·¥Ñ·¥ã", callback_data="main_menu")),
                parse_mode='Markdown'
            )
        return
    
    orders_text = "üìã *Y·¥è·¥ú Ä R·¥á·¥Ñ·¥á…¥·¥õ O Ä·¥Ö·¥á Äs*\n\n"
    
    for order in orders[:5]:
        status_emoji = "‚úÖ" if order['status'] == 'Completed' else "‚è≥" if order['status'] == 'Processing' else "‚ùå"
        orders_text += f"{status_emoji} *{order['service_name']}*\n"
        orders_text += f"üîó `{order['link'][:30]}...`\n"
        orders_text += f"üî¢ {order['quantity']} | ‚Çπ{order['cost']}\n"
        orders_text += f"üìÖ {order['order_date'].strftime('%d/%m/%Y %H:%M')}\n\n"
    
    try:
        bot.edit_message_media(
            chat_id=user_id,
            message_id=message_id,
            media=telebot.types.InputMediaPhoto(
                media=HISTORY_IMAGE,
                caption=orders_text
            ),
            reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton("üîô B·¥Ä·¥Ñ·¥ã", callback_data="main_menu")),
            parse_mode='Markdown'
        )
    except:
        bot.send_photo(
            chat_id=user_id,
            photo=HISTORY_IMAGE,
            caption=orders_text,
            reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton("üîô B·¥Ä·¥Ñ·¥ã", callback_data="main_menu")),
            parse_mode='Markdown'
        )

def show_refer(user_id, message_id):
    user = get_user(user_id)
    
    refer_text = f"""
üë• *R·¥á“ì·¥á Ä & E·¥Ä Ä…¥*

I…¥·¥†…™·¥õ·¥á  è·¥è·¥ú Ä “ì Ä…™·¥á…¥·¥Ös ·¥Ä…¥·¥Ö ·¥á·¥Ä Ä…¥ 10% ·¥è“ì ·¥õ ú·¥á…™ Ä ·¥á·¥†·¥á Ä è ·¥Ö·¥á·¥ò·¥ès…™·¥õ!

üîó Y·¥è·¥ú Ä R·¥á“ì·¥á Ä Ä·¥Ä ü L…™…¥·¥ã:
`https://t.me/{BOT_USERNAME.replace('@', '')}?start={user_id}`

üí° S ú·¥Ä Ä·¥á ·¥õ ú…™s  ü…™…¥·¥ã ·¥°…™·¥õ ú  è·¥è·¥ú Ä “ì Ä…™·¥á…¥·¥Ös. W ú·¥á…¥ ·¥õ ú·¥á è ·¥ä·¥è…™…¥ ·¥Ä…¥·¥Ö ·¥Ö·¥á·¥ò·¥ès…™·¥õ,  è·¥è·¥ú …¢·¥á·¥õ 10%  Ä·¥á·¥°·¥Ä Ä·¥Ö!
    """
    
    try:
        bot.edit_message_media(
            chat_id=user_id,
            message_id=message_id,
            media=telebot.types.InputMediaPhoto(
                media=REFER_IMAGE,
                caption=refer_text
            ),
            reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton("üîô B·¥Ä·¥Ñ·¥ã", callback_data="main_menu")),
            parse_mode='Markdown'
        )
    except:
        bot.send_photo(
            chat_id=user_id,
            photo=REFER_IMAGE,
            caption=refer_text,
            reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton("üîô B·¥Ä·¥Ñ·¥ã", callback_data="main_menu")),
            parse_mode='Markdown'
        )

def show_account(user_id, message_id):
    user = get_user(user_id)
    
    account_text = f"""
üë§ *A·¥Ñ·¥Ñ·¥è·¥ú…¥·¥õ I…¥“ì·¥è Ä·¥ç·¥Ä·¥õ…™·¥è…¥*

üÜî Us·¥á Ä ID: `{user_id}`
üë§ Us·¥á Ä…¥·¥Ä·¥ç·¥á: @{user['username']}
üí∞ B·¥Ä ü·¥Ä…¥·¥Ñ·¥á: ‚Çπ{user['balance']}
üí≥ T·¥è·¥õ·¥Ä ü D·¥á·¥ò·¥ès…™·¥õ·¥á·¥Ö: ‚Çπ{user.get('total_deposits', 0)}
üõí T·¥è·¥õ·¥Ä ü S·¥ò·¥á…¥·¥õ: ‚Çπ{user.get('total_spent', 0)}
üìÖ J·¥è…™…¥·¥á·¥Ö: {user['joined_date'].strftime('%d/%m/%Y')}
    """
    
    try:
        bot.edit_message_media(
            chat_id=user_id,
            message_id=message_id,
            media=telebot.types.InputMediaPhoto(
                media=ACCOUNT_IMAGE,
                caption=account_text
            ),
            reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton("üîô B·¥Ä·¥Ñ·¥ã", callback_data="main_menu")),
            parse_mode='Markdown'
        )
    except:
        bot.send_photo(
            chat_id=user_id,
            photo=ACCOUNT_IMAGE,
            caption=account_text,
            reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton("üîô B·¥Ä·¥Ñ·¥ã", callback_data="main_menu")),
            parse_mode='Markdown'
        )

def show_stats(user_id, message_id):
    user = get_user(user_id)
    
    stats_text = f"""
üìä *B·¥è·¥õ S·¥õ·¥Ä·¥õ…™s·¥õ…™·¥Ñs*

üë• T·¥è·¥õ·¥Ä ü Us·¥á Äs: {get_all_users()}
üõí T·¥è·¥õ·¥Ä ü O Ä·¥Ö·¥á Äs: {get_total_orders()}
üí∞ T·¥è·¥õ·¥Ä ü D·¥á·¥ò·¥ès…™·¥õs: ‚Çπ{get_total_deposits()}
üí∏ T·¥è·¥õ·¥Ä ü S·¥ò·¥á…¥·¥õ: ‚Çπ{get_total_spent()}

üë§ *Y·¥è·¥ú Ä S·¥õ·¥Ä·¥õs*
üí∞ Y·¥è·¥ú Ä B·¥Ä ü·¥Ä…¥·¥Ñ·¥á: ‚Çπ{user['balance']}
üí≥ Y·¥è·¥ú Ä D·¥á·¥ò·¥ès…™·¥õs: ‚Çπ{user.get('total_deposits', 0)}
üõí Y·¥è·¥ú Ä S·¥ò·¥á…¥·¥Ö…™…¥…¢: ‚Çπ{user.get('total_spent', 0)}
    """
    
    try:
        bot.edit_message_media(
            chat_id=user_id,
            message_id=message_id,
            media=telebot.types.InputMediaPhoto(
                media=HISTORY_IMAGE,
                caption=stats_text
            ),
            reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton("üîô B·¥Ä·¥Ñ·¥ã", callback_data="main_menu")),
            parse_mode='Markdown'
        )
    except:
        bot.send_photo(
            chat_id=user_id,
            photo=HISTORY_IMAGE,
            caption=stats_text,
            reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton("üîô B·¥Ä·¥Ñ·¥ã", callback_data="main_menu")),
            parse_mode='Markdown'
        )

def show_support(user_id, message_id):
    support_text = """
‚ÑπÔ∏è *S·¥ú·¥ò·¥ò·¥è Ä·¥õ*

I“ì  è·¥è·¥ú …¥·¥á·¥á·¥Ö  ú·¥á ü·¥ò ·¥è Ä  ú·¥Ä·¥†·¥á ·¥Ä…¥ è «´·¥ú·¥ás·¥õ…™·¥è…¥s, ·¥Ñ·¥è…¥·¥õ·¥Ä·¥Ñ·¥õ ·¥è·¥ú Ä s·¥ú·¥ò·¥ò·¥è Ä·¥õ ·¥õ·¥á·¥Ä·¥ç.

O·¥ú Ä s·¥ú·¥ò·¥ò·¥è Ä·¥õ ·¥õ·¥á·¥Ä·¥ç …™s ·¥Ä·¥†·¥Ä…™ ü·¥Ä ô ü·¥á 24/7 ·¥õ·¥è ·¥Äss…™s·¥õ  è·¥è·¥ú.
    """
    
    try:
        bot.edit_message_media(
            chat_id=user_id,
            message_id=message_id,
            media=telebot.types.InputMediaPhoto(
                media=SERVICE_IMAGE,
                caption=support_text
            ),
            reply_markup=support_keyboard(),
            parse_mode='Markdown'
        )
    except:
        bot.send_photo(
            chat_id=user_id,
            photo=SERVICE_IMAGE,
            caption=support_text,
            reply_markup=support_keyboard(),
            parse_mode='Markdown'
        )

def check_channel_join(call):
    user_id = call.from_user.id
    
    if check_channel_membership(user_id):
        bot.answer_callback_query(call.id, "‚úÖ T ú·¥Ä…¥·¥ã  è·¥è·¥ú “ì·¥è Ä ·¥ä·¥è…™…¥…™…¥…¢! N·¥è·¥°  è·¥è·¥ú ·¥Ñ·¥Ä…¥ ·¥ús·¥á ·¥õ ú·¥á  ô·¥è·¥õ.", show_alert=True)
        start_command(call.message)
    else:
        bot.answer_callback_query(call.id, "‚ùå Y·¥è·¥ú  ú·¥Ä·¥†·¥á …¥·¥è·¥õ ·¥ä·¥è…™…¥·¥á·¥Ö ·¥õ ú·¥á ·¥Ñ ú·¥Ä…¥…¥·¥á ü  è·¥á·¥õ. P ü·¥á·¥Äs·¥á ·¥ä·¥è…™…¥ “ì…™ Äs·¥õ.", show_alert=True)

def show_main_menu(call):
    try:
        bot.edit_message_media(
            chat_id=call.from_user.id,
            message_id=call.message.message_id,
            media=telebot.types.InputMediaPhoto(
                media=WELCOME_IMAGE,
                caption="‚ú® W·¥á ü·¥Ñ·¥è·¥ç·¥á T·¥è SMM B·¥è·¥õ ‚ú®\n\nS·¥á ü·¥á·¥Ñ·¥õ ·¥Ä…¥ ·¥è·¥ò·¥õ…™·¥è…¥ “ì Ä·¥è·¥ç ·¥õ ú·¥á ·¥ç·¥á…¥·¥ú  ô·¥á ü·¥è·¥°:"
            ),
            reply_markup=main_menu_keyboard()
        )
    except:
        bot.send_photo(
            chat_id=call.from_user.id,
            photo=WELCOME_IMAGE,
            caption="‚ú® W·¥á ü·¥Ñ·¥è·¥ç·¥á T·¥è SMM B·¥è·¥õ ‚ú®\n\nS·¥á ü·¥á·¥Ñ·¥õ ·¥Ä…¥ ·¥è·¥ò·¥õ…™·¥è…¥ “ì Ä·¥è·¥ç ·¥õ ú·¥á ·¥ç·¥á…¥·¥ú  ô·¥á ü·¥è·¥°:",
            reply_markup=main_menu_keyboard()
        )

def show_main_menu_for_message(message):
    bot.send_photo(
        chat_id=message.from_user.id,
        photo=WELCOME_IMAGE,
        caption="‚ú® W·¥á ü·¥Ñ·¥è·¥ç·¥á T·¥è SMM B·¥è·¥õ ‚ú®\n\nS·¥á ü·¥á·¥Ñ·¥õ ·¥Ä…¥ ·¥è·¥ò·¥õ…™·¥è…¥ “ì Ä·¥è·¥ç ·¥õ ú·¥á ·¥ç·¥á…¥·¥ú  ô·¥á ü·¥è·¥°:",
        reply_markup=main_menu_keyboard()
    )

# Admin functions
def handle_admin_commands(call):
    user_id = call.from_user.id
    command = call.data
    
    if command == "admin_balance":
        show_admin_balance_menu(user_id, call.message.message_id)
    
    elif command == "admin_broadcast":
        start_broadcast(call)
    
    elif command == "admin_users":
        show_admin_users_menu(user_id, call.message.message_id)
    
    elif command == "admin_stats":
        show_admin_stats(user_id, call.message.message_id)

def show_admin_balance_menu(user_id, message_id):
    admin_text = """
üí∞ *A·¥Ö·¥ç…™…¥ B·¥Ä ü·¥Ä…¥·¥Ñ·¥á C·¥è…¥·¥õ Ä·¥è ü*

S·¥á ü·¥á·¥Ñ·¥õ ·¥Ä…¥ ·¥è·¥ò·¥õ…™·¥è…¥ ·¥õ·¥è ·¥ç·¥Ä…¥·¥Ä…¢·¥á ·¥ús·¥á Ä  ô·¥Ä ü·¥Ä…¥·¥Ñ·¥ás:
    """
    
    markup = InlineKeyboardMarkup()
    markup.add(
        InlineKeyboardButton("‚ûï A·¥Ö·¥Ö B·¥Ä ü·¥Ä…¥·¥Ñ·¥á", callback_data="admin_add_balance"),
        InlineKeyboardButton("‚ûñ R·¥á·¥ç·¥è·¥†·¥á B·¥Ä ü·¥Ä…¥·¥Ñ·¥á", callback_data="admin_remove_balance")
    )
    markup.add(InlineKeyboardButton("üîô B·¥Ä·¥Ñ·¥ã", callback_data="admin"))
    
    try:
        bot.edit_message_media(
            chat_id=user_id,
            message_id=message_id,
            media=telebot.types.InputMediaPhoto(
                media=ADMIN_IMAGE,
                caption=admin_text
            ),
            reply_markup=markup,
            parse_mode='Markdown'
        )
    except:
        bot.send_photo(
            chat_id=user_id,
            photo=ADMIN_IMAGE,
            caption=admin_text,
            reply_markup=markup,
            parse_mode='Markdown'
        )

@bot.callback_query_handler(func=lambda call: call.data == "admin_add_balance")
def admin_add_balance_start(call):
    user_id = call.from_user.id
    
    bot.edit_message_text(
        chat_id=user_id,
        message_id=call.message.message_id,
        text="üë§ P ü·¥á·¥Äs·¥á ·¥á…¥·¥õ·¥á Ä ·¥õ ú·¥á Us·¥á Ä ID ·¥õ·¥è ·¥Ä·¥Ö·¥Ö  ô·¥Ä ü·¥Ä…¥·¥Ñ·¥á:",
        reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton("üîô C·¥Ä…¥·¥Ñ·¥á ü", callback_data="admin_balance"))
    )
    
    admin_states[user_id] = {"action": "add_balance", "step": "user_id"}

@bot.callback_query_handler(func=lambda call: call.data == "admin_remove_balance")
def admin_remove_balance_start(call):
    user_id = call.from_user.id
    
    bot.edit_message_text(
        chat_id=user_id,
        message_id=call.message.message_id,
        text="üë§ P ü·¥á·¥Äs·¥á ·¥á…¥·¥õ·¥á Ä ·¥õ ú·¥á Us·¥á Ä ID ·¥õ·¥è  Ä·¥á·¥ç·¥è·¥†·¥á  ô·¥Ä ü·¥Ä…¥·¥Ñ·¥á:",
        reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton("üîô C·¥Ä…¥·¥Ñ·¥á ü", callback_data="admin_balance"))
    )
    
    admin_states[user_id] = {"action": "remove_balance", "step": "user_id"}

@bot.message_handler(func=lambda message: message.from_user.id in ADMIN_IDS and message.from_user.id in admin_states)
def handle_admin_states(message):
    user_id = message.from_user.id
    state = admin_states[user_id]
    
    if state["step"] == "user_id":
        try:
            target_user_id = int(message.text)
            state["target_user_id"] = target_user_id
            state["step"] = "amount"
            
            action_text = "·¥Ä·¥Ö·¥Ö" if state["action"] == "add_balance" else " Ä·¥á·¥ç·¥è·¥†·¥á"
            
            bot.send_message(
                user_id,
                f"üí∞ P ü·¥á·¥Äs·¥á ·¥á…¥·¥õ·¥á Ä ·¥õ ú·¥á ·¥Ä·¥ç·¥è·¥ú…¥·¥õ ·¥õ·¥è {action_text}:",
                reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton("üîô C·¥Ä…¥·¥Ñ·¥á ü", callback_data="admin_balance"))
            )
            
        except ValueError:
            bot.send_message(user_id, "‚ùå I…¥·¥†·¥Ä ü…™·¥Ö Us·¥á Ä ID. P ü·¥á·¥Äs·¥á ·¥á…¥·¥õ·¥á Ä ·¥Ä ·¥†·¥Ä ü…™·¥Ö …¥·¥ú·¥ç ô·¥á Ä.")
            del admin_states[user_id]
    
    elif state["step"] == "amount":
        try:
            amount = float(message.text)
            target_user_id = state["target_user_id"]
            action = state["action"]
            
            target_user = get_user(target_user_id)
            
            if action == "add_balance":
                new_balance = update_balance(target_user_id, amount)
                success_msg = f"‚úÖ B·¥Ä ü·¥Ä…¥·¥Ñ·¥á ·¥Ä·¥Ö·¥Ö·¥á·¥Ö s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è!\n\nüë§ Us·¥á Ä: {target_user_id}\nüí∞ A·¥ç·¥è·¥ú…¥·¥õ: ‚Çπ{amount}\nüí≥ N·¥á·¥° B·¥Ä ü·¥Ä…¥·¥Ñ·¥á: ‚Çπ{new_balance}"
            else:
                new_balance = update_balance(target_user_id, -amount)
                success_msg = f"‚úÖ B·¥Ä ü·¥Ä…¥·¥Ñ·¥á  Ä·¥á·¥ç·¥è·¥†·¥á·¥Ö s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è!\n\nüë§ Us·¥á Ä: {target_user_id}\nüí∞ A·¥ç·¥è·¥ú…¥·¥õ: ‚Çπ{amount}\nüí≥ N·¥á·¥° B·¥Ä ü·¥Ä…¥·¥Ñ·¥á: ‚Çπ{new_balance}"
            
            bot.send_message(user_id, success_msg)
            
            # Notify target user if possible
            try:
                if action == "add_balance":
                    bot.send_message(target_user_id, f"üéâ A·¥Ö·¥ç…™…¥ ·¥Ä·¥Ö·¥Ö·¥á·¥Ö ‚Çπ{amount} ·¥õ·¥è  è·¥è·¥ú Ä ·¥Ä·¥Ñ·¥Ñ·¥è·¥ú…¥·¥õ!\nüí∞ N·¥á·¥° B·¥Ä ü·¥Ä…¥·¥Ñ·¥á: ‚Çπ{new_balance}")
                else:
                    bot.send_message(target_user_id, f"‚ÑπÔ∏è A·¥Ö·¥ç…™…¥  Ä·¥á·¥ç·¥è·¥†·¥á·¥Ö ‚Çπ{amount} “ì Ä·¥è·¥ç  è·¥è·¥ú Ä ·¥Ä·¥Ñ·¥Ñ·¥è·¥ú…¥·¥õ.\nüí∞ N·¥á·¥° B·¥Ä ü·¥Ä…¥·¥Ñ·¥á: ‚Çπ{new_balance}")
            except:
                pass
            
            del admin_states[user_id]
            show_admin_balance_menu(user_id, message.message_id)
            
        except ValueError:
            bot.send_message(user_id, "‚ùå I…¥·¥†·¥Ä ü…™·¥Ö ·¥Ä·¥ç·¥è·¥ú…¥·¥õ. P ü·¥á·¥Äs·¥á ·¥á…¥·¥õ·¥á Ä ·¥Ä ·¥†·¥Ä ü…™·¥Ö …¥·¥ú·¥ç ô·¥á Ä.")
            del admin_states[user_id]

def start_broadcast(call):
    user_id = call.from_user.id
    
    bot.edit_message_text(
        chat_id=user_id,
        message_id=call.message.message_id,
        text="üì¢ P ü·¥á·¥Äs·¥á ·¥á…¥·¥õ·¥á Ä ·¥õ ú·¥á  ô Ä·¥è·¥Ä·¥Ö·¥Ñ·¥Äs·¥õ ·¥ç·¥áss·¥Ä…¢·¥á:",
        reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton("üîô C·¥Ä…¥·¥Ñ·¥á ü", callback_data="admin"))
    )
    
    admin_states[user_id] = {"action": "broadcast", "step": "message"}

@bot.message_handler(func=lambda message: message.from_user.id in ADMIN_IDS and message.from_user.id in admin_states and admin_states[message.from_user.id]["action"] == "broadcast")
def handle_broadcast_message(message):
    user_id = message.from_user.id
    
    broadcast_msg = message.text
    users = users_collection.find({})
    total_users = users_collection.count_documents({})
    success_count = 0
    
    progress_msg = bot.send_message(user_id, f"üì§ B Ä·¥è·¥Ä·¥Ö·¥Ñ·¥Äs·¥õ…™…¥…¢ ·¥õ·¥è {total_users} ·¥ús·¥á Äs...\n\n‚úÖ S·¥á…¥·¥õ: 0/{total_users}")
    
    for user in users:
        try:
            bot.send_message(user["user_id"], f"üì¢ A·¥Ö·¥ç…™…¥ A…¥…¥·¥è·¥ú…¥·¥Ñ·¥á·¥ç·¥á…¥·¥õ:\n\n{broadcast_msg}")
            success_count += 1
            
            if success_count % 10 == 0:
                bot.edit_message_text(
                    chat_id=user_id,
                    message_id=progress_msg.message_id,
                    text=f"üì§ B Ä·¥è·¥Ä·¥Ö·¥Ñ·¥Äs·¥õ…™…¥…¢ ·¥õ·¥è {total_users} ·¥ús·¥á Äs...\n\n‚úÖ S·¥á…¥·¥õ: {success_count}/{total_users}"
                )
            
            time.sleep(0.1)  # Rate limiting
            
        except Exception as e:
            continue
    
    bot.edit_message_text(
        chat_id=user_id,
        message_id=progress_msg.message_id,
        text=f"‚úÖ B Ä·¥è·¥Ä·¥Ö·¥Ñ·¥Äs·¥õ ·¥Ñ·¥è·¥ç·¥ò ü·¥á·¥õ·¥á·¥Ö!\n\nüì§ S·¥á…¥·¥õ ·¥õ·¥è: {success_count}/{total_users} ·¥ús·¥á Äs"
    )
    
    del admin_states[user_id]

def show_admin_users_menu(user_id, message_id):
    admin_text = """
üë§ *A·¥Ö·¥ç…™…¥ Us·¥á Ä C·¥è…¥·¥õ Ä·¥è ü*

S·¥á ü·¥á·¥Ñ·¥õ ·¥Ä…¥ ·¥è·¥ò·¥õ…™·¥è…¥ ·¥õ·¥è ·¥ç·¥Ä…¥·¥Ä…¢·¥á ·¥ús·¥á Äs:
    """
    
    markup = InlineKeyboardMarkup()
    markup.add(
        InlineKeyboardButton("üìä Us·¥á Ä S·¥õ·¥Ä·¥õs", callback_data="admin_user_stats"),
        InlineKeyboardButton("üîç F…™…¥·¥Ö Us·¥á Ä", callback_data="admin_find_user")
    )
    markup.add(InlineKeyboardButton("üîô B·¥Ä·¥Ñ·¥ã", callback_data="admin"))
    
    try:
        bot.edit_message_media(
            chat_id=user_id,
            message_id=message_id,
            media=telebot.types.InputMediaPhoto(
                media=ADMIN_IMAGE,
                caption=admin_text
            ),
            reply_markup=markup,
            parse_mode='Markdown'
        )
    except:
        bot.send_photo(
            chat_id=user_id,
            photo=ADMIN_IMAGE,
            caption=admin_text,
            reply_markup=markup,
            parse_mode='Markdown'
        )

@bot.callback_query_handler(func=lambda call: call.data == "admin_user_stats")
def show_admin_user_stats(call):
    user_id = call.from_user.id
    
    total_users = get_all_users()
    total_deposits = get_total_deposits()
    total_spent = get_total_spent()
    
    stats_text = f"""
üìä *A·¥Ö·¥ç…™…¥ Us·¥á Ä S·¥õ·¥Ä·¥õ…™s·¥õ…™·¥Ñs*

üë• T·¥è·¥õ·¥Ä ü Us·¥á Äs: {total_users}
üí∞ T·¥è·¥õ·¥Ä ü D·¥á·¥ò·¥ès…™·¥õs: ‚Çπ{total_deposits}
üí∏ T·¥è·¥õ·¥Ä ü S·¥ò·¥á…¥·¥õ: ‚Çπ{total_spent}
üìà A·¥†…¢ D·¥á·¥ò·¥ès…™·¥õ: ‚Çπ{round(total_deposits/total_users, 2) if total_users > 0 else 0}
    """
    
    bot.edit_message_text(
        chat_id=user_id,
        message_id=call.message.message_id,
        text=stats_text,
        parse_mode='Markdown',
        reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton("üîô B·¥Ä·¥Ñ·¥ã", callback_data="admin_users"))
    )

@bot.callback_query_handler(func=lambda call: call.data == "admin_find_user")
def admin_find_user_start(call):
    user_id = call.from_user.id
    
    bot.edit_message_text(
        chat_id=user_id,
        message_id=call.message.message_id,
        text="üë§ P ü·¥á·¥Äs·¥á ·¥á…¥·¥õ·¥á Ä ·¥õ ú·¥á Us·¥á Ä ID ·¥õ·¥è “ì…™…¥·¥Ö:",
        reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton("üîô C·¥Ä…¥·¥Ñ·¥á ü", callback_data="admin_users"))
    )
    
    admin_states[user_id] = {"action": "find_user", "step": "user_id"}

@bot.message_handler(func=lambda message: message.from_user.id in ADMIN_IDS and message.from_user.id in admin_states and admin_states[message.from_user.id]["action"] == "find_user")
def handle_find_user(message):
    user_id = message.from_user.id
    
    try:
        target_user_id = int(message.text)
        target_user = get_user(target_user_id)
        
        user_info = f"""
üë§ *Us·¥á Ä I…¥“ì·¥è Ä·¥ç·¥Ä·¥õ…™·¥è…¥*

üÜî Us·¥á Ä ID: `{target_user_id}`
üë§ Us·¥á Ä…¥·¥Ä·¥ç·¥á: @{target_user['username']}
üí∞ B·¥Ä ü·¥Ä…¥·¥Ñ·¥á: ‚Çπ{target_user['balance']}
üí≥ T·¥è·¥õ·¥Ä ü D·¥á·¥ò·¥ès…™·¥õ·¥á·¥Ö: ‚Çπ{target_user.get('total_deposits', 0)}
üõí T·¥è·¥õ·¥Ä ü S·¥ò·¥á…¥·¥õ: ‚Çπ{target_user.get('total_spent', 0)}
üìÖ J·¥è…™…¥·¥á·¥Ö: {target_user['joined_date'].strftime('%d/%m/%Y %H:%M')}
        """
        
        bot.send_message(user_id, user_info, parse_mode='Markdown')
        del admin_states[user_id]
        
    except ValueError:
        bot.send_message(user_id, "‚ùå I…¥·¥†·¥Ä ü…™·¥Ö Us·¥á Ä ID. P ü·¥á·¥Äs·¥á ·¥á…¥·¥õ·¥á Ä ·¥Ä ·¥†·¥Ä ü…™·¥Ö …¥·¥ú·¥ç ô·¥á Ä.")
        del admin_states[user_id]

def show_admin_stats(user_id, message_id):
    total_users = get_all_users()
    total_orders = get_total_orders()
    total_deposits = get_total_deposits()
    total_spent = get_total_spent()
    
    stats_text = f"""
üìä *A·¥Ö·¥ç…™…¥ S·¥õ·¥Ä·¥õ…™s·¥õ…™·¥Ñs*

üë• T·¥è·¥õ·¥Ä ü Us·¥á Äs: {total_users}
üõí T·¥è·¥õ·¥Ä ü O Ä·¥Ö·¥á Äs: {total_orders}
üí∞ T·¥è·¥õ·¥Ä ü D·¥á·¥ò·¥ès…™·¥õs: ‚Çπ{total_deposits}
üí∏ T·¥è·¥õ·¥Ä ü S·¥ò·¥á…¥·¥õ: ‚Çπ{total_spent}
üìà R·¥á·¥†·¥á…¥·¥ú·¥á: ‚Çπ{total_deposits - total_spent}
    """
    
    try:
        bot.edit_message_media(
            chat_id=user_id,
            message_id=message_id,
            media=telebot.types.InputMediaPhoto(
                media=ADMIN_IMAGE,
                caption=stats_text
            ),
            reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton("üîô B·¥Ä·¥Ñ·¥ã", callback_data="admin")),
            parse_mode='Markdown'
        )
    except:
        bot.send_photo(
            chat_id=user_id,
            photo=ADMIN_IMAGE,
            caption=stats_text,
            reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton("üîô B·¥Ä·¥Ñ·¥ã", callback_data="admin")),
            parse_mode='Markdown'
        )

# Error handler
@bot.message_handler(func=lambda message: True)
def handle_all_messages(message):
    if message.text.startswith('/'):
        bot.send_message(message.chat.id, "‚ùå U…¥·¥ã…¥·¥è·¥°…¥ ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö. Us·¥á /start ·¥õ·¥è  ô·¥á…¢…™…¥.")
    else:
        bot.send_message(message.chat.id, "üí° Us·¥á ·¥õ ú·¥á ·¥ç·¥á…¥·¥ú  ô·¥ú·¥õ·¥õ·¥è…¥s ·¥õ·¥è …¥·¥Ä·¥†…™…¢·¥Ä·¥õ·¥á.")

# Start polling
if __name__ == "__main__":
    print("ü§ñ B·¥è·¥õ s·¥õ·¥Ä Ä·¥õ·¥á·¥Ö s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è!")
    while True:
        try:
            bot.polling(none_stop=True, timeout=60)
        except Exception as e:
            print(f"P·¥è ü ü…™…¥…¢ ·¥á Ä Ä·¥è Ä: {e}")
            time.sleep(5)