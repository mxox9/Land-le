import os
import logging
import threading
from datetime import datetime
from dotenv import load_dotenv
import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup
from pymongo import MongoClient
from apscheduler.schedulers.background import BackgroundScheduler

# Load environment variables
load_dotenv()

# Initialize bot
bot = telebot.TeleBot(os.getenv('BOT_TOKEN'))

# MongoDB setup
client = MongoClient(os.getenv('MONGO_URI'))
db = client.smm_bot
users_collection = db.users
deposits_collection = db.deposits
orders_collection = db.orders

# Global variables
ADMIN_IDS = [int(x) for x in os.getenv('ADMIN_IDS').split(',')]
CHANNEL_ID = os.getenv('CHANNEL_ID')
BOT_USERNAME = os.getenv('BOT_USERNAME')
SMM_API_KEY = os.getenv('SMM_API_KEY')
SMM_API_URL = os.getenv('SMM_API_URL')
BHARATPE_TOKEN = os.getenv('BHARATPE_TOKEN')
BHARATPE_MERCHANT_ID = os.getenv('BHARATPE_MERCHANT_ID')
SUPPORT_WHATSAPP = os.getenv('SUPPORT_WHATSAPP')

# Import modules
from services import services_list, add_service, edit_service, delete_service
from payment import create_bharatpe_payment, verify_bharatpe_payment
from smm_api import create_smm_order, check_smm_order

# Bot control flags
bot_active = True

# Stylized text function
def stylize(text):
    mapping = {
        'a': '·¥Ä', 'b': ' ô', 'c': '·¥Ñ', 'd': '·¥Ö', 'e': '·¥á', 'f': '“ì', 'g': '…¢', 'h': ' ú',
        'i': '…™', 'j': '·¥ä', 'k': '·¥ã', 'l': ' ü', 'm': '·¥ç', 'n': '…¥', 'o': '·¥è', 'p': '·¥ò',
        'q': '«´', 'r': ' Ä', 's': 's', 't': '·¥õ', 'u': '·¥ú', 'v': '·¥†', 'w': '·¥°', 'x': 'x',
        'y': ' è', 'z': '·¥¢'
    }
    result = ""
    for char in text:
        if char.lower() in mapping:
            if char.isupper():
                result += char  # Keep first letter as normal capital
            else:
                result += mapping[char]
        else:
            result += char
    return result

# Check channel membership
def check_channel_membership(user_id):
    try:
        member = bot.get_chat_member(CHANNEL_ID, user_id)
        return member.status in ['member', 'administrator', 'creator']
    except:
        return False

# Start command
@bot.message_handler(commands=['start'])
def start_command(message):
    user_id = message.from_user.id
    username = message.from_user.username or "N/A"
    
    # Check if user exists
    user = users_collection.find_one({"user_id": user_id})
    if not user:
        # Check for referral
        referral_id = None
        if len(message.text.split()) > 1:
            ref_id = message.text.split()[1]
            if ref_id.startswith('ref_'):
                referral_id = int(ref_id[4:])
        
        # Create new user
        users_collection.insert_one({
            "user_id": user_id,
            "username": username,
            "balance": 0,
            "total_deposit": 0,
            "total_spent": 0,
            "join_date": datetime.now(),
            "referred_by": referral_id,
            "banned": False
        })
        
        # Add referral bonus if applicable
        if referral_id:
            referrer = users_collection.find_one({"user_id": referral_id})
            if referrer:
                bonus = 500  # 5‚Çπ bonus
                users_collection.update_one(
                    {"user_id": referral_id},
                    {"$inc": {"balance": bonus}}
                )
                try:
                    bot.send_message(
                        referral_id,
                        stylize(f"R·¥á“ì·¥á Ä Ä·¥Ä ü B·¥è…¥·¥ús: Y·¥è·¥ú …¢·¥è·¥õ {bonus} ·¥ò·¥è…™…¥·¥õs “ì·¥è Ä  Ä·¥á“ì·¥á Ä Ä…™…¥…¢ {username}!")
                    )
                except:
                    pass
    
    # Check channel membership
    if not check_channel_membership(user_id):
        show_channel_join(message)
        return
    
    show_main_menu(message)

def show_channel_join(message):
    keyboard = InlineKeyboardMarkup()
    keyboard.add(
        InlineKeyboardButton(stylize("‚úÖ J·¥è…™…¥ C ú·¥Ä…¥…¥·¥á ü"), url=f"https://t.me/{CHANNEL_ID[1:]}"),
        InlineKeyboardButton(stylize("üîÉ C ú·¥á·¥Ñ·¥ã"), callback_data="check_join")
    )
    bot.send_message(
        message.chat.id,
        stylize("P ü·¥á·¥Äs·¥á J·¥è…™…¥ O·¥ú Ä C ú·¥Ä…¥…¥·¥á ü T·¥è Us·¥á T ú·¥á B·¥è·¥õ"),
        reply_markup=keyboard
    )

@bot.callback_query_handler(func=lambda call: call.data == "check_join")
def check_join_callback(call):
    if check_channel_membership(call.from_user.id):
        bot.delete_message(call.message.chat.id, call.message.message_id)
        show_main_menu(call.message)
    else:
        bot.answer_callback_query(call.id, stylize("P ü·¥á·¥Äs·¥á J·¥è…™…¥ T ú·¥á C ú·¥Ä…¥…¥·¥á ü F…™ Äs·¥õ"), show_alert=True)

def show_main_menu(message):
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton(stylize("üí∞ D·¥á·¥ò·¥ès…™·¥õ"), callback_data="deposit"),
        InlineKeyboardButton(stylize("üõí N·¥á·¥° O Ä·¥Ö·¥á Ä"), callback_data="new_order"),
        InlineKeyboardButton(stylize("üìã T Ä·¥Ä·¥Ñ·¥ã O Ä·¥Ö·¥á Ä"), callback_data="track_order"),
        InlineKeyboardButton(stylize("üë§ A·¥Ñ·¥Ñ·¥è·¥ú…¥·¥õ"), callback_data="account"),
        InlineKeyboardButton(stylize("üë• R·¥á“ì·¥á Ä"), callback_data="refer"),
        InlineKeyboardButton(stylize("üìä S·¥õ·¥Ä·¥õs"), callback_data="stats"),
        InlineKeyboardButton(stylize("‚ÑπÔ∏è S·¥ú·¥ò·¥ò·¥è Ä·¥õ"), callback_data="support")
    )
    keyboard.row(
        InlineKeyboardButton(stylize("H·¥è·¥° T·¥è Us·¥á"), callback_data="how_to_use"),
        InlineKeyboardButton(stylize("R·¥ás·¥õ·¥Ä Ä·¥õ"), callback_data="restart")
    )
    
    bot.send_message(
        message.chat.id,
        stylize("W·¥á ü·¥Ñ·¥è·¥ç·¥á T·¥è S·¥ç·¥ç B·¥è·¥õ! C ú·¥è·¥ès·¥á A…¥ O·¥ò·¥õ…™·¥è…¥:"),
        reply_markup=keyboard
    )

# Deposit handler
@bot.callback_query_handler(func=lambda call: call.data == "deposit")
def deposit_callback(call):
    msg = bot.send_message(call.message.chat.id, stylize("E…¥·¥õ·¥á Ä D·¥á·¥ò·¥ès…™·¥õ A·¥ç·¥è·¥ú…¥·¥õ …™…¥ ‚Çπ:"))
    bot.register_next_step_handler(msg, process_deposit_amount)

def process_deposit_amount(message):
    try:
        amount = float(message.text)
        if amount < 10:
            bot.send_message(message.chat.id, stylize("M…™…¥…™·¥ç·¥ú·¥ç D·¥á·¥ò·¥ès…™·¥õ …™s ‚Çπ10"))
            return
        
        # Create payment
        payment_data = create_bharatpe_payment(amount, message.from_user.id)
        if payment_data:
            keyboard = InlineKeyboardMarkup()
            keyboard.add(InlineKeyboardButton(stylize("P·¥Ä…™·¥Ö ‚úÖ"), callback_data=f"verify_{payment_data['transaction_id']}"))
            
            bot.send_message(
                message.chat.id,
                stylize(f"P ü·¥á·¥Äs·¥á P·¥Ä è ‚Çπ{amount} ·¥ús…™…¥…¢ B ú·¥Ä Ä·¥Ä·¥õP·¥á\n\nUPI: {payment_data['upi_id']}\nQR Code: {payment_data['qr_code']}"),
                reply_markup=keyboard
            )
        else:
            bot.send_message(message.chat.id, stylize("P·¥Ä è·¥ç·¥á…¥·¥õ F·¥Ä…™ ü·¥á·¥Ö. T Ä è A…¢·¥Ä…™…¥ L·¥Ä·¥õ·¥á Ä."))
    except ValueError:
        bot.send_message(message.chat.id, stylize("I…¥·¥†·¥Ä ü…™·¥Ö A·¥ç·¥è·¥ú…¥·¥õ. P ü·¥á·¥Äs·¥á E…¥·¥õ·¥á Ä N·¥ú·¥ç ô·¥á Ä."))

@bot.callback_query_handler(func=lambda call: call.data.startswith("verify_"))
def verify_payment_callback(call):
    transaction_id = call.data[7:]
    if verify_bharatpe_payment(transaction_id):
        deposit = deposits_collection.find_one({"transaction_id": transaction_id})
        if deposit:
            points = int(deposit['amount'] * 100)
            users_collection.update_one(
                {"user_id": call.from_user.id},
                {"$inc": {"balance": points, "total_deposit": deposit['amount']}}
            )
            
            bot.send_message(call.message.chat.id, stylize(f"P·¥Ä è·¥ç·¥á…¥·¥õ V·¥á Ä…™“ì…™·¥á·¥Ö! {points} ·¥ò·¥è…™…¥·¥õs ·¥Ä·¥Ö·¥Ö·¥á·¥Ö."))
            
            # Notify admin
            for admin_id in ADMIN_IDS:
                bot.send_message(admin_id, stylize(f"N·¥á·¥° D·¥á·¥ò·¥ès…™·¥õ: ‚Çπ{deposit['amount']} “ì Ä·¥è·¥ç ·¥ús·¥á Ä {call.from_user.id}"))
    else:
        bot.answer_callback_query(call.id, stylize("P·¥Ä è·¥ç·¥á…¥·¥õ N·¥è·¥õ V·¥á Ä…™“ì…™·¥á·¥Ö  è·¥á·¥õ"), show_alert=True)

# New Order flow
@bot.callback_query_handler(func=lambda call: call.data == "new_order")
def new_order_callback(call):
    if not bot_active:
        bot.answer_callback_query(call.id, stylize("B·¥è·¥õ …™s ·¥Ñ·¥ú Ä Ä·¥á…¥·¥õ ü è ·¥ú…¥·¥Ö·¥á Ä ·¥ç·¥Ä…™…¥·¥õ·¥á…¥·¥Ä…¥·¥Ñ·¥á"), show_alert=True)
        return
    
    keyboard = InlineKeyboardMarkup(row_width=2)
    categories = set(service['category'] for service in services_list if service['active'])
    for category in categories:
        keyboard.add(InlineKeyboardButton(stylize(category), callback_data=f"category_{category}"))
    
    bot.send_message(call.message.chat.id, stylize("S·¥á ü·¥á·¥Ñ·¥õ C·¥Ä·¥õ·¥á…¢·¥è Ä è:"), reply_markup=keyboard)

@bot.callback_query_handler(func=lambda call: call.data.startswith("category_"))
def category_callback(call):
    category = call.data[9:]
    services = [s for s in services_list if s['category'] == category and s['active']]
    
    keyboard = InlineKeyboardMarkup()
    for service in services:
        keyboard.add(InlineKeyboardButton(
            stylize(f"{service['name']} - ‚Çπ{service['price_per_unit']}/{service['unit']}"),
            callback_data=f"service_{service['id']}"
        ))
    
    bot.send_message(call.message.chat.id, stylize("S·¥á ü·¥á·¥Ñ·¥õ S·¥á Ä·¥†…™·¥Ñ·¥á:"), reply_markup=keyboard)

@bot.callback_query_handler(func=lambda call: call.data.startswith("service_"))
def service_callback(call):
    service_id = int(call.data[8:])
    service = next((s for s in services_list if s['id'] == service_id), None)
    
    if service:
        msg = bot.send_message(
            call.message.chat.id,
            stylize(f"S·¥á Ä·¥†…™·¥Ñ·¥á: {service['name']}\nD·¥ás·¥Ñ Ä…™·¥ò·¥õ…™·¥è…¥: {service['description']}\nP Ä…™·¥Ñ·¥á: ‚Çπ{service['price_per_unit']} ·¥ò·¥á Ä {service['unit']}\nM…™…¥: {service['min']}, M·¥Äx: {service['max']}\n\nS·¥á…¥·¥Ö L…™…¥·¥ã:")
        )
        bot.register_next_step_handler(msg, process_order_link, service)

def process_order_link(message, service):
    link = message.text
    msg = bot.send_message(message.chat.id, stylize(f"E…¥·¥õ·¥á Ä Q·¥ú·¥Ä…¥·¥õ…™·¥õ è ({service['min']}-{service['max']}):"))
    bot.register_next_step_handler(msg, process_order_quantity, service, link)

def process_order_quantity(message, service, link):
    try:
        quantity = int(message.text)
        if quantity < service['min'] or quantity > service['max']:
            bot.send_message(message.chat.id, stylize(f"Q·¥ú·¥Ä…¥·¥õ…™·¥õ è M·¥ús·¥õ  ô·¥á  ô·¥á·¥õ·¥°·¥á·¥á…¥ {service['min']} ·¥Ä…¥·¥Ö {service['max']}"))
            return
        
        cost = quantity * service['price_per_unit']
        user = users_collection.find_one({"user_id": message.from_user.id})
        
        if user['balance'] < cost:
            bot.send_message(message.chat.id, stylize("I…¥s·¥ú“ì“ì…™·¥Ñ…™·¥á…¥·¥õ B·¥Ä ü·¥Ä…¥·¥Ñ·¥á. P ü·¥á·¥Äs·¥á D·¥á·¥ò·¥ès…™·¥õ F…™ Äs·¥õ."))
            return
        
        # Create order
        order_result = create_smm_order(service, link, quantity)
        if order_result:
            # Deduct balance
            users_collection.update_one(
                {"user_id": message.from_user.id},
                {"$inc": {"balance": -cost, "total_spent": cost}}
            )
            
            # Save order to database
            order_data = {
                "user_id": message.from_user.id,
                "service_id": service['id'],
                "service_name": service['name'],
                "link": link,
                "quantity": quantity,
                "cost": cost,
                "status": "Pending",
                "order_id": order_result['order_id'],
                "created_at": datetime.now(),
                "api_id": order_result.get('api_id')
            }
            orders_collection.insert_one(order_data)
            
            # Notify user
            keyboard = InlineKeyboardMarkup()
            keyboard.add(InlineKeyboardButton(stylize("B·¥è·¥õ H·¥á Ä·¥á üà¥"), url=f"https://t.me/{BOT_USERNAME}"))
            
            bot.send_message(
                message.chat.id,
                stylize(f"O Ä·¥Ö·¥á Ä P ü·¥Ä·¥Ñ·¥á·¥Ö S·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è!\nO Ä·¥Ö·¥á Ä ID: {order_result['order_id']}\nS·¥á Ä·¥†…™·¥Ñ·¥á: {service['name']}\nQ·¥ú·¥Ä…¥·¥õ…™·¥õ è: {quantity}\nC·¥ès·¥õ: {cost} ·¥ò·¥è…™…¥·¥õs"),
                reply_markup=keyboard
            )
            
            # Notify admin
            for admin_id in ADMIN_IDS:
                bot.send_message(
                    admin_id,
                    stylize(f"N·¥á·¥° O Ä·¥Ö·¥á Ä!\nUs·¥á Ä: {message.from_user.id}\nS·¥á Ä·¥†…™·¥Ñ·¥á: {service['name']}\nO Ä·¥Ö·¥á Ä ID: {order_result['order_id']}"),
                    reply_markup=keyboard
                )
        else:
            bot.send_message(message.chat.id, stylize("O Ä·¥Ö·¥á Ä F·¥Ä…™ ü·¥á·¥Ö. P ü·¥á·¥Äs·¥á T Ä è A…¢·¥Ä…™…¥ L·¥Ä·¥õ·¥á Ä."))
    except ValueError:
        bot.send_message(message.chat.id, stylize("I…¥·¥†·¥Ä ü…™·¥Ö Q·¥ú·¥Ä…¥·¥õ…™·¥õ è. P ü·¥á·¥Äs·¥á E…¥·¥õ·¥á Ä N·¥ú·¥ç ô·¥á Ä."))

# Track Order
@bot.callback_query_handler(func=lambda call: call.data == "track_order")
def track_order_callback(call):
    msg = bot.send_message(call.message.chat.id, stylize("E…¥·¥õ·¥á Ä O Ä·¥Ö·¥á Ä ID:"))
    bot.register_next_step_handler(msg, process_track_order)

def process_track_order(message):
    order_id = message.text
    order = orders_collection.find_one({"order_id": order_id, "user_id": message.from_user.id})
    
    if order:
        # Check status from SMM API
        status = check_smm_order(order['api_id']) if order.get('api_id') else order['status']
        
        bot.send_message(
            message.chat.id,
            stylize(f"O Ä·¥Ö·¥á Ä D·¥á·¥õ·¥Ä…™ üs:\nS·¥á Ä·¥†…™·¥Ñ·¥á: {order['service_name']}\nO Ä·¥Ö·¥á Ä ID: {order['order_id']}\nQ·¥ú·¥Ä…¥·¥õ…™·¥õ è: {order['quantity']}\nC·¥ès·¥õ: {order['cost']} ·¥ò·¥è…™…¥·¥õs\nS·¥õ·¥Ä·¥õ·¥ús: {status}")
        )
    else:
        bot.send_message(message.chat.id, stylize("O Ä·¥Ö·¥á Ä N·¥è·¥õ F·¥è·¥ú…¥·¥Ö"))

# Account
@bot.callback_query_handler(func=lambda call: call.data == "account")
def account_callback(call):
    user = users_collection.find_one({"user_id": call.from_user.id})
    if user:
        balance_rupees = user['balance'] / 100
        
        bot.send_message(
            call.message.chat.id,
            stylize(f"A·¥Ñ·¥Ñ·¥è·¥ú…¥·¥õ D·¥á·¥õ·¥Ä…™ üs:\n\nUs·¥á Ä ID: {user['user_id']}\nB·¥Ä ü·¥Ä…¥·¥Ñ·¥á: {user['balance']} ·¥ò·¥è…™…¥·¥õs (‚Çπ{balance_rupees:.2f})\nT·¥è·¥õ·¥Ä ü D·¥á·¥ò·¥ès…™·¥õ: ‚Çπ{user['total_deposit']}\nT·¥è·¥õ·¥Ä ü S·¥ò·¥á…¥·¥õ: {user['total_spent']} ·¥ò·¥è…™…¥·¥õs\nJ·¥è…™…¥ D·¥Ä·¥õ·¥á: {user['join_date'].strftime('%Y-%m-%d %H:%M')}")
        )

# Referral
@bot.callback_query_handler(func=lambda call: call.data == "refer")
def refer_callback(call):
    referral_link = f"https://t.me/{BOT_USERNAME}?start=ref_{call.from_user.id}"
    bot.send_message(
        call.message.chat.id,
        stylize(f"R·¥á“ì·¥á Ä & E·¥Ä Ä…¥!\n\nS ú·¥Ä Ä·¥á Y·¥è·¥ú Ä R·¥á“ì·¥á Ä Ä·¥Ä ü L…™…¥·¥ã:\n{referral_link}\n\nY·¥è·¥ú …¢·¥á·¥õ 500 ·¥ò·¥è…™…¥·¥õs “ì·¥è Ä ·¥á·¥Ä·¥Ñ ú  Ä·¥á“ì·¥á Ä Ä·¥Ä ü!")
    )

# Stats
@bot.callback_query_handler(func=lambda call: call.data == "stats")
def stats_callback(call):
    total_users = users_collection.count_documents({})
    total_orders = orders_collection.count_documents({})
    total_deposit = users_collection.aggregate([{"$group": {"_id": None, "total": {"$sum": "$total_deposit"}}}]).next()['total']
    
    bot.send_message(
        call.message.chat.id,
        stylize(f"B·¥è·¥õ S·¥õ·¥Ä·¥õ…™s·¥õ…™·¥Ñs:\n\nT·¥è·¥õ·¥Ä ü Us·¥á Äs: {total_users}\nT·¥è·¥õ·¥Ä ü O Ä·¥Ö·¥á Äs: {total_orders}\nT·¥è·¥õ·¥Ä ü D·¥á·¥ò·¥ès…™·¥õ: ‚Çπ{total_deposit}")
    )

# Support
@bot.callback_query_handler(func=lambda call: call.data == "support")
def support_callback(call):
    keyboard = InlineKeyboardMarkup()
    keyboard.add(
        InlineKeyboardButton(stylize("C·¥è…¥·¥õ·¥Ä·¥Ñ·¥õ Us"), url=SUPPORT_WHATSAPP),
        InlineKeyboardButton(stylize("B·¥Ä·¥Ñ·¥ã"), callback_data="main_menu")
    )
    
    bot.send_photo(
        call.message.chat.id,
        photo=open('support.jpg', 'rb') if os.path.exists('support.jpg') else None,
        caption=stylize("C·¥è…¥·¥õ·¥Ä·¥Ñ·¥õ O·¥ú Ä S·¥ú·¥ò·¥ò·¥è Ä·¥õ T·¥á·¥Ä·¥ç F·¥è Ä A…¥ è H·¥á ü·¥ò:"),
        reply_markup=keyboard
    )

# How to Use
@bot.callback_query_handler(func=lambda call: call.data == "how_to_use")
def how_to_use_callback(call):
    instructions = """
1. üí∞ D·¥á·¥ò·¥ès…™·¥õ - A·¥Ö·¥Ö “ì·¥ú…¥·¥Ös ·¥õ·¥è  è·¥è·¥ú Ä ·¥Ä·¥Ñ·¥Ñ·¥è·¥ú…¥·¥õ
2. üõí N·¥á·¥° O Ä·¥Ö·¥á Ä - P ü·¥Ä·¥Ñ·¥á …¥·¥á·¥° SMM ·¥è Ä·¥Ö·¥á Äs
3. üìã T Ä·¥Ä·¥Ñ·¥ã O Ä·¥Ö·¥á Ä - C ú·¥á·¥Ñ·¥ã ·¥è Ä·¥Ö·¥á Ä s·¥õ·¥Ä·¥õ·¥ús
4. üë§ A·¥Ñ·¥Ñ·¥è·¥ú…¥·¥õ - V…™·¥á·¥°  è·¥è·¥ú Ä ·¥Ä·¥Ñ·¥Ñ·¥è·¥ú…¥·¥õ …™…¥“ì·¥è
5. üë• R·¥á“ì·¥á Ä - E·¥Ä Ä…¥  ô è  Ä·¥á“ì·¥á Ä Ä…™…¥…¢ “ì Ä…™·¥á…¥·¥Ös
6. üìä S·¥õ·¥Ä·¥õs - V…™·¥á·¥°  ô·¥è·¥õ s·¥õ·¥Ä·¥õ…™s·¥õ…™·¥Ñs
7. ‚ÑπÔ∏è S·¥ú·¥ò·¥ò·¥è Ä·¥õ - G·¥á·¥õ  ú·¥á ü·¥ò
"""
    bot.send_message(call.message.chat.id, stylize(instructions))

# Restart
@bot.callback_query_handler(func=lambda call: call.data == "restart")
def restart_callback(call):
    start_command(call.message)

# Main menu callback
@bot.callback_query_handler(func=lambda call: call.data == "main_menu")
def main_menu_callback(call):
    show_main_menu(call.message)

# Admin Panel
@bot.message_handler(commands=['admin'])
def admin_panel(message):
    if message.from_user.id not in ADMIN_IDS:
        return
    
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton(stylize("üì¶ M·¥Ä…¥·¥Ä…¢·¥á S·¥á Ä·¥†…™·¥Ñ·¥ás"), callback_data="admin_services"),
        InlineKeyboardButton(stylize("üí∞ B·¥Ä ü·¥Ä…¥·¥Ñ·¥á C·¥è…¥·¥õ Ä·¥è ü"), callback_data="admin_balance"),
        InlineKeyboardButton(stylize("üë• Us·¥á Ä C·¥è…¥·¥õ Ä·¥è ü"), callback_data="admin_users"),
        InlineKeyboardButton(stylize("üì¢ B Ä·¥è·¥Ä·¥Ö·¥Ñ·¥Äs·¥õ"), callback_data="admin_broadcast"),
        InlineKeyboardButton(stylize("‚öôÔ∏è B·¥è·¥õ C·¥è…¥·¥õ Ä·¥è ü"), callback_data="admin_bot")
    )
    
    bot.send_message(message.chat.id, stylize("A·¥Ö·¥ç…™…¥ P·¥Ä…¥·¥á ü:"), reply_markup=keyboard)

# Refund system
def check_pending_orders():
    pending_orders = orders_collection.find({"status": {"$in": ["Pending", "In progress"]}})
    
    for order in pending_orders:
        status = check_smm_order(order.get('api_id'))
        if status in ["Cancelled", "Partial"]:
            # Refund points
            users_collection.update_one(
                {"user_id": order['user_id']},
                {"$inc": {"balance": order['cost']}}
            )
            
            # Update order status
            orders_collection.update_one(
                {"_id": order['_id']},
                {"$set": {"status": status}}
            )
            
            # Notify user
            try:
                bot.send_message(
                    order['user_id'],
                    stylize(f"O Ä·¥Ö·¥á Ä R·¥á“ì·¥ú…¥·¥Ö·¥á·¥Ö!\nO Ä·¥Ö·¥á Ä ID: {order['order_id']}\nS·¥õ·¥Ä·¥õ·¥ús: {status}\nA·¥ç·¥è·¥ú…¥·¥õ: {order['cost']} ·¥ò·¥è…™…¥·¥õs  Ä·¥á“ì·¥ú…¥·¥Ö·¥á·¥Ö")
                )
            except:
                pass
            
            # Notify admin
            for admin_id in ADMIN_IDS:
                bot.send_message(
                    admin_id,
                    stylize(f"O Ä·¥Ö·¥á Ä R·¥á“ì·¥ú…¥·¥Ö·¥á·¥Ö!\nUs·¥á Ä: {order['user_id']}\nO Ä·¥Ö·¥á Ä ID: {order['order_id']}\nA·¥ç·¥è·¥ú…¥·¥õ: {order['cost']} ·¥ò·¥è…™…¥·¥õs")
                )

# Start scheduler
scheduler = BackgroundScheduler()
scheduler.add_job(check_pending_orders, 'interval', minutes=30)
scheduler.start()

# Start bot
if __name__ == "__main__":
    print("Bot started...")
    bot.infinity_polling()
