import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
import os
import services
from database import (
    get_user, update_user_balance, create_order, get_user_orders,
    get_order_by_id, is_bot_accepting_orders, users_collection, orders_collection
)
from utils import style_text, validate_amount, validate_quantity
from keyboards import (
    main_menu_keyboard, service_category_keyboard, services_keyboard,
    order_confirmation_keyboard, back_button_only, support_keyboard,
    deposit_confirmation_keyboard
)
from payment import create_payment, verify_payment, get_upi_payment_text
from smm_api import place_smm_order

# User states for conversation flow
user_states = {}

def setup_user_handlers(bot):
    """Setup all user handlers"""
    
    def check_channel_membership(user_id, channel_id):
        """Check if user is member of channel"""
        try:
            if channel_id.startswith('@'):
                channel_id = channel_id[1:]
            member = bot.get_chat_member(f"@{channel_id}", user_id)
            return member.status in ['member', 'administrator', 'creator']
        except Exception as e:
            print(f"Channel check error: {e}")
            return False

    @bot.message_handler(commands=['start'])
    def send_welcome(message):
        user_id = message.chat.id
        user_name = message.chat.first_name
        
        # Check if user is banned
        user = get_user(user_id)
        if user.get("banned"):
            bot.reply_to(message, style_text("‚ùå Y·¥è·¥ú ·¥Ä Ä·¥á  ô·¥Ä…¥…¥·¥á·¥Ö “ì Ä·¥è·¥ç ·¥ús…™…¥…¢ ·¥õ ú…™s  ô·¥è·¥õ."))
            return
        
        # Check channel membership
        channel_id = os.getenv('CHANNEL_ID', 'prooflelo1')
        if not check_channel_membership(user_id, channel_id):
            text = style_text(f"""
üëã W·¥á ü·¥Ñ·¥è·¥ç·¥á {user_name}!

üì¢ P ü·¥á·¥Äs·¥á ·¥ä·¥è…™…¥ ·¥è·¥ú Ä ·¥Ñ ú·¥Ä…¥…¥·¥á ü ·¥õ·¥è ·¥ús·¥á ·¥õ ú·¥á  ô·¥è·¥õ:

@{channel_id}

A“ì·¥õ·¥á Ä ·¥ä·¥è…™…¥…™…¥…¢, ·¥Ñ ü…™·¥Ñ·¥ã ·¥õ ú·¥á ·¥Ñ ú·¥á·¥Ñ·¥ã  ô·¥ú·¥õ·¥õ·¥è…¥.
            """)
            from keyboards import channel_join_keyboard
            bot.send_message(user_id, text, reply_markup=channel_join_keyboard())
            return
        
        # Show main menu
        text = style_text(f"""
üëã W·¥á ü·¥Ñ·¥è·¥ç·¥á {user_name}!

ü§ñ I'·¥ç M·¥ès·¥õ A“ì“ì·¥è Ä·¥Ö·¥Ä ô ü·¥á S·¥è·¥Ñ…™·¥Ä ü S·¥á Ä·¥†…™·¥Ñ·¥ás B·¥è·¥õ. 
I ·¥ò Ä·¥è·¥†…™·¥Ö·¥á ·¥Ñ ú·¥á·¥Ä·¥ò s·¥è·¥Ñ…™·¥Ä ü ·¥ç·¥á·¥Ö…™·¥Ä s·¥á Ä·¥†…™·¥Ñ·¥ás ·¥Ä·¥õ ·¥õ ú·¥á  ô·¥ás·¥õ ·¥ò Ä…™·¥Ñ·¥ás.

üí∞ G·¥á·¥õ s·¥õ·¥Ä Ä·¥õ·¥á·¥Ö  ô è ·¥Ä·¥Ö·¥Ö…™…¥…¢ “ì·¥ú…¥·¥Ös ·¥õ·¥è  è·¥è·¥ú Ä ·¥Ä·¥Ñ·¥Ñ·¥è·¥ú…¥·¥õ.
        """)
        
        bot.send_message(user_id, text, reply_markup=main_menu_keyboard())

    @bot.callback_query_handler(func=lambda call: not call.data.startswith('admin_'))
    def handle_user_callbacks(call):
        user_id = call.message.chat.id
        
        # Check if user is banned
        user = get_user(user_id)
        if user.get("banned"):
            bot.answer_callback_query(call.id, style_text("‚ùå Y·¥è·¥ú ·¥Ä Ä·¥á  ô·¥Ä…¥…¥·¥á·¥Ö!"), show_alert=True)
            return
        
        try:
            if call.data == "main_menu":
                show_main_menu(bot, call)
            
            elif call.data == "deposit":
                start_deposit_process(bot, call)
            
            elif call.data == "order_menu":
                show_service_categories(bot, call)
            
            elif call.data == "history":
                show_order_history(bot, call)
            
            elif call.data == "refer":
                show_referral_info(bot, call)
            
            elif call.data == "account":
                show_account_info(bot, call)
            
            elif call.data == "stats":
                show_stats(bot, call)
            
            elif call.data == "support":
                show_support(bot, call)
            
            elif call.data == "how_to_use":
                show_how_to_use(bot, call)
            
            elif call.data == "restart":
                send_welcome(call.message)
            
            elif call.data.startswith("category_"):
                category = call.data.replace("category_", "")
                show_services(bot, call, category)
            
            elif call.data.startswith("service_"):
                service_id = call.data.replace("service_", "")
                start_order_process(bot, call, service_id)
            
            elif call.data == "confirm_order":
                confirm_order(bot, call)
            
            elif call.data == "confirm_deposit":
                process_deposit_confirmation(bot, call)
            
            elif call.data == "check_join":
                check_channel_join(bot, call)
                
        except Exception as e:
            print(f"User callback error: {e}")
            bot.answer_callback_query(call.id, style_text("‚ùå A…¥ ·¥á Ä Ä·¥è Ä ·¥è·¥Ñ·¥Ñ·¥ú Ä Ä·¥á·¥Ö!"))

    # User menu functions
    def show_main_menu(bot, call):
        user_id = call.message.chat.id
        user_name = call.from_user.first_name
        text = style_text(f"üëã H·¥á ü ü·¥è {user_name}!\n\nS·¥á ü·¥á·¥Ñ·¥õ ·¥Ä…¥ ·¥è·¥ò·¥õ…™·¥è…¥:")
        try:
            bot.edit_message_text(
                chat_id=user_id,
                message_id=call.message.message_id,
                text=text,
                reply_markup=main_menu_keyboard()
            )
        except:
            bot.send_message(user_id, text, reply_markup=main_menu_keyboard())

    def start_deposit_process(bot, call):
        user_id = call.message.chat.id
        user_states[user_id] = {"action": "depositing", "step": "amount"}
        
        text = style_text("""
üíµ D·¥á·¥ò·¥ès…™·¥õ F·¥ú…¥·¥Ös

üí∏ 100 ·¥ò·¥è…™…¥·¥õs = ‚Çπ1

E…¥·¥õ·¥á Ä ·¥õ ú·¥á ·¥Ä·¥ç·¥è·¥ú…¥·¥õ  è·¥è·¥ú ·¥°·¥Ä…¥·¥õ ·¥õ·¥è ·¥Ö·¥á·¥ò·¥ès…™·¥õ (…™…¥  Ä·¥ú·¥ò·¥á·¥ás):
        """)
        
        try:
            bot.edit_message_text(
                chat_id=user_id,
                message_id=call.message.message_id,
                text=text
            )
        except:
            bot.send_message(user_id, text)
        bot.register_next_step_handler(call.message, process_deposit_amount)

    def process_deposit_amount(message):
        user_id = message.chat.id
        if user_id not in user_states or user_states[user_id].get("action") != "depositing":
            return
        
        is_valid, result = validate_amount(message.text)
        if not is_valid:
            bot.send_message(user_id, style_text(result))
            return
        
        amount = result
        points = int(amount * 100)
        user_states[user_id]["amount"] = amount
        user_states[user_id]["points"] = points
        
        # Create payment
        payment_data = create_payment(amount, user_id)
        
        # Send payment instructions
        payment_text = get_upi_payment_text(amount, payment_data["upi_id"])
        
        bot.send_message(user_id, payment_text, reply_markup=deposit_confirmation_keyboard())

    def process_deposit_confirmation(bot, call):
        user_id = call.message.chat.id
        if user_id not in user_states or user_states[user_id].get("action") != "depositing":
            return
        
        data = user_states[user_id]
        amount = data["amount"]
        points = data["points"]
        
        # Verify payment
        verifying_msg = bot.send_message(user_id, "üîç V·¥á Ä…™“ì è…™…¥…¢ ·¥ò·¥Ä è·¥ç·¥á…¥·¥õ...")
        
        # For demo, we'll assume payment is verified
        # In real implementation, use actual verification
        payment_verified = True
        
        if payment_verified:
            # Add points to user balance
            new_balance = update_user_balance(user_id, points, is_deposit=True)
            
            text = style_text(f"""
‚úÖ D·¥á·¥ò·¥ès…™·¥õ S·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü!

üíµ A·¥ç·¥è·¥ú…¥·¥õ: ‚Çπ{amount}
üí∏ P·¥è…™…¥·¥õs A·¥Ö·¥Ö·¥á·¥Ö: {points} ·¥ò·¥è…™…¥·¥õs
üí≥ N·¥á·¥° B·¥Ä ü·¥Ä…¥·¥Ñ·¥á: {new_balance} ·¥ò·¥è…™…¥·¥õs
            """)
            
            bot.edit_message_text(
                chat_id=user_id,
                message_id=verifying_msg.message_id,
                text=text,
                reply_markup=back_button_only()
            )
        else:
            bot.edit_message_text(
                chat_id=user_id,
                message_id=verifying_msg.message_id,
                text=style_text("‚ùå P·¥Ä è·¥ç·¥á…¥·¥õ …¥·¥è·¥õ ·¥†·¥á Ä…™“ì…™·¥á·¥Ö! P ü·¥á·¥Äs·¥á ·¥õ Ä è ·¥Ä…¢·¥Ä…™…¥."),
                reply_markup=back_button_only()
            )
        
        del user_states[user_id]

    def show_service_categories(bot, call):
        user_id = call.message.chat.id
        
        if not is_bot_accepting_orders():
            bot.answer_callback_query(call.id, style_text("‚ùå B·¥è·¥õ …™s ·¥Ñ·¥ú Ä Ä·¥á…¥·¥õ ü è …¥·¥è·¥õ ·¥Ä·¥Ñ·¥Ñ·¥á·¥ò·¥õ…™…¥…¢ ·¥è Ä·¥Ö·¥á Äs!"), show_alert=True)
            return
        
        text = style_text("üõí S·¥á ü·¥á·¥Ñ·¥õ C·¥Ä·¥õ·¥á…¢·¥è Ä è:")
        try:
            bot.edit_message_text(
                chat_id=user_id,
                message_id=call.message.message_id,
                text=text,
                reply_markup=service_category_keyboard()
            )
        except:
            bot.send_message(user_id, text, reply_markup=service_category_keyboard())

    def show_services(bot, call, category):
        user_id = call.message.chat.id
        text = style_text(f"üì± {category} S·¥á Ä·¥†…™·¥Ñ·¥ás\n\nS·¥á ü·¥á·¥Ñ·¥õ ·¥Ä s·¥á Ä·¥†…™·¥Ñ·¥á:")
        try:
            bot.edit_message_text(
                chat_id=user_id,
                message_id=call.message.message_id,
                text=text,
                reply_markup=services_keyboard(category)
            )
        except:
            bot.send_message(user_id, text, reply_markup=services_keyboard(category))

    def start_order_process(bot, call, service_id):
        user_id = call.message.chat.id
        service = services.get_service_by_id(service_id)
        
        if not service:
            bot.answer_callback_query(call.id, style_text("‚ùå S·¥á Ä·¥†…™·¥Ñ·¥á …¥·¥è·¥õ “ì·¥è·¥ú…¥·¥Ö!"))
            return
        
        user_states[user_id] = {
            "action": "ordering",
            "service_id": service_id,
            "service": service,
            "step": "link"
        }
        
        text = style_text(f"""
üõí O Ä·¥Ö·¥á Ä: {service['name']}

üìù {service['description']}
üí∞ P Ä…™·¥Ñ·¥á: {service['price_per_unit']} ·¥ò·¥è…™…¥·¥õs ·¥ò·¥á Ä {service['unit']}
üî¢ R·¥Ä…¥…¢·¥á: {service['min']} - {service['max']}

P ü·¥á·¥Äs·¥á s·¥á…¥·¥Ö ·¥õ ú·¥á  ü…™…¥·¥ã:
        """)
        
        try:
            bot.edit_message_text(
                chat_id=user_id,
                message_id=call.message.message_id,
                text=text
            )
        except:
            bot.send_message(user_id, text)
        bot.register_next_step_handler(call.message, process_order_link)

    def process_order_link(message):
        user_id = message.chat.id
        if user_id not in user_states or user_states[user_id].get("action") != "ordering":
            return
        
        link = message.text.strip()
        user_states[user_id]["link"] = link
        user_states[user_id]["step"] = "quantity"
        
        service = user_states[user_id]["service"]
        bot.send_message(user_id, style_text(f"üî¢ E…¥·¥õ·¥á Ä «´·¥ú·¥Ä…¥·¥õ…™·¥õ è ({service['min']} - {service['max']}):"))

    def process_order_quantity(message):
        user_id = message.chat.id
        if user_id not in user_states or user_states[user_id].get("action") != "ordering":
            return
        
        service = user_states[user_id]["service"]
        is_valid, result = validate_quantity(message.text, service["min"], service["max"])
        if not is_valid:
            bot.send_message(user_id, style_text(result))
            return
        
        quantity = result
        cost_points = (quantity / service["unit"]) * service["price_per_unit"]
        
        # Check balance
        user_balance = get_user(user_id)["balance_points"]
        if user_balance < cost_points:
            bot.send_message(user_id, style_text(f"‚ùå I…¥s·¥ú“ì“ì…™·¥Ñ…™·¥á…¥·¥õ  ô·¥Ä ü·¥Ä…¥·¥Ñ·¥á! Y·¥è·¥ú …¥·¥á·¥á·¥Ö {cost_points} ·¥ò·¥è…™…¥·¥õs."))
            del user_states[user_id]
            return
        
        user_states[user_id]["quantity"] = quantity
        user_states[user_id]["cost_points"] = cost_points
        
        text = style_text(f"""
üõí O Ä·¥Ö·¥á Ä C·¥è…¥“ì…™ Ä·¥ç·¥Ä·¥õ…™·¥è…¥

üì± S·¥á Ä·¥†…™·¥Ñ·¥á: {service['name']}
üîó L…™…¥·¥ã: {user_states[user_id]['link']}
üî¢ Q·¥ú·¥Ä…¥·¥õ…™·¥õ è: {quantity}
üí∞ C·¥ès·¥õ: {cost_points} ·¥ò·¥è…™…¥·¥õs

C·¥è…¥“ì…™ Ä·¥ç ·¥è Ä·¥Ö·¥á Ä?
        """)
        
        bot.send_message(user_id, text, reply_markup=order_confirmation_keyboard())

    def confirm_order(bot, call):
        user_id = call.message.chat.id
        if user_id not in user_states or user_states[user_id].get("action") != "ordering":
            return
        
        data = user_states[user_id]
        service = data["service"]
        
        processing_msg = bot.send_message(user_id, "üîÑ P Ä·¥è·¥Ñ·¥áss…™…¥…¢  è·¥è·¥ú Ä ·¥è Ä·¥Ö·¥á Ä...")
        
        # Place order via SMM API
        api_order_id = place_smm_order(service["service_id"], data["link"], data["quantity"])
        
        if api_order_id:
            # Deduct balance and create order
            new_balance = update_user_balance(user_id, -int(data["cost_points"]), is_spent=True)
            order = create_order(user_id, service, data["link"], data["quantity"], int(data["cost_points"]), api_order_id)
            
            text = style_text(f"""
‚úÖ O Ä·¥Ö·¥á Ä P ü·¥Ä·¥Ñ·¥á·¥Ö S·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è!

üÜî O Ä·¥Ö·¥á Ä ID: {order['order_id']}
üì± S·¥á Ä·¥†…™·¥Ñ·¥á: {service['name']}
üî¢ Q·¥ú·¥Ä…¥·¥õ…™·¥õ è: {data['quantity']}
üí∞ C·¥ès·¥õ: {data['cost_points']} ·¥ò·¥è…™…¥·¥õs
üí≥ N·¥á·¥° B·¥Ä ü·¥Ä…¥·¥Ñ·¥á: {new_balance} ·¥ò·¥è…™…¥·¥õs

üìä S·¥õ·¥Ä·¥õ·¥ús: P·¥á…¥·¥Ö…™…¥…¢
            """)
            
            bot.edit_message_text(
                chat_id=user_id,
                message_id=processing_msg.message_id,
                text=text,
                reply_markup=back_button_only()
            )
            
            # Send to proof channel
            send_order_to_channel(bot, order)
        else:
            bot.edit_message_text(
                chat_id=user_id,
                message_id=processing_msg.message_id,
                text=style_text("‚ùå F·¥Ä…™ ü·¥á·¥Ö ·¥õ·¥è ·¥ò ü·¥Ä·¥Ñ·¥á ·¥è Ä·¥Ö·¥á Ä. P ü·¥á·¥Äs·¥á ·¥õ Ä è ·¥Ä…¢·¥Ä…™…¥  ü·¥Ä·¥õ·¥á Ä."),
                reply_markup=back_button_only()
            )
        
        del user_states[user_id]

    def show_order_history(bot, call):
        user_id = call.message.chat.id
        orders = get_user_orders(user_id)
        
        if not orders:
            text = style_text("üìã Y·¥è·¥ú  ú·¥Ä·¥†·¥á …¥·¥è ·¥è Ä·¥Ö·¥á Äs  è·¥á·¥õ.")
        else:
            text = style_text("üìã Y·¥è·¥ú Ä R·¥á·¥Ñ·¥á…¥·¥õ O Ä·¥Ö·¥á Äs:\n\n")
            for order in orders:
                status_emoji = "‚úÖ" if order["status"] == "Completed" else "‚è≥" if order["status"] == "Processing" else "‚ùå"
                text += style_text(f"""
{status_emoji} O Ä·¥Ö·¥á Ä ID: {order['order_id']}
üì± S·¥á Ä·¥†…™·¥Ñ·¥á: {order['service_name']}
üî¢ Q·¥ú·¥Ä…¥·¥õ…™·¥õ è: {order['quantity']}
üí∞ C·¥ès·¥õ: {order['cost_points']} ·¥ò·¥è…™…¥·¥õs
üìä S·¥õ·¥Ä·¥õ·¥ús: {order['status']}
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
                """)
        
        bot.send_message(user_id, text, reply_markup=back_button_only())

    def show_account_info(bot, call):
        user_id = call.message.chat.id
        user = get_user(user_id)
        balance = user["balance_points"]
        total_orders = len(get_user_orders(user_id))
        
        text = style_text(f"""
üë§ A·¥Ñ·¥Ñ·¥è·¥ú…¥·¥õ I…¥“ì·¥è Ä·¥ç·¥Ä·¥õ…™·¥è…¥

üÜî Us·¥á Ä ID: {user_id}
üí∞ B·¥Ä ü·¥Ä…¥·¥Ñ·¥á: {balance} ·¥ò·¥è…™…¥·¥õs (‚Çπ{balance/100:.2f})
üì• T·¥è·¥õ·¥Ä ü D·¥á·¥ò·¥ès…™·¥õ·¥á·¥Ö: {user.get('total_deposits_points', 0)} ·¥ò·¥è…™…¥·¥õs
üì§ T·¥è·¥õ·¥Ä ü S·¥ò·¥á…¥·¥õ: {user.get('total_spent_points', 0)} ·¥ò·¥è…™…¥·¥õs
üõí T·¥è·¥õ·¥Ä ü O Ä·¥Ö·¥á Äs: {total_orders}
üìÖ J·¥è…™…¥·¥á·¥Ö: {user['joined_at'].strftime('%Y-%m-%d')}

üí∏ 100 ·¥ò·¥è…™…¥·¥õs = ‚Çπ1
        """)
        
        bot.send_message(user_id, text, reply_markup=back_button_only())

    def show_stats(bot, call):
        user_id = call.message.chat.id
        total_users = users_collection.count_documents({})
        total_orders = orders_collection.count_documents({})
        
        text = style_text(f"""
üìä B·¥è·¥õ S·¥õ·¥Ä·¥õ…™s·¥õ…™·¥Ñs

üë§ T·¥è·¥õ·¥Ä ü Us·¥á Äs: {total_users}
üõí T·¥è·¥õ·¥Ä ü O Ä·¥Ö·¥á Äs: {total_orders}
üì± A·¥Ñ·¥õ…™·¥†·¥á S·¥á Ä·¥†…™·¥Ñ·¥ás: {len(services.get_all_services())}
        """)
        
        bot.send_message(user_id, text, reply_markup=back_button_only())

    def show_support(bot, call):
        user_id = call.message.chat.id
        text = style_text("""
üÜò S·¥ú·¥ò·¥ò·¥è Ä·¥õ

üìû C·¥è…¥·¥õ·¥Ä·¥Ñ·¥õ ·¥ús “ì·¥è Ä:
‚Ä¢ A·¥Ñ·¥Ñ·¥è·¥ú…¥·¥õ …™ss·¥ú·¥ás
‚Ä¢ D·¥á·¥ò·¥ès…™·¥õ  ú·¥á ü·¥ò
‚Ä¢ O Ä·¥Ö·¥á Ä ·¥ò Ä·¥è ô ü·¥á·¥çs
‚Ä¢ G·¥á…¥·¥á Ä·¥Ä ü «´·¥ú·¥ás·¥õ…™·¥è…¥s

‚è∞ S·¥ú·¥ò·¥ò·¥è Ä·¥õ  ú·¥è·¥ú Äs: 24/7
        """)
        
        bot.send_message(user_id, text, reply_markup=support_keyboard())

    def show_how_to_use(bot, call):
        user_id = call.message.chat.id
        text = style_text("""
üìñ H·¥è·¥° T·¥è Us·¥á

1. üí∞ D·¥á·¥ò·¥ès…™·¥õ - A·¥Ö·¥Ö “ì·¥ú…¥·¥Ös ·¥õ·¥è  è·¥è·¥ú Ä ·¥Ä·¥Ñ·¥Ñ·¥è·¥ú…¥·¥õ
2. üõí N·¥á·¥° O Ä·¥Ö·¥á Ä - P ü·¥Ä·¥Ñ·¥á …¥·¥á·¥° SMM ·¥è Ä·¥Ö·¥á Äs
3. üìã O Ä·¥Ö·¥á Äs - V…™·¥á·¥°  è·¥è·¥ú Ä ·¥è Ä·¥Ö·¥á Ä  ú…™s·¥õ·¥è Ä è
4. üë§ A·¥Ñ·¥Ñ·¥è·¥ú…¥·¥õ - C ú·¥á·¥Ñ·¥ã  è·¥è·¥ú Ä  ô·¥Ä ü·¥Ä…¥·¥Ñ·¥á & s·¥õ·¥Ä·¥õs
5. üë• R·¥á“ì·¥á Ä - E·¥Ä Ä…¥  ô è  Ä·¥á“ì·¥á Ä Ä…™…¥…¢ “ì Ä…™·¥á…¥·¥Ös
6. üìä S·¥õ·¥Ä·¥õs - V…™·¥á·¥°  ô·¥è·¥õ s·¥õ·¥Ä·¥õ…™s·¥õ…™·¥Ñs
7. ‚ÑπÔ∏è S·¥ú·¥ò·¥ò·¥è Ä·¥õ - G·¥á·¥õ  ú·¥á ü·¥ò

üí∏ 100 ·¥ò·¥è…™…¥·¥õs = ‚Çπ1
        """)
        
        bot.send_message(user_id, text, reply_markup=back_button_only())

    def check_channel_join(bot, call):
        user_id = call.message.chat.id
        channel_id = os.getenv('CHANNEL_ID', 'prooflelo1')
        
        if check_channel_membership(user_id, channel_id):
            send_welcome(call.message)
            bot.answer_callback_query(call.id, style_text("‚úÖ J·¥è…™…¥·¥á·¥Ö! W·¥á ü·¥Ñ·¥è·¥ç·¥á!"))
        else:
            bot.answer_callback_query(call.id, style_text("‚ùå P ü·¥á·¥Äs·¥á ·¥ä·¥è…™…¥ ·¥õ ú·¥á ·¥Ñ ú·¥Ä…¥…¥·¥á ü “ì…™ Äs·¥õ!"), show_alert=True)

    def send_order_to_channel(bot, order):
        """Send order to proof channel"""
        try:
            channel_id = os.getenv('PROOF_CHANNEL', 'prooflelo1')
            text = style_text(f"""
üÜï N·¥á·¥° O Ä·¥Ö·¥á Ä P ü·¥Ä·¥Ñ·¥á·¥Ö!

üì± S·¥á Ä·¥†…™·¥Ñ·¥á: {order['service_name']}
üë§ Us·¥á Ä ID: {order['user_id']}
üÜî O Ä·¥Ö·¥á Ä ID: {order['order_id']}
üî¢ Q·¥ú·¥Ä…¥·¥õ…™·¥õ è: {order['quantity']}
üíµ P·¥è…™…¥·¥õs: {order['cost_points']}
            """)
            
            markup = InlineKeyboardMarkup()
            markup.add(InlineKeyboardButton(style_text("ü§ñ B·¥è·¥õ H·¥á Ä·¥á üõí"), url=f"https://t.me/{bot.get_me().username}"))
            
            bot.send_message(f"@{channel_id}", text, reply_markup=markup)
        except Exception as e:
            print(f"Error sending to channel: {e}")

    return bot
